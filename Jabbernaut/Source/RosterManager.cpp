///--------------------------------------------------------------------------------------//	File:		RosterManager.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Thursday, 2000-05-18//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ConnectionManager.h"#include	"PrefsManager.h"#include	"Profile.h"#include	"RosterDialog.h"#include	"RosterManager.h"#ifndef TOQ  #include	"ZHLRosterGroup.h"#endif#include	"Messages.h"#include	"UniqueID.h"///- Macros -----------------------------------------------------------------------------#pragma mark -#pragma mark === Macros ===#define	CreateMetaGroup(x)																			\			do {																					\				Str255	pStr;																		\				GetIndString( pStr, kMetaGroupNamesID, kMetaGroupName##x## );						\				FailNIL( msMetaGroup##x## = new ZHLRosterGroup( pStr, kMetaGroup##x##, true ) );	\				msMetaGroup##x##->SetSort( ZHLRosterItemCompare, 0 );								\			} while(0)#define	ShowHideMetaGroup(x)														\			do {																	\				if( PrefsManager::GetPrefsRec().mGroup##x##.show )					\				{																	\					if( 0 == msZHLRootFolder->GetIndex( msMetaGroup##x## ) )		\					{																\						msZHLRootFolder->AddItem( msMetaGroup##x## );				\						msRosterDialog->mZHL->OpenFolder( msMetaGroup##x##,			\								PrefsManager::GetPrefsRec().mGroup##x##.open );		\					}																\				}																	\				else																\					msZHLRootFolder->RemoveItem( msMetaGroup##x## );				\			} while(0)///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kMetaGroupNamesID	= 1004};enum{	kMetaGroupNameOnline		= 1,	kMetaGroupNameMyResources	= 2,	kMetaGroupNameOffline		= 3,	kMetaGroupNamePending		= 4,	kMetaGroupNameStalkers		= 5,	kMetaGroupNameAgents		= 6};///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===RosterDialog		*RosterManager::msRosterDialog		= NULL;ZHLFolder			*RosterManager::msZHLRootFolder		= NULL;ZHLRosterItemList	*RosterManager::msZHLRosterItems	= NULL;ZHLGroupItemList	*RosterManager::msZHLGroupItems		= NULL;#ifdef TOQstd::string			RosterManager::msCurrentGroupName = std::string();#elseZHLRosterGroup		*RosterManager::msMetaGroupOnline		= NULL;ZHLRosterGroup		*RosterManager::msMetaGroupMyResources	= NULL;ZHLRosterGroup		*RosterManager::msMetaGroupOffline		= NULL;ZHLRosterGroup		*RosterManager::msMetaGroupPending		= NULL;ZHLRosterGroup		*RosterManager::msMetaGroupStalkers		= NULL;ZHLRosterGroup		*RosterManager::msMetaGroupAgents		= NULL;#endifCIconHandle			RosterManager::msPresenceCicns[kLastPresenceStatus] =						{ NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };bool				RosterManager::msRosterTransfered		= false;#pragma mark -///--------------------------------------------------------------------------------------//	Init://		Give this manager a chance to initate static members etc.//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::Init(){	ASSERT("msRosterDialog != NULL",msRosterDialog == NULL,0);	ASSERT("msZHLRosterItems != NULL",msZHLRosterItems == NULL,0);	ASSERT("msZHLGroupItems != NULL",msZHLGroupItems == NULL,0);	//	// Create the item and the group list	//	FailNIL( msZHLRosterItems = new ZHLRosterItemList );	FailNIL( msZHLGroupItems = new ZHLGroupItemList );		//	// Create the various meta groups (=folders)	//#ifndef TOQ	CreateMetaGroup( Online );	CreateMetaGroup( MyResources );	CreateMetaGroup( Offline );	CreateMetaGroup( Pending );	CreateMetaGroup( Stalkers );	CreateMetaGroup( Agents );#endif	//	// Create the roster dialog	//	FailNIL( msRosterDialog = new RosterDialog());	try	{		msRosterDialog->InitZWindow();		msRosterDialog->Place();		// create the roster window, but keep it hidden at first!	}	catch( ZoopError err )	{		ForgetObject( msRosterDialog );				throw err;	}#ifdef TOQ	SetRosterStatusPopup( 3 );#endif	//	// Create the root folder	//	ResetRootFolder();			//	// Show the meta groups	//	ShowHideMetaGroups();			//	// Load the presence icons	//		// FIX ME - use constants for these	FailNIL( msPresenceCicns[kOfflinePresenceStatus]	= GetCIcon( 400 ) );	FailNIL( msPresenceCicns[kOnlinePresenceStatus]		= GetCIcon( 401 ) );	FailNIL( msPresenceCicns[kNAPresenceStatus]			= GetCIcon( 402 ) );	FailNIL( msPresenceCicns[kDNDPresenceStatus]		= GetCIcon( 403 ) );	FailNIL( msPresenceCicns[kChatPresenceStatus]		= GetCIcon( 404 ) );	FailNIL( msPresenceCicns[kAwayPresenceStatus]		= GetCIcon( 405 ) );	FailNIL( msPresenceCicns[kUnknownPresenceStatus]	= GetCIcon( 406 ) );	FailNIL( msPresenceCicns[kGotMailVirtualStatus]		= GetCIcon( 407 ) );		ZHLRosterItem::Init();			ConnectionManager::GetClient()->addMsgListener( new RosterDispatcher() );}///--------------------------------------------------------------------------------------//	Deinit://		Give this manager a chance to dispose static members etc.//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::Deinit(){	ZHLRosterItem::Deinit();		if( msRosterDialog )		msRosterDialog->mZHL->DrawingActive( false );	msZHLGroupItems->DisposeAll();	#ifndef TOQ	msMetaGroupOnline->RemoveAllItems();	msMetaGroupMyResources->RemoveAllItems();	msMetaGroupOffline->RemoveAllItems();	msMetaGroupPending->RemoveAllItems();	msMetaGroupStalkers->RemoveAllItems();	msMetaGroupAgents->RemoveAllItems();#endif	msZHLRosterItems->DisposeAll();	if( msZHLRosterItems )		ForgetObject( msZHLRosterItems );	if( msZHLGroupItems )		ForgetObject( msZHLGroupItems );	if( msZHLRootFolder )		ForgetObject( msZHLRootFolder );#ifndef TOQ	if( msMetaGroupOnline )		ForgetObject( msMetaGroupOnline );	if( msMetaGroupMyResources )		ForgetObject( msMetaGroupMyResources );	if( msMetaGroupOffline )		ForgetObject( msMetaGroupOffline );	if( msMetaGroupPending )		ForgetObject( msMetaGroupPending );	if( msMetaGroupStalkers )		ForgetObject( msMetaGroupStalkers );	if( msMetaGroupAgents )		ForgetObject( msMetaGroupAgents );#endif	for( short i = 0; i < kLastPresenceStatus; ++i )	{		if( msPresenceCicns[i] )		{			DisposeCIcon( msPresenceCicns[i] );			msPresenceCicns[i] = NULL;		}	}		ZHLRosterItem::Deinit();}#pragma mark -///--------------------------------------------------------------------------------------//	DoAddRosterItem://		Call throught to the roster dialog//		//	Changes://		2000-06-24	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::DoAddRosterItem( const MacJLib::JID & aJID ){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	msRosterDialog->AddRosterItem( aJID );}///--------------------------------------------------------------------------------------//	DoSelectRosterDialog://		shows the roster window//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::DoSelectRosterDialog(){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);		msRosterDialog->Select();}#pragma mark -///--------------------------------------------------------------------------------------//	OnRosterMsg://		Split the message and dispatch the RosterItem elements one by one//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::OnRosterMsg( const MacJLib::RosterMsg &aMsg ){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	msRosterDialog->mZHL->DrawingActive( false );		MacJLib::RosterItemList::const_iterator	E = aMsg.rosterItems().end();	for( MacJLib::RosterItemList::const_iterator X = aMsg.rosterItems().begin(); X != E; ++X )		OnRosterItem( *X );	msRosterDialog->mZHL->DrawingActive( true );		msRosterDialog->mZHL->RefreshListContents();		// We assume that there is only one inital roster message, and thus set msRosterTransfered 	msRosterTransfered = true;}///--------------------------------------------------------------------------------------//	OnPresenceMsg://		Find the matching roster item and let it handle the message//		//	Changes://		2000-05-11	MH		Created//		2000-09-10	MH		Added code to support "My Resources" meta group//		2000-09-13	MH		Added code for TOQ. Removed the "My Resources" for TOQ///--------------------------------------------------------------------------------------void	RosterManager::OnPresenceMsg( const MacJLib::PresenceMsg &inPresence ){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);		ZHLRosterItem*	zhlRI;	bool			oldDrawingActive;	bool			needRedraw = false;		if( !inPresence.getType().empty() && (inPresence.getType() != "available") && (inPresence.getType() != "unavailable") )		return;		// Make sure drawing is deactivated (to reduce flicker)	oldDrawingActive = msRosterDialog->mZHL->DrawingActive( false );	#ifndef TOQ	// Is this one of our peer resource sending its presence to us?	if( inPresence.getFrom() == Profile::GetOurJID() )	{		// Do a *strict* search		zhlRI = FindZHLRosterItem( inPresence.getFrom(), true );				// No match found? Then we gotta create a new faked roster item...		if( !zhlRI )		{			RosterItem	fakedRosterItem;						// We want to create an roster entry for our co-presence. To achieve this,			// we simply fake a RosterItem!			fakedRosterItem.setJID(inPresence.getFrom());			fakedRosterItem.setName(inPresence.getFrom().getResource());			fakedRosterItem.setSubscription("both");			OnRosterItem( fakedRosterItem, true );						// Now, check if a roster entry was created, and if yes send it the orginal presence message 			zhlRI = FindZHLRosterItem( inPresence.getFrom(), true );			// Make sure a redraw will happen			needRedraw = true;		}		else if( inPresence.getType() == "unavailable" )		{			RosterItem	fakedRosterItem;						// We found a match. But since the presence was an "unavailable" presence,			// we have to remove the faked roster item. We do so by using another faked item			// with subscription set to "remove"			fakedRosterItem.setJID(inPresence.getFrom());			fakedRosterItem.setName(inPresence.getFrom().getResource());			fakedRosterItem.setSubscription("remove");			OnRosterItem( fakedRosterItem, true );						// Since the roster item was removed, zhlRI is invalid. Thus, we set it to NULL.  			zhlRI = NULL;			// Make sure a redraw will happen			needRedraw = true;		}	}	else#endif		zhlRI = FindZHLRosterItem( inPresence.getFrom() );	if( zhlRI )	{		// Tell the roster item the new presence		zhlRI->OnPresence( inPresence );				// Make sure a redraw will happen		needRedraw = true;	}	// Reactivate drawing if it was active		msRosterDialog->mZHL->DrawingActive( oldDrawingActive );	// Redraw if needed	if( needRedraw )		msRosterDialog->mZHL->RefreshListContents();}///--------------------------------------------------------------------------------------//	OnLogin://		Add the meta groups (as specified in the prefs) and then open them//		(again, according to the prefs)//		//	Changes://		2000-06-25	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::OnLogin(){	NotifyPrefChange();	SendRosterQuery();}///--------------------------------------------------------------------------------------//	OnLogout://		First reset the dialog; then kill all roster items/folders from our list//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::OnLogout(){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	// 1) Disable drawing	msRosterDialog->mZHL->DrawingActive( false );	// 2) Kill the old root folder, then create & attach a new one	ResetRootFolder();		// 3) Kill all folders (don't even try to remove their sub-item	//		- we'll care for them in the last step!	msZHLGroupItems->DisposeAll();		// 4) Now, empty all metafolders#ifndef TOQ	msMetaGroupOnline->RemoveAllItems();	msMetaGroupMyResources->RemoveAllItems();	msMetaGroupOffline->RemoveAllItems();	msMetaGroupPending->RemoveAllItems();	msMetaGroupStalkers->RemoveAllItems();	msMetaGroupAgents->RemoveAllItems();#endif		// 5) Remove all ZHLRosterItems	//	Note: a ZHLRosterItem may have a dialog as underling. When you kill the	//	 ZHLRosterItem, it will try to close it's sub-dialog. Now, if _ZOOM_RECT_FX	//	is enabled, this will call ProcessEvents(). This may lead to Idle() being called.	//	This caused a weired crash in the past, which is now fixed (hopefully)	msZHLRosterItems->DisposeAll();		// 6) Show the meta groups	ShowHideMetaGroups();		// 7) Mark the roster as not transfered	msRosterTransfered = false;	// 8) Re-enable drawing and update to screen	msRosterDialog->mZHL->DrawingActive( true );		msRosterDialog->mZHL->RefreshListContents();}#pragma mark -///--------------------------------------------------------------------------------------//	SendRosterItem://		//		//	Changes://		2000-05-15	MH		Created///--------------------------------------------------------------------------------------void		RosterManager::SendRosterItem( const MacJLib::RosterItem &inItem ){	MacJLib::RosterMsg	*aRosterMsg;		FailNIL( aRosterMsg = new MacJLib::RosterMsg() );	aRosterMsg->addRosterItem( inItem );	aRosterMsg->setType("set");//	aRosterMsg->setID(GenerateUniqueID());		ConnectionManager::PostMessage( aRosterMsg );}///--------------------------------------------------------------------------------------//	SendRosterQuery://		//		//	Changes://		2000-05-16	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::SendRosterQuery(){	MacJLib::RosterMsg	*aRosterMsg;				FailNIL( aRosterMsg = new MacJLib::RosterMsg() );	aRosterMsg->setType("get");//	GenerateUniqueID( aRosterMsg );	ConnectionManager::PostMessage( aRosterMsg );}#pragma mark -///--------------------------------------------------------------------------------------//	IsOnRoster://		Check whether a given JID is on the roster or not//		//	Changes://		2000-06-24	MH		Created///--------------------------------------------------------------------------------------bool	RosterManager::IsOnRoster( const MacJLib::JID &inJID, bool strictMatch ){	return (NULL != FindZHLRosterItem( inJID, strictMatch ) );}///--------------------------------------------------------------------------------------//	IsSubscribedTo://		Check whether the user is subscribed to a given JID//		//	Changes://		2000-07-22	MH		Created///--------------------------------------------------------------------------------------bool	RosterManager::IsSubscribedTo( const MacJLib::JID &inJID ){	ZHLRosterItem*	zhlRI;	zhlRI = FindZHLRosterItem( inJID );	if( zhlRI )		return zhlRI->isSubscribedTo();		return false;}///--------------------------------------------------------------------------------------//	CompleteJID://		//		//	Changes://		2000-05-22	MH		Created///--------------------------------------------------------------------------------------std::string	RosterManager::CompleteJID( const MacJLib::JID &inJID ){	ZHLRosterItem*	zhlRI;	std::string		outStr;		zhlRI = FindZHLRosterItem( inJID );		if( zhlRI )	{		outStr = zhlRI->getName();		if( outStr.empty() )			outStr = inJID.getFull();		else		{			outStr += " <";			outStr += inJID.getFull();			outStr += ">";			/*			// HACK: replace all spaces with non-breaking ones...			for( std::string::iterator X = outStr.begin(); X != outStr.end(); ++X )				if( *X == ' ' )					*X = 0x7f;	// non-break space on macs!*/		}	}	else		outStr = inJID.getFull();		return outStr;}///--------------------------------------------------------------------------------------//	GetRosterNick://		Given a JID, try to build a nick from it. First, try the roster name.//		If none is specified, display the username//		//	Changes://		2000-07-14	MH		Created///--------------------------------------------------------------------------------------std::string	RosterManager::GetRosterNick( const MacJLib::JID &inJID ){	ZHLRosterItem*	zhlRI;	std::string		outStr;	zhlRI = FindZHLRosterItem( inJID );	if( zhlRI )		outStr = zhlRI->getName();	if( outStr.empty() )		outStr = inJID.getUsername();	if( outStr.empty() )		outStr = inJID.getFull();		return outStr;}///--------------------------------------------------------------------------------------//	NotifyPrefChange://		Called when the prefs change//		//	Changes://		2000-06-25	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::NotifyPrefChange(){	if( msRosterDialog )	{		// 1) Disable drawing		msRosterDialog->mZHL->DrawingActive( false );		// 2) Show/hide the meta groups:		ShowHideMetaGroups();		// 3) Re-enable drawing and update to screen		msRosterDialog->mZHL->DrawingActive( true );			msRosterDialog->mZHL->RefreshListContents();	}}///--------------------------------------------------------------------------------------//	SortRoster://		Called when the sorting prefs change//		//	Changes://		2000-06-26	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::SortRoster(){#ifndef TOQ	if( msRosterDialog )	{		ZHLRosterGroup	*myGroup;		long			i;				// 1) Disable drawing		msRosterDialog->mZHL->DrawingActive( false );		// 2) sort the meta groups:		for( i = 1; i <= msZHLGroupItems->CountItems(); ++i )		{			FailNIL( myGroup = (ZHLRosterGroup*) msZHLGroupItems->GetObject( i ) );			myGroup->SetSort( ZHLRosterItemCompare, 0 );		}		// 3) Re-enable drawing and update to screen		msRosterDialog->mZHL->DrawingActive( true );			msRosterDialog->mZHL->RefreshListContents();	}#endif}#pragma mark -///--------------------------------------------------------------------------------------//	FindZHLRosterItem://		search msZHLRosterItems for an item that matches inJID.//		Return it, or NULL if none found//		//	Changes://		2000-05-15	MH		Created///--------------------------------------------------------------------------------------ZHLRosterItem*	RosterManager::FindZHLRosterItem( const MacJLib::JID &inJID, bool strictMatch ){	ZHLRosterItem*	zhlRI;	long			i;		if( strictMatch )	{		for( i = 1; i <= msZHLRosterItems->CountItems(); ++i )		{			zhlRI = (ZHLRosterItem*) msZHLRosterItems->GetObject( i );			if( zhlRI->getJID().strictCompare(inJID) )				return zhlRI;		}	}	else	{		for( i = 1; i <= msZHLRosterItems->CountItems(); ++i )		{			zhlRI = (ZHLRosterItem*) msZHLRosterItems->GetObject( i );			if( zhlRI->getJID() == inJID )				return zhlRI;		}	}			return NULL;}#pragma mark -///--------------------------------------------------------------------------------------//	OnRosterItem://		Handle a roster item; add/remove/modify the corresponding ZHLRosterItem//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::OnRosterItem( const RosterItem &inItem, bool strictMatch ){	ZHLRosterItem*	zhlRI;	bool			remover;		// check if this item is of type "remove", so we can handle it correctly	remover = (inItem.getSubscription() == "remove");		zhlRI = FindZHLRosterItem( inItem.getJID(), strictMatch );		if( zhlRI )	{		RemoveFromGroups( *zhlRI );		if( remover )		{			msZHLRosterItems->DeleteObject( zhlRI );			ForgetObject( zhlRI );		}	}	else if (!remover )	{		FailNIL( zhlRI = new ZHLRosterItem() );		msZHLRosterItems->AppendItem( zhlRI );	}	if( zhlRI )	{		zhlRI->OnRosterItem( inItem );		AddToGroups( *zhlRI );	}}///--------------------------------------------------------------------------------------//	AddToGroups://		//		//	Changes://		2000-05-15	MH		Created//		2000-09-13	MH		Added code for TOQ///--------------------------------------------------------------------------------------void	RosterManager::AddToGroups( ZHLRosterItem &inItem ){#ifdef TOQ	if( msCurrentGroupName.empty() )		msZHLRootFolder->AddItem( &inItem );	else	{		for( MacJLib::GroupList::const_iterator X = inItem.getGroupList().begin(); X != inItem.getGroupList().end(); ++X )		{			if( *X == msCurrentGroupName )			{				msZHLRootFolder->AddItem( &inItem );				return;			}		}	}#else	MacJLib::GroupList	myGroupList;	ZHLRosterGroup		*myGroup;	myGroupList = inItem.getGroupList();		if( myGroupList.empty() )	{		GetMetaFolder( inItem.GetMetaGroup() )->AddItem( &inItem );	}	else	{		for( MacJLib::GroupList::iterator X = myGroupList.begin(); X != myGroupList.end(); ++X )		{			// FIX ME group color			myGroup = FindOrCreateGroupWithName( *X, inItem.GetMetaGroup() );			if( myGroup)				myGroup->AddItem( &inItem );		}	}	ShowHideMetaGroups();#endif}///--------------------------------------------------------------------------------------//	RemoveFromGroups://		//		//	Changes://		2000-05-15	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::RemoveFromGroups( ZHLRosterItem &inItem ){#ifdef TOQ	msZHLRootFolder->RemoveItem( &inItem );#else	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msZHLGroupItems == NULL",msZHLGroupItems != NULL,0);		ZHLRosterGroup		*myGroup;	long				i;	//	// 1) Remove us from the root folder and the meta group folders. This is	//	harmless even if we're not in one of 'em.	//	msZHLRootFolder->RemoveItem( &inItem );	msMetaGroupOnline->RemoveItem( &inItem );	msMetaGroupMyResources->RemoveItem( &inItem );	msMetaGroupOffline->RemoveItem( &inItem );	msMetaGroupPending->RemoveItem( &inItem );	msMetaGroupStalkers->RemoveItem( &inItem );	msMetaGroupAgents->RemoveItem( &inItem );		//	// 2) Walk the list of group folders, and remove us from each. If this	//    causes the group to be empty, remove and delete it, too!	//    Note: we must walk backwards!	//	for( i = msZHLGroupItems->CountItems(); i >= 1; --i )	{		FailNIL( myGroup = (ZHLRosterGroup*) msZHLGroupItems->GetObject( i ) );		myGroup->RemoveItem( &inItem );				if( 0 == myGroup->CountItems() )		{			// we just removed the last item in this group, so remove it			GetMetaFolder( myGroup->GetMetaGroup() )->RemoveItem( myGroup );			msZHLGroupItems->DeleteItem( i );			delete myGroup;		}	}#endif}///--------------------------------------------------------------------------------------//	FindOrCreateGroupWithName://		This will check if there's already a group object with the name 'name'.//		If found, return the object, otherwise create a new one and return that.//		//	Changes://		2000-05-15	MH		Created///--------------------------------------------------------------------------------------ZHLRosterGroup*	RosterManager::FindOrCreateGroupWithName( const std::string &name, MetaGroup inMetaGroup ){#ifdef TOQ	return NULL;#else	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msZHLGroupItems == NULL",msZHLGroupItems != NULL,0);		ZHLRosterGroup	*myGroup;	Str255			namePStr;	long			i;#if TOQ	bool			ignoreCase = true;#else	bool			ignoreCase = false;#endif	CopyCToPString(name.c_str(), namePStr);	for( i = 1; i <= msZHLGroupItems->CountItems(); ++i )	{		FailNIL( myGroup = (ZHLRosterGroup*) msZHLGroupItems->GetObject( i ) );#if TOQ		if( (inMetaGroup == myGroup->GetMetaGroup()) && (RelString(myGroup->GetName(), namePStr, false, false) == 0) )#else		if( (inMetaGroup == myGroup->GetMetaGroup()) && (RelString(myGroup->GetName(), namePStr, true, true) == 0) )#endif		{			// found matching group folder: return it to the caller			return myGroup;		}	}		// If we came till here, there was no matching group folder, thus we	// need to create one from scratch	FailNIL( myGroup = new ZHLRosterGroup( namePStr, inMetaGroup ));	myGroup->SetSort( ZHLRosterItemCompare, 0 );	// set sort proc		// Put it into the list of group folders.	msZHLGroupItems->AppendItem( myGroup );	// Insert it into the matching meta group folder.	GetMetaFolder(inMetaGroup)->AddItem( myGroup );		// FIX ME	// whether the folder is opened or closed initially depends on the prefs	// for its meta folder...	msRosterDialog->mZHL->OpenFolder( myGroup, IsMetaFolderOpen(inMetaGroup) );	return myGroup;	// finally, return the newly created group object#endif}#pragma mark -///--------------------------------------------------------------------------------------//	CheckMetaGroups://		Make sure every roster item is in the correct meta group//		//	Changes://		2000-08-15	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::CheckMetaGroups(){	ZHLRosterItem*	zhlRI;	long			i;	MetaGroup		oldMetaGroup;	for( i = 1; i <= msZHLRosterItems->CountItems(); ++i )	{		FailNIL(zhlRI = dynamic_cast<ZHLRosterItem*>(msZHLRosterItems->GetObject(i)) );		oldMetaGroup = zhlRI->GetMetaGroup();		if( oldMetaGroup != zhlRI->CalcMetaGroup() )		{			RefreshRosterItem( *zhlRI );		}				}}///--------------------------------------------------------------------------------------//	ShowHideMetaGroups://		Call throught to the roster dialog//		//	Changes://		2000-06-25	MH		Created//		2000-09-13	MH		Added code for TOQ///--------------------------------------------------------------------------------------void	RosterManager::ShowHideMetaGroups(){#ifndef TOQ	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msMetaGroupOnline == NULL",msMetaGroupOnline != NULL,0);	ASSERT("msMetaGroupMyResources == NULL",msMetaGroupMyResources != NULL,0);	ASSERT("msMetaGroupOffline == NULL",msMetaGroupOffline != NULL,0);	ASSERT("msMetaGroupPending == NULL",msMetaGroupPending != NULL,0);	ASSERT("msMetaGroupStalkers == NULL",msMetaGroupStalkers != NULL,0);	ASSERT("msMetaGroupAgents == NULL",msMetaGroupAgents != NULL,0);		ShowHideMetaGroup( Online );	ShowHideMetaGroup( MyResources );	ShowHideMetaGroup( Offline );	ShowHideMetaGroup( Pending );	ShowHideMetaGroup( Stalkers );	ShowHideMetaGroup( Agents );#endif}///--------------------------------------------------------------------------------------//	GetGroupList://		Generate a list of all currently existing groups//		//	Changes://		2000-09-26	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::GetGroupList( GroupList &outList ){	ZHLRosterItem*	zhlRI;	GroupList		helper;	long			i;		outList.clear();		for( i = 1; i <= msZHLRosterItems->CountItems(); ++i )	{		FailNIL( zhlRI = (ZHLRosterItem*) msZHLRosterItems->GetObject( i ));		helper.clear();		helper = zhlRI->getGroupList();		outList.merge( helper );	}}///--------------------------------------------------------------------------------------//	GetMetaFolder://		Returns the 'meta' ZHLRosterGroup that matches inMetaGroup, or msZHLRootFolder//		//	Changes://		2000-06-08	MH		Created///--------------------------------------------------------------------------------------ZHLFolder*	RosterManager::GetMetaFolder( MetaGroup inMetaGroup ){	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);#ifndef TOQ	ASSERT("msMetaGroupOnline == NULL",msMetaGroupOnline != NULL,0);	ASSERT("msMetaGroupMyResources == NULL",msMetaGroupMyResources != NULL,0);	ASSERT("msMetaGroupOffline == NULL",msMetaGroupOffline != NULL,0);	ASSERT("msMetaGroupPending == NULL",msMetaGroupPending != NULL,0);	ASSERT("msMetaGroupStalkers == NULL",msMetaGroupStalkers != NULL,0);	ASSERT("msMetaGroupAgents == NULL",msMetaGroupAgents != NULL,0);		switch( inMetaGroup )	{	case kMetaGroupOnline:		return msMetaGroupOnline;		break;	case kMetaGroupMyResources:		return msMetaGroupMyResources;		break;	case kMetaGroupOffline:		return msMetaGroupOffline;		break;	case kMetaGroupPending:		return msMetaGroupPending;		break;	case kMetaGroupStalkers:		return msMetaGroupStalkers;		break;	case kMetaGroupAgents:		return msMetaGroupAgents;		break;	}#endif		return msZHLRootFolder;}///--------------------------------------------------------------------------------------//	IsMetaFolderOpen://		Returns if the matching meta folder is to be displayed open//		//	Changes://		2000-06-25	MH		Created///--------------------------------------------------------------------------------------bool	RosterManager::IsMetaFolderOpen( MetaGroup inMetaGroup ){#ifdef TOQ	return true;#else	switch( inMetaGroup )	{	case kMetaGroupOnline:		return PrefsManager::GetPrefsRec().mGroupOnline.open;		break;	case kMetaGroupMyResources:		return PrefsManager::GetPrefsRec().mGroupMyResources.open;		break;	case kMetaGroupOffline:		return PrefsManager::GetPrefsRec().mGroupOffline.open;		break;	case kMetaGroupPending:		return PrefsManager::GetPrefsRec().mGroupPending.open;		break;	case kMetaGroupStalkers:		return PrefsManager::GetPrefsRec().mGroupStalkers.open;		break;	case kMetaGroupAgents:		return PrefsManager::GetPrefsRec().mGroupAgents.open;		break;	}	//ASSERT("Shouldn't reach this point!",false,0);	return false;#endif}void	RosterManager::RefreshRosterItem( ZHLRosterItem &inItem ){	RemoveFromGroups( inItem );	AddToGroups( inItem );}///--------------------------------------------------------------------------------------//	ResetRootFolder://		"Empties" the root folder by replacing it with a new one (this is a hack to//		work around problems in ZNL)//		//	Changes://		2000-09-14	MH		Created///--------------------------------------------------------------------------------------void	RosterManager::ResetRootFolder(){	// If there is already a root folder, dispose it.	if( msZHLRootFolder )		ForgetObject( msZHLRootFolder );		// Create a new root folder (with correct sorting proc)	FailNIL( msZHLRootFolder = new ZHLFolder( "\proot" ) );	msZHLRootFolder->SetSort( ZHLRosterItemCompare, 0 );		// And finally attach it to the ZHL	msRosterDialog->mZHL->AttachRootFolder(msZHLRootFolder);}#pragma mark -#ifdef TOQvoid	RosterManager::SetCurrentGroupName( const std::string &group ){	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);	ZHLRosterItem*	zhlRI;	long			i;	msCurrentGroupName = group;		// Disable drawing	msRosterDialog->mZHL->DrawingActive( false );	// Reset the root folder	ResetRootFolder();		// Now loop over all items and add them if appropriate	for( i = 1; i <= msZHLRosterItems->CountItems(); ++i )	{		FailNIL( zhlRI = dynamic_cast<ZHLRosterItem*>(msZHLRosterItems->GetObject(i)) );		AddToGroups( *zhlRI );	}	// Re-enable drawing and update to screen	msRosterDialog->mZHL->DrawingActive( true );		msRosterDialog->mZHL->RefreshListContents();}void	RosterManager::SetRosterDialogTitle( const std::string &title ){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);		Str255	pStr;		CopyCToPString( title.c_str(), pStr );	msRosterDialog->SetTitle( pStr );}void	RosterManager::SetRosterStatusPopup( long value ){	ASSERT("msRosterDialog == NULL",msRosterDialog != NULL,0);		// FIX ME	// EVIL HACK! we have hardcoded here the item id of the popup! Baaaaddd	msRosterDialog->SetValue( 2, value );}void	RosterManager::AddFakeRosterItem( const MessageMsg &inMessage ){	RosterItem	fakedRosterItem;		msRosterDialog->mZHL->DrawingActive( false );		// We want to create an roster entry for our co-presence. To achieve this,	// we simply fake a RosterItem!	fakedRosterItem.setJID(inMessage.getFrom());	fakedRosterItem.setName(inMessage.getFrom().getResource());	fakedRosterItem.setSubscription("none");	OnRosterItem( fakedRosterItem );		msRosterDialog->mZHL->DrawingActive( true );		msRosterDialog->mZHL->RefreshListContents();}#endif#pragma mark -///--------------------------------------------------------------------------------------//	DrawPresenceIcon://		Draws the cicn matching PresenceStatus 'which' at position 'where'//		//	Changes://		2000-05-18	MH		Created//		2000-07-16	MH		Moved from ZHLRosterItem to RosterManager///--------------------------------------------------------------------------------------void	RosterManager::DrawPresenceIcon( const PresenceStatus which, const Point where ){	ASSERT("'which' out of range!",((0<=which)&&(which<kLastPresenceStatus)), 0);	CIconHandle	ci = NULL;		ci = msPresenceCicns[which];		if( ci )	{		Rect	ir = (*ci)->iconPMap.bounds;		OffsetRect( &ir, -ir.left, -ir.top );		OffsetRect( &ir, where.h, where.v );				FailOSErr( PlotCIconHandle( &ir, kAlignAbsoluteCenter, kTransformNone, ci ) );	}}