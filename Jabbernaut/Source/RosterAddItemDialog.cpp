///--------------------------------------------------------------------------------------//	File:		RosterAddItemDialog.cpp//	Project:	Jabbernaut////	Purpose:	This dialog allows the user to add items to the roster//	Created:	Saturday, 2000-05-27//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialogItem.h"#include	"ZListDialogItem.h"#include	"AgentsManager.h"#include	"PresenceManager.h"#include	"RosterAddItemDialog.h"#include	"RosterManager.h"///- Constants --------------------------------------------------------------------------#pragma mark -#pragma mark === Constants ===enum{	kRosterAddItemDialogID = 1103};enum{	kRosterAddItemOKBtnID			= 1,	kRosterAddItemTypePopUpID		= 4,	kRosterAddItemTypeDisplayID		= 7,		// this is a static text (label) field!!	kRosterAddItemUserIDID			= 8,	kRosterAddItemNicknameID		= 10,		kRosterAddItemSubscribeToID		= 13,	kRosterAddItemGroupListID		= 16,	kRosterAddItemGroupAddBtnID		= 17};// FIX ME - this is also in ZHLRosterItem.cppenum{	kAddGroupDialogID		= 1107,	kAddGroupNameID			= 4};#pragma mark -class TransportPopUpClickModifier : public ZModifier{	//ÊData	protected:			// Functions	public:		TransportPopUpClickModifier() : ZModifier()		{}		virtual ~TransportPopUpClickModifier()			{}		virtual void	Execute( ZCommander* caller, const long modMessage, UntypedPtr modData );};///--------------------------------------------------------------------------------------//	Execute://		rebuild the transport pop up on a click on the dialog item//		//	Changes://		2000-08-03	MH		Created///--------------------------------------------------------------------------------------void	TransportPopUpClickModifier::Execute( ZCommander* caller, const long modMessage, UntypedPtr modData ){	ZDialogItem	*di = dynamic_cast<ZDialogItem *>(caller);	ASSERT("di == NULL",di != NULL,0);	ASSERT("di not a control",di->GetType() & ctrlItem,0);	if( modMessage == kModifierItemClicked )	{		MenuHandle	menuH;		// FIX ME		// make sure the menu is loaded		FailNILRes( menuH = GetMenu( 1103 ) );				// Then let the AgentsManager fill the transports into the menu		AgentsManager::BuildTransportsPopup( menuH );		// Finally, make sure the CDEF uses our menu		#if TARGET_API_MAC_CARBON			SetControlPopupMenuHandle((ControlHandle)di->GetMacItemHandle(), menuH);		#else			PopupPrivateDataHandle	popUpHandle;			FailNIL( popUpHandle = (PopupPrivateDataHandle)								(**(ControlHandle)di->GetMacItemHandle()).contrlData);			(**popUpHandle).mHandle = menuH;		#endif	}}#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------RosterAddItemDialog::RosterAddItemDialog()	: inherited( gApplication, kRosterAddItemDialogID ){	mZHLAgentItem = NULL;}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------RosterAddItemDialog::~RosterAddItemDialog(){}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		clear all fields//		//	Changes://		2000-05-27	MH		Created//		2000-10-16	MH		Added group list code///--------------------------------------------------------------------------------------void	RosterAddItemDialog::InitZWindow(){	ZListDialogItem*	myListItem;	GroupList			allGroups;	Cell				cell = { 0, 0 };	long				i = 0;	Str255				pStr;		inherited::InitZWindow();			SetValueAsString( kRosterAddItemUserIDID,  "" );	SetValueAsString( kRosterAddItemNicknameID,  "" );		GetItemObject(kRosterAddItemTypePopUpID)->AddModifier( new TransportPopUpClickModifier() );		//	// Init the group list	//		FailNIL( myListItem = dynamic_cast<ZListDialogItem *>(GetItemObject(kRosterAddItemGroupListID)) );		myListItem->MLSetEmptyList();	myListItem->MLAppendCol();	myListItem->MLSetSelectionFlags( lExtendDrag | lUseSense );	RosterManager::GetGroupList( allGroups );		for( MacJLib::GroupList::iterator X = allGroups.begin(); X != allGroups.end(); ++X )	{		CopyCToPString( X->c_str(), pStr );		cell.v = myListItem->MLAppendRowInAlphaOrder( pStr, true );	}}///--------------------------------------------------------------------------------------//	ClickItem://		put your description here//		//	Changes://		2000-05-27	MH		Created///--------------------------------------------------------------------------------------void	RosterAddItemDialog::ClickItem( const short theItem ){	inherited::ClickItem( theItem );	switch( theItem )	{	case kRosterAddItemOKBtnID:		{			MacJLib::RosterItem		myRosterItem;			GroupList				myGroupList;			Cell					myCell = { 0, 0 };			std::string				dummy;			MacJLib::JID			newUserJID;						GetValueAsString( kRosterAddItemUserIDID, dummy );			if( mZHLAgentItem )			{				for( std::string::iterator X = dummy.begin(); X != dummy.end(); ++X )					if( *X == '@' )						*X = '%';				dummy += '@';				dummy += mZHLAgentItem->getJID().getServer();			}			// FIX ME - we should check if "dummy" contains a valid JID!!!!			newUserJID = dummy;			if( newUserJID.getUsername().empty() || newUserJID.getServer().empty() )			{				// error!				gWindowManager->DeactivateForDialog( -1, TRUE );				(void) Alert( 1200, NULL );				gWindowManager->Activate();				return;			}			myRosterItem.setJID( dummy );						GetValueAsString( kRosterAddItemNicknameID, dummy );			myRosterItem.setName( dummy );						{				// read out group list				ListGetSelected( kRosterAddItemGroupListID, myGroupList );				myRosterItem.setGroupList( myGroupList );			}						// Subscribe to the remote user if we are told to			if( GetValue(kRosterAddItemSubscribeToID) )				PresenceManager::SendPresence( myRosterItem.getJID(), "subscribe", "Subscription Request" );						// Now we actually add the item to the roster:			RosterManager::SendRosterItem( myRosterItem );						// finally, close the dialog!			Close( kRunning );		}		break;	case kRosterAddItemTypePopUpID:		{			MenuHandle		menuH;			long			i;						// First obtain a menu handle to the pop up menu			#if TARGET_API_MAC_CARBON				menuH = GetControlPopupMenuHandle((ControlHandle)GetItemObject(kRosterAddItemTypePopUpID)->GetMacItemHandle());			#else				PopupPrivateDataHandle	popUpHandle;				FailNIL( popUpHandle = (PopupPrivateDataHandle)									(**(ControlHandle)GetItemObject(kRosterAddItemTypePopUpID)->GetMacItemHandle()).contrlData);				menuH = (**popUpHandle).mHandle;			#endif			// See which item was clicked...			i = GetValue( kRosterAddItemTypePopUpID );						// ...and find the matching transport, if any			mZHLAgentItem = AgentsManager::FindItemInTransportsPopup( menuH, i );						if( mZHLAgentItem )				SetValueAsString( kRosterAddItemTypeDisplayID, mZHLAgentItem->getTransport() );			else				SetValueAsString( kRosterAddItemTypeDisplayID, "Jabber ID" );		}		break;	case kRosterAddItemGroupAddBtnID:		{			Str255				groupName;			ZListDialogItem*	myListItem;			Cell				myCell = { 0, 0 };			FailNIL( myListItem = dynamic_cast<ZListDialogItem *>(GetItemObject(kRosterAddItemGroupListID)) );						ZDialog	d( this, kAddGroupDialogID );			d.InitZWindow();						if( d.RunModal() )			{				d.GetValueAsText( kAddGroupNameID, groupName );				myCell.v = myListItem->MLAppendRowInAlphaOrder( groupName, true );				LSetSelect( TRUE, myCell, myListItem->MLGetMacList() );			}		}		break;	}}#pragma mark -///--------------------------------------------------------------------------------------//	SetUserJID://		Sets the targe user ID. This modifies both kRosterAddItemTypePopUpID and//		kRosterAddItemUserIDID if appropriate//		//	Changes://		2000-10-16	MH		Created///--------------------------------------------------------------------------------------void	RosterAddItemDialog::SetUserJID( const JID & aJID ){	// FIX ME!!	// We need to update the pop up menu!!!!	// Also, it would be nice to have a hierarchic menu, with "AIM", "MSN" etc. at the top level, and the 	// transports at the second level.	// Also: maybe only transports that need to reg, and transports that need reg and that you are regged with	// should be listed??? Hm		SetValueAsString( kRosterAddItemUserIDID, aJID.getFull() );}