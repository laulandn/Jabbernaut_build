///--------------------------------------------------------------------------------------//	File:		Profile.cpp//	Project:	Jabernaut////	Purpose:	<default>//	Created:	Tuesday, 2000-04-20//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"PrefsManager.h"#include	"Profile.h"#include	"RosterManager.h"#include	"JID.h"///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===bool				Profile::msNeedsRegister = false;///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -///--------------------------------------------------------------------------------------//	IsInited://		put your description here//		//	Changes://		2000-04-23	MH		Created///--------------------------------------------------------------------------------------bool	Profile::IsInited(){	return !GetServer().empty() &&			!GetUsername().empty() &&			!GetPassword().empty() &&			!GetResource().empty();}#pragma mark -///--------------------------------------------------------------------------------------//	GetOurJID://		Return a JID containing our username/server/resource//		//	Changes://		2000-09-11	MH		Created///--------------------------------------------------------------------------------------JID			Profile::GetOurJID(){	return JID(Profile::GetUsername(), Profile::GetServer(), Profile::GetResource()); }///--------------------------------------------------------------------------------------//	GetServer://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------const std::string&	Profile::GetServer(){	return PrefsManager::GetPrefsRec().mServer;}///--------------------------------------------------------------------------------------//	SetServer://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------void			Profile::SetServer( const std::string& iServer ){	std::string::size_type	pos = iServer.find(":");	if( pos != std::string::npos )	{		PrefsManager::msPrefsRec.mServerPort = iServer.substr(pos+1).c_str();		PrefsManager::msPrefsRec.mServer = iServer.substr(0, pos);	}	else	{		PrefsManager::msPrefsRec.mServerPort = 0L;		PrefsManager::msPrefsRec.mServer = iServer;	}		PrefsManager::SyncPrefsDialog();}///--------------------------------------------------------------------------------------//	GetPort://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------unsigned short	Profile::GetPort(){	if( PrefsManager::GetPrefsRec().mServerPort == 0L )#ifndef TOQ		if( PrefsManager::GetPrefsRec().mUseSSL )			return 5223;		else#endif			return 5222;	else		return PrefsManager::GetPrefsRec().mServerPort;}///--------------------------------------------------------------------------------------//	SetPort://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------void			Profile::SetPort( unsigned short iPort ){	PrefsManager::msPrefsRec.mServerPort = iPort;	PrefsManager::SyncPrefsDialog();}#pragma mark -///--------------------------------------------------------------------------------------//	GetUsername://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------const std::string&	Profile::GetUsername(){// FIX ME	return PrefsManager::GetPrefsRec().mUsername;}///--------------------------------------------------------------------------------------//	SetUsername://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------void			Profile::SetUsername( const std::string& iUsername ){// FIX ME	PrefsManager::msPrefsRec.mUsername = iUsername;	PrefsManager::SyncPrefsDialog();#ifdef TOQ	RosterManager::SetRosterDialogTitle( iUsername );#endif}///--------------------------------------------------------------------------------------//	GetPassword://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------const std::string&	Profile::GetPassword(){// FIX ME	return PrefsManager::GetPrefsRec().mPassword;}///--------------------------------------------------------------------------------------//	SetPassword://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------void			Profile::SetPassword( const std::string& iPassword ){	PrefsManager::msPrefsRec.mPassword = iPassword;	PrefsManager::SyncPrefsDialog();}///--------------------------------------------------------------------------------------//	GetResource://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------const std::string&	Profile::GetResource(){	static const std::string	sJnautStr("Jabbernaut");	if( PrefsManager::GetPrefsRec().mResource.empty() )		return sJnautStr;	else		return PrefsManager::GetPrefsRec().mResource;}///--------------------------------------------------------------------------------------//	SetResource://		put your description here//		//	Changes://		2000-04-20	MH		Created///--------------------------------------------------------------------------------------void			Profile::SetResource( const std::string& iResource ){// FIX ME	PrefsManager::msPrefsRec.mResource = iResource;	PrefsManager::SyncPrefsDialog();}