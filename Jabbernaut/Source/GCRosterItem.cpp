///--------------------------------------------------------------------------------------//	File:		GCRosterItem.cpp//	Project:	Jabbernaut////	Purpose:	This class manages groupchat "roster" items//	Created:	Sunday, 2000-07-30//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZGrafState.h"#include	"GCRosterItem.h"#include	"PrefsManager.h"#include	"PresenceManager.h"#include	"RosterManager.h"#include	"Messages.h"///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------GCRosterItem::GCRosterItem(){	mStatus = kUnknownPresenceStatus;	mKarma = kBasicKarma;	mIdle = false;	mLastActivityTime = TickCount();}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------GCRosterItem::GCRosterItem(const std::string &inNick){	mNick = inNick;	mStatus = kUnknownPresenceStatus;	if( mNick[0] == '@' )	{		mKarma = kOperatorKarma;		mNick.erase(0,1);	}	else if( mNick[0] == '+' )	{		mKarma = kVoiceKarma;		mNick.erase(0,1);	}	mIdle = false;	mLastActivityTime = TickCount();}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------GCRosterItem::GCRosterItem(const PresenceMsg &inPresenceMsg){	mNick = inPresenceMsg.getFrom().getResource();	mStatus = PresenceManager::GetPresenceStatus( inPresenceMsg );	if( mNick[0] == '@' )	{		mKarma = kOperatorKarma;		mNick.erase(0,1);	}	else if( mNick[0] == '+' )	{		mKarma = kVoiceKarma;		mNick.erase(0,1);	}	mIdle = false;	mLastActivityTime = TickCount();}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------GCRosterItem::~GCRosterItem(){}#pragma mark -///--------------------------------------------------------------------------------------//	OnActivity://		This is called by our parent list dialog item whenever activity occurs//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------bool	GCRosterItem::OnActivity() const{	bool oldIdle = mIdle;		mLastActivityTime = TickCount();	mIdle = false;	return oldIdle;}///--------------------------------------------------------------------------------------//	OnIdle://		This is called periodically by our parent list dialog item//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------bool	GCRosterItem::OnIdle() const{	bool oldIdle = mIdle;		if( mLastActivityTime + (PrefsManager::GetPrefsRec().mGroupChatIdleTime*3600) < TickCount() )		mIdle = true;	else		mIdle = false;	return mIdle != oldIdle;}///--------------------------------------------------------------------------------------//	Draw://		put your description here//		//	Changes://		2000-07-30	MH		Created///--------------------------------------------------------------------------------------void	GCRosterItem::Draw(Rect& r) const{	ZGrafState	zg;	RGBColor	color;	Str255		pStr;	Point		pt;	short		height, relTop;			height = r.bottom - r.top;			// height of cell	relTop = 1 + (height * 2) / 3;		// top offset for text		//	// Draw the presence icon	//	pt.h = r.left + 2;	pt.v = r.top;	RosterManager::DrawPresenceIcon( mStatus, pt );			//	// Set the text color, based on our karma, and if we were idle	//	if( mKarma == kOperatorKarma )		color = PrefsManager::GetPrefsRec().mColorOps;	else if( mKarma == kVoiceKarma )		color = PrefsManager::GetPrefsRec().mColorVoice;	else		color = gBlack;		if( mIdle )	{		// This causes the color to look 'grayed'		color.red = color.red/2 + 0x8000;		color.blue = color.blue/2 + 0x8000;		color.green = color.green/2 + 0x8000;	}	RGBForeColor( &color );		//	// Finally, draw the text (leaving some room to the icon)	//	CopyCToPString( mNick.c_str(), pStr );//	MoveTo (r.left + 30, r.top + relTop);	MoveTo (r.left + 20, r.top + relTop);	DrawString( pStr );}