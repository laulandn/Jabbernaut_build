///--------------------------------------------------------------------------------------//	File:		ZHLRosterSubItem.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Sunday, 2000-07-16//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"ZGrafState.h"#ifndef TOQ  #include	"ChatManager.h"#endif#include	"ConnectionManager.h"#include	"PrefsManager.h"#include	"RosterManager.h"#include	"SendManager.h"#include	"ZHLRosterSubItem.h"#include	"Messages.h"#include	"UniqueID.h"///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kRosterResourceContextMenuID	= 1005};enum{	kRosterResourceContextMenuMessageID			= 1,	kRosterResourceContextMenuChatID			= 2,	kRosterResourceContextMenuQueryVersionID	= 4,	kRosterResourceContextMenuQueryTimeID		= 5};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------ZHLRosterSubItem::ZHLRosterSubItem( ZHLRosterItem *boss, const MacJLib::JID &aJID )	: ZHLItem("\pRosterItem"){	mParent = boss;	mJID = aJID;	mPriority = 0;	mPresenceStatus = kOfflinePresenceStatus;		Str255	pStr;	CopyCToPString( mJID.getResource().c_str(), pStr );	CopyPStringTrunc(pStr, title, 31);}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------ZHLRosterSubItem::~ZHLRosterSubItem(){}#pragma mark -///--------------------------------------------------------------------------------------//	OnPresence://		Handle incoming presence message for this item.//		//	Changes://		2000-07-17	MH		Created///--------------------------------------------------------------------------------------void	ZHLRosterSubItem::OnPresence( const MacJLib::PresenceMsg &inPresence ){	mPresenceStatus = PresenceManager::GetPresenceStatus( inPresence );	/*		if( mPresenceStatus == kOfflinePresenceStatus		// tell parent to remove us...	*/	mPriority = inPresence.getPriority();	mStatus = inPresence.getStatus();}#pragma mark -///--------------------------------------------------------------------------------------//	DrawCell://		Draw the list cell.//		//	Changes://		2000-07-16	MH		Created///--------------------------------------------------------------------------------------void	ZHLRosterSubItem::DrawCell( Rect& r, ZHLDialogItem *boss ){// FIX ME - make colors customisable	ZGrafState	zg;	Point		pt;	short		height, relTop;	RGBColor	textColor;	RGBColor	backColor;		if( !(boss && boss->IsSelected(this)) && CustomBackgroundColour( backColor, boss ) )	{		Rect		dummyRect;				RGBBackColor( &backColor );		dummyRect = r;		dummyRect.left = 1;		dummyRect.bottom++;		dummyRect.right--;		EraseRect( &dummyRect );	}		// Set up the color for the text	if( CustomForegroundColour( textColor, boss ) )		RGBForeColor( &textColor );		height = r.bottom - r.top;			// height of cell	relTop = 1 + (height * 2) / 3;		// top offset for text		// FIX ME!//	r.left += 8;	pt.h = r.left;	pt.v = r.top + 1;	RosterManager::DrawPresenceIcon( mPresenceStatus, pt );	r.left += 20;		MoveTo (r.left, r.top + relTop);	DrawString( title );}///--------------------------------------------------------------------------------------//	DoubleClick://		Depending on the prefs, this sends a message or starts a chat//		//	Changes://		2000-07-16	MH		Created///--------------------------------------------------------------------------------------void	ZHLRosterSubItem::DoubleClick(short modifiers, ZHLDialogItem *boss){#ifdef TOQ	SendManager::DoNewMessage( mJID );#else	bool	doSendMsg = PrefsManager::GetPrefsRec().mDoubleClickSendsMsg;		if( modifiers & optionKey )		doSendMsg = !doSendMsg;	if( doSendMsg )		SendManager::DoNewMessage( mJID );	else		ChatManager::DoInviteToChat( mJID );#endif}///--------------------------------------------------------------------------------------//	ContextualMenuClick://		//		//	Changes://		2000-07-17	MH		Created///--------------------------------------------------------------------------------------void	ZHLRosterSubItem::ContextualMenuClick(const Point where){	MenuHandle	aContextualMenu;	long		result;		FailNIL( aContextualMenu = GetMenu( kRosterResourceContextMenuID ) );	// Use the normal Mac OS Menu Manager to display the menu. Note	// that we add 1 to the vertical coordinate so that we have the	// same behaviour as the CMM: i.e., the menu appears without	// any initial selection.	InsertMenu( aContextualMenu, hierMenu );	result = PopUpMenuSelect( aContextualMenu,				where.v + 1, where.h,				1 );	DeleteMenu( kRosterResourceContextMenuID );	ReleaseResource( (Handle)aContextualMenu );		switch( LoWord(result) )	{	case kRosterResourceContextMenuMessageID:		SendManager::DoNewMessage( mJID );		break;	case kRosterResourceContextMenuChatID:#ifndef TOQ		ChatManager::DoInviteToChat( mJID );#endif		break;	case kRosterResourceContextMenuQueryVersionID:		{			MacJLib::VersionMsg	*myVer;			FailNIL( myVer = new MacJLib::VersionMsg() );			myVer->setTo( mJID.getFull() );			myVer->setType("get");			myVer->setID(GenerateUniqueID());						ConnectionManager::PostMessage( myVer );		}		break;	case kRosterResourceContextMenuQueryTimeID:		{			MacJLib::TimeMsg	*myTime;			FailNIL( myTime = new MacJLib::TimeMsg() );			myTime->setTo( mJID.getFull() );			myTime->setType("get");			myTime->setID(GenerateUniqueID());						ConnectionManager::PostMessage( myTime );		}		break;	}}#pragma mark -///--------------------------------------------------------------------------------------//	CustomBackgroundColour://		Override to make sure ZHL draws us correctly//		//	Changes://		2000-08-21	MH		Created///--------------------------------------------------------------------------------------bool	ZHLRosterSubItem::CustomBackgroundColour(RGBColor &color, ZHLDialogItem *){#ifdef TOQ	return false;#else	ASSERT("mParent == NULL",mParent != NULL,0);	switch( mParent->GetMetaGroup() )	{	case kMetaGroupOnline:		color = PrefsManager::GetPrefsRec().mGroupOnline.resourceColor;		break;	case kMetaGroupMyResources:		color = PrefsManager::GetPrefsRec().mGroupMyResources.resourceColor;		break;	case kMetaGroupOffline:		color = PrefsManager::GetPrefsRec().mGroupOffline.resourceColor;		break;	case kMetaGroupPending:		color = PrefsManager::GetPrefsRec().mGroupPending.resourceColor;		break;	case kMetaGroupStalkers:		color = PrefsManager::GetPrefsRec().mGroupStalkers.resourceColor;		break;	case kMetaGroupAgents:		color = PrefsManager::GetPrefsRec().mGroupAgents.resourceColor;		break;	default:		return false;		break;	}	return true;#endif}///--------------------------------------------------------------------------------------//	CustomForegroundColour://		Text color setup//		//	Changes://		2000-08-21	MH		Created///--------------------------------------------------------------------------------------bool	ZHLRosterSubItem::CustomForegroundColour(RGBColor &color, ZHLDialogItem *){#ifdef TOQ	return false;#else	ASSERT("mParent == NULL",mParent != NULL,0);	switch( mParent->GetMetaGroup() )	{	case kMetaGroupOnline:		color = PrefsManager::GetPrefsRec().mGroupOnline.resourceTextColor;		break;	case kMetaGroupMyResources:		color = PrefsManager::GetPrefsRec().mGroupMyResources.resourceTextColor;		break;	case kMetaGroupOffline:		color = PrefsManager::GetPrefsRec().mGroupOffline.resourceTextColor;		break;	case kMetaGroupPending:		color = PrefsManager::GetPrefsRec().mGroupPending.resourceTextColor;		break;	case kMetaGroupStalkers:		color = PrefsManager::GetPrefsRec().mGroupStalkers.resourceTextColor;		break;	case kMetaGroupAgents:		color = PrefsManager::GetPrefsRec().mGroupAgents.resourceTextColor;		break;	default:		return false;		break;	}	return true;#endif}