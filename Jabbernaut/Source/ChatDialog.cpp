///--------------------------------------------------------------------------------------//	File:		ChatDialog.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Tuesday, 2000-05-09//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ChatDialog.h"//#if MACZOOP_VERSION => 0x0250	#include	"ZControlView.h"	#include	"ZEditFieldView.h"	#include	"ChatView.h"//#endif#include	"ChatManager.h"#include	"JabberUtils.h"#include	"PrefsManager.h"#include	"Profile.h"#include	"RosterManager.h"#include	"SendManager.h"#include	"Messages.h"#include	"MemoryOps.h"#include	"UniqueID.h"#include	<typeinfo>///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kChatDialogID	= 1003};enum{	// Attention: our code requires that these first four items are identical to those	// in the group chat dialog!!	kChatEditLineID	= 1,	kChatHistoryID	= 2,	kChatSubjectID	= 4};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------ChatDialog::ChatDialog( ZCommander* aBoss, const short windowID, const MacJLib::JID &inJID, const std::string &inThreadID )	: inherited( aBoss, windowID ){	mChatView = NULL;	mTargetJID = inJID;	mThreadID = inThreadID;}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------ChatDialog::ChatDialog( const MacJLib::JID &inJID, const std::string &inThreadID )	: inherited( gApplication, kChatDialogID ){	mChatView = NULL;	mTargetJID = inJID;	mThreadID = inThreadID;}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------ChatDialog::~ChatDialog(){	ChatManager::RemovedChatDialog(this);}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		put your description here//		//	Changes://		2000-05-09	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::InitZWindow(){	inherited::InitZWindow();		FailNIL( mChatView = dynamic_cast<ChatView *>( GetItem( kChatHistoryID ) ) );	mChatView->SetEditLineItem( dynamic_cast<ZControlView *>( GetItem( kChatEditLineID ) ) );	SetValue( kChatEditLineID, "\p" );	SetValue( kChatSubjectID, "\p" );		SetTitleToTargetJID();}///--------------------------------------------------------------------------------------//	Type://		Detect if the Enter key is pressed - in this case, send the message in//		the edit line.//		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::Type( const char theKey, const short modifiers ){	if( (theKey == ENTER_KEY) || (theKey == RETURN_KEY) )	{		ZView*	focusItem;		Focus();		ClipRect( WINDOWPORTRECT( GetMacWindow() ));				focusItem = dynamic_cast<ZView *>( GetHandler() );		 		if( focusItem && (focusItem->GetUserID() == kChatSubjectID) )		{			std::string	subject;					GetValueAsString( kChatSubjectID, subject );			ChangeSubject( subject );						SelectItem( kChatEditLineID );		}		else		{			std::string	body;					// "Get The Message" :-) & clean up the message line...			GetValueAsString( kChatEditLineID, body );			SetValueAsString( kChatEditLineID, "" );						// ...and send it, but only if none-empty			if( !body.empty() )				SendLine( body );						SelectItem( kChatEditLineID );		}	}	else		inherited::Type( theKey, modifiers );}void	ChatDialog::GetValueAsString( const short item, std::string &text ){	ZEditFieldView*	editFieldView;	editFieldView = dynamic_cast<ZEditFieldView*>(GetItem( item ));	if( editFieldView )	{		Handle		textHandle;		size_t		textLength;				FailNIL( textHandle = editFieldView->GetNewTextHandle() );		textLength = GetHandleSize( textHandle );		SetHandleSize( textHandle, textLength + 1 );		FailMemError();		HLock( textHandle );		(*textHandle)[textLength] = '\0';		text = *textHandle;		DisposeHandle( textHandle );	}	else	{		Str255		pStr;		char		cStr[256];		GetValueAsText( item, pStr );		CopyPToCString(pStr, cStr);				text = cStr;	}}void	ChatDialog::SetValueAsString( const short item, const std::string &text ){	Str255		pStr;		CopyCToPString( text.c_str(), pStr );	inherited::SetValue( item, pStr );}#pragma mark -///--------------------------------------------------------------------------------------//	OnMessage://		OnMessage is called by the static method DispatchMessageMsg//		//	Changes://		2000-05-09	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::OnMessage( MacJLib::MessageMsg &aMsg ){	JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventChatMsg );	// FIX ME - hack	MacJLib::JID	chatJID;	chatJID = aMsg.getFrom();	chatJID.setResource(RosterManager::GetRosterNick(chatJID));	mChatView->AppendChatData( chatJID,								aMsg.getBody(),								PrefsManager::GetPrefsRec().mColorDefault,								PrefsManager::GetPrefsRec().mTimestampsInChat,								aMsg.getTimeStamp() );	if( !aMsg.getSubject().empty() )		SetSubject( aMsg.getSubject() );	// Update our thread id with the thread id of the incoming message. Why?	// Well, if mChatIgnoreThread is set, we want our message to have the same thread id as	// the last message of our partner. And if it is not set, then only messages matching our	// current thread id arrive here anyway, so it doesn't cause any harm.	mThreadID = aMsg.getThread();}#pragma mark -///--------------------------------------------------------------------------------------//	SetTitleToTargetJID://		Set the title to match out target JID//		//	Changes://		2000-06-20	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::SetTitleToTargetJID(){	if( !mTargetJID.empty() )	{		Str255			pStr;				CopyCToPString( RosterManager::CompleteJID( mTargetJID ).c_str(), pStr );		SetTitle( pStr );	}}///--------------------------------------------------------------------------------------//	SetSubject://		Displays a new subject//		//	Changes://		2000-07-29	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::SetSubject( const std::string &subject ){	SetValueAsString( kChatSubjectID, subject );}///--------------------------------------------------------------------------------------//	ChangeSubject://		Send out a new subject//		//	Changes://		2000-07-29	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::ChangeSubject( const std::string &subject ){	MacJLib::MessageMsgHeader	theMsgHeader;	theMsgHeader.to = mTargetJID;	theMsgHeader.body = "/me changed the subject to: " + subject;	theMsgHeader.subject = subject;	// Generate an unique ID	theMsgHeader.id = GenerateUniqueID();		// set to type "chat"	theMsgHeader.type = "chat";	// make sure thread is set correctly	theMsgHeader.thread = mThreadID;		// fire it up!	SendManager::SendMessage( theMsgHeader );			MacJLib::JID	ourJID(Profile::GetOurJID());	if( !PrefsManager::GetPrefsRec().mDefaultNick.empty() )		ourJID.setResource( PrefsManager::GetPrefsRec().mDefaultNick );	mChatView->AppendChatData( ourJID,								theMsgHeader.body,								PrefsManager::GetPrefsRec().mColorOwn,								PrefsManager::GetPrefsRec().mTimestampsInChat );}#pragma mark -///--------------------------------------------------------------------------------------//	SendLine://		Send out a line.//		//	Changes://		2000-06-20	MH		Created///--------------------------------------------------------------------------------------void	ChatDialog::SendLine( const std::string &text ){	MacJLib::MessageMsgHeader	theMsgHeader;	theMsgHeader.to = mTargetJID;	// Get The Message :-)	theMsgHeader.body = text;	// Generate an unique ID	theMsgHeader.id = GenerateUniqueID();		// set to type "chat"	theMsgHeader.type = "chat";	// make sure thread is set correctly	theMsgHeader.thread = mThreadID;		// fire it up!	SendManager::SendMessage( theMsgHeader );		MacJLib::JID	ourJID(Profile::GetOurJID());	if( !PrefsManager::GetPrefsRec().mDefaultNick.empty() )		ourJID.setResource( PrefsManager::GetPrefsRec().mDefaultNick );	mChatView->AppendChatData( ourJID,								text,								PrefsManager::GetPrefsRec().mColorOwn,								PrefsManager::GetPrefsRec().mTimestampsInChat );}