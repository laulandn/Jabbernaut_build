///--------------------------------------------------------------------------------------//	File:		JabberApplication.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Friday, 2000-04-07//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDebugTextWindow.h"#include	"ZTextDialogItem.h"#include	"ZPrefsFile.h"#if MACZOOP_VERSION >= 0x0250  #include	"ZViewDialog.h"#endif#include	"AboutDialog.h"#ifndef TOQ  #include	"AgentsManager.h"  #include	"AutoAwayModifier.h"  #include	"ChatManager.h"#endif  #include	"ChatView.h"#include	"ConnectionManager.h"#ifndef TOQ  #include	"GroupChatManager.h"  #include	"HistoryManager.h"#endif#include	"JabberApplication.h"#include	"JabberDialog.h"#include	"JabberUtils.h"#ifndef TOQ  #include	"PrefsDialog.h"#endif#include	"PrefsManager.h"#include	"PresenceManager.h"#ifdef TOQ  #include	"Profile.h"#else  #include	"ProfileManager.h"#endif#include	"RosterDialog.h"#ifndef TOQ  #include	"RegisterManager.h"#endif#include	"RosterManager.h"#include	"SendManager.h"#include	"SoundManager.h"#include	"Messages.h"#include	"ProductInformation.h"///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kRawXMLDialogID		= 1300};enum{	kRawXMLSendBtnID	= 1,	kRawXMLDataID		= 2};///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===#if _DEBUG_ZDebugTextWindow	*gDataInDebugWindow = NULL;ZDebugTextWindow	*gDataOutDebugWindow = NULL;#endif///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===JabberDialog*	JabberApplication::msRawXMLDialog = NULL;#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JabberApplication::JabberApplication()	: inherited(){}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------JabberApplication::~JabberApplication(){}///--------------------------------------------------------------------------------------//	StartUp://		//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::StartUp(){	DebugStr("\pJabberApplication::StartUp()");#ifdef TOQ	gMenuBar->NominateWindowsMenu( 136 );#endif	JabberUtils::Init();	ConnectionManager::Init();		SoundManager::Init();#ifndef TOQ	AgentsManager::Init();	ChatManager::Init();	GroupChatManager::Init();	HistoryManager::Init();	RegisterManager::Init();#endif	RosterManager::Init();	//	// We use a ZModifier to implement Auto Away. The modifier checks for user activity	//#ifndef TOQ	AddModifier( new AutoAwayModifier() );#endif}///--------------------------------------------------------------------------------------//	ShutDown://		//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::ShutDown(){#if _DEBUG_	// This is a trick to prevent certain debug functions to access the debug windows	// while (and after) they are being closed	gDataInDebugWindow = NULL;	gDataOutDebugWindow = NULL;#endif		// FIX ME	// HACK:	// save all JabberDialog's positions *before* the prefs file is closed	{		JabberDialog	*jd;		long			m, i;			m = gWindowManager->CountWindows();		for( i = 1; i <= m; i++ )		{			jd = dynamic_cast<JabberDialog *>(gWindowManager->GetNthWindow( i ));			if( jd )				jd->SavePosition();		}	}		ConnectionManager::Deinit();	#ifndef TOQ	AgentsManager::Deinit();	ChatManager::Deinit();	GroupChatManager::Deinit();	HistoryManager::Deinit();	RegisterManager::Deinit();#endif	RosterManager::Deinit();		SoundManager::Deinit();#ifndef TOQ	ProfileManager::Deinit();#endif	PrefsManager::Deinit();// old position -> causes problems with RosterManager!//	ConnectionManager::Deinit();		JabberUtils::Deinit();}void	JabberApplication::ReadPrefs(){#ifdef TOQ	FailNIL( gPrefsFile = new ZPrefsFile("\pTOQ Preferences") );#else	FailNIL( gPrefsFile = new ZPrefsFile("\pJabbernaut Preferences") );#endif	PrefsManager::Init();#ifndef TOQ	ProfileManager::Init();	// FIX ME	// EVIL HACK!!!	// this is needed because the prefs dialog is created *before* the profile/prefs file is loaded!	// Aargh! this is stupid! The prefsFile is now handled by the ProfileManager, but really should be	// handled by the PrefsManager!!! I will change this soon, when I find the time.//	if( PrefsManager::msPrefsDialog )//		PrefsManager::msPrefsDialog->Place();#endif}void	JabberApplication::RunFirstTask(){#if _DEBUG_	FailNIL( gDataInDebugWindow = new ZDebugTextWindow( this, 7778 ) );	FailNIL( gDataOutDebugWindow = new ZDebugTextWindow( this, 7779 ) );	gDataInDebugWindow->InitZWindow();	gDataOutDebugWindow->InitZWindow();	gDataInDebugWindow->RestorePosition();	gDataOutDebugWindow->RestorePosition();	if( PrefsManager::GetPrefsRec().mShowDebugWindows )	{		gDataInDebugWindow->Show();		gDataOutDebugWindow->Show();	}#endif	#ifndef TOQ	if( PrefsManager::GetPrefsRec().mAgentsVisible )		AgentsManager::SelectAgentsDialog();		if( PrefsManager::GetPrefsRec().mHistoryVisible )		HistoryManager::SelectHistoryDialog();		if( PrefsManager::GetPrefsRec().mRosterVisible )#endif		RosterManager::DoSelectRosterDialog();		// Auto-login ?	if( PrefsManager::GetPrefsRec().mAutoLogin )#ifdef TOQ		HandleCommand( kCmdStatusAvailable );#else		ConnectionManager::DoOpenConnection();#endif}/*---------------------------------***  ABOUTBOX  ***-----------------------------------*//*	display the application's about box----------------------------------------------------------------------------------------*/void	JabberApplication::AboutBox(){	Str255 versStr;		GetVersionNumberString( 1, versStr );	ParamText( NULL, NULL, NULL, versStr );		AboutDialog*	aboutDialog;		FailNIL( aboutDialog = new AboutDialog() );	try	{		aboutDialog->InitZWindow();		aboutDialog->Place();		aboutDialog->Select();	}	catch( ZoopError err )	{		ForgetObject( aboutDialog );				throw err;	}	}///--------------------------------------------------------------------------------------//	Idle://		put your description here//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::Idle(){	ConnectionManager::Idle();	SoundManager::Idle();}///--------------------------------------------------------------------------------------//	DoSuspend://		//		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::DoSuspend(){	JabberUtils::OnSuspend();	inherited::DoSuspend();}///--------------------------------------------------------------------------------------//	DoResume://		//		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::DoResume(){	JabberUtils::OnResume();	inherited::DoResume();}void	JabberApplication::DoPreferences(){#ifndef TOQ	PrefsManager::DoPrefsDialog();#endif}void	JabberApplication::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){#ifndef TOQ	if( aSender == msRawXMLDialog )	{		if( aMsg == kMsgDialogItemClicked )		{			short	myItem = *(long*)msgData & 0xffff;			if( myItem == kRawXMLSendBtnID )			{				std::string		rawData;								// Fetch the raw XML data from the ZTextDialogItem				msRawXMLDialog->GetValueAsString( kRawXMLDataID, rawData );				// Send it!				ConnectionManager::PostMessage(  new MacJLib::RawMsg( rawData.c_str() ) );								// Now reset the ZTextDialogItem				msRawXMLDialog->SetValueAsString( kRawXMLDataID, "" );			}		}		else if( aMsg == kMsgDialogSuccessfullyClosed ) 			msRawXMLDialog = NULL;	}	#endif}#pragma mark -void	JabberApplication::HandleCommand( const ZoopCommand aCmd ){#ifdef TOQ	switch ( aCmd )	{		//		// Presence		//		case kCmdStatusAvailable:			if( !ConnectionManager::IsLoggedIn() )				ConnectionManager::DoOpenConnection();			if( ConnectionManager::IsLoggedIn() )			{				PresenceManager::BroadcastPresence( kOnlinePresenceStatus, "Online" );				RosterManager::SetRosterStatusPopup( 1 );			}			else				RosterManager::SetRosterStatusPopup( 3 );			break;		case kCmdStatusAway:			if( !ConnectionManager::IsLoggedIn() )				ConnectionManager::DoOpenConnection();			if( ConnectionManager::IsLoggedIn() )			{				PresenceManager::BroadcastPresence( kAwayPresenceStatus, "I'm away" );				RosterManager::SetRosterStatusPopup( 2 );			}			else				RosterManager::SetRosterStatusPopup( 3 );			break;		case kCmdStatusDisconnected:			if( ConnectionManager::IsLoggedIn() )				ConnectionManager::DoCloseConnection();			RosterManager::SetRosterStatusPopup( 3 );			break;				case kCycleThrougWindows:			{				ZWindow*	topw;				ZWindow*	zw;				short		n = gWindowManager->CountWindows();				short		i;								for( i = 2; i <= n; ++i )				{					FailNIL( zw = gWindowManager->GetNthWindow(i) );					if( zw->IsVisible() )					{						topw = gWindowManager->GetTopWindow();						zw->Select();						gWindowManager->MoveWindowBehind( topw, NULL );						break;					}				}				break;			}				break;					default:			inherited::HandleCommand( aCmd );			break;	}#else	if( ProfileManager::HandleCommand( aCmd ) )		return;		switch ( aCmd )	{		case kCmdSendNewMessage:			SendManager::DoNewMessage();			break;		case kCmdInviteChat:			ChatManager::DoInviteToChat();			break;		case kCmdJoinGroupChat:			GroupChatManager::DoJoinGroupChat();			break;		case kCmdSelectAgentsWindow:			AgentsManager::SelectAgentsDialog();			break;		case kCmdSelectHistoryWindow:			HistoryManager::SelectHistoryDialog();			break;		case kCmdSelectRawXMLWindow:			SelectRawXMLDialog();			break;		//		// Online/Offline		//		case kCmdLoginLogout:			{				if( ConnectionManager::IsLoggedIn() )					ConnectionManager::DoCloseConnection();				else					ConnectionManager::DoOpenConnection();			}			break;		//		// Roster		//		case kCmdSelectRosterWindow:			RosterManager::DoSelectRosterDialog();			break;		case kCmdRosterAddUser:			RosterManager::DoAddRosterItem();			break;		//		// Presence		//		case kCmdStatusAvailable:			PresenceManager::BroadcastPresence( kOnlinePresenceStatus, "Online" );			break;		case kCmdStatusChat:			PresenceManager::BroadcastPresence( kChatPresenceStatus, "Chat with me" );			break;		case kCmdStatusAway:			PresenceManager::BroadcastPresence( kAwayPresenceStatus, "I'm away" );			break;		case kCmdStatusDND:			PresenceManager::BroadcastPresence( kDNDPresenceStatus, "Do not disturb" );			break;		case kCmdStatusXA:			PresenceManager::BroadcastPresence( kNAPresenceStatus, "I'm not available" );			break;					case kCycleThrougWindows:			{				ZWindow*	topw;				ZWindow*	zw;				short		n = gWindowManager->CountWindows();				short		i;								for( i = 2; i <= n; ++i )				{					FailNIL( zw = gWindowManager->GetNthWindow(i) );					if( zw->IsVisible() )					{						topw = gWindowManager->GetTopWindow();						zw->Select();						gWindowManager->MoveWindowBehind( topw, NULL );						break;					}				}				break;			}			default:			inherited::HandleCommand( aCmd );			break;	}#endif}void	JabberApplication::UpdateMenus(){	inherited::UpdateMenus();		//	// Misc	//	gMenuBar->EnableCommand( kCycleThrougWindows );#ifdef TOQ	//	// Presence	//	gMenuBar->EnableCommand( kCmdStatusAvailable );	gMenuBar->EnableCommand( kCmdStatusAway );	gMenuBar->EnableCommand( kCmdStatusDisconnected );	gMenuBar->CheckCommand( kCmdStatusAvailable,								ConnectionManager::IsLoggedIn() &&								(PresenceManager::GetPresenceStatus() == kOnlinePresenceStatus) );	gMenuBar->CheckCommand( kCmdStatusAway,								ConnectionManager::IsLoggedIn() &&								(PresenceManager::GetPresenceStatus() == kAwayPresenceStatus) );	gMenuBar->CheckCommand( kCmdStatusDisconnected,								!ConnectionManager::IsLoggedIn() );	#else	ProfileManager::UpdateMenus();		// roster is always selectable	gMenuBar->EnableCommand( kCmdSelectRosterWindow );	// agent list is always selectable	gMenuBar->EnableCommand( kCmdSelectAgentsWindow );	// Login/Logout only possible if the connection state is not transitional	if( (ConnectionManager::IsConnected() && ConnectionManager::IsLoggedIn() )		|| ConnectionManager::IsDisconnected() )	{		//if( !mLoginoutIssued )			gMenuBar->EnableCommand( kCmdLoginLogout );	}		if( ConnectionManager::IsLoggedIn() )	{		gMenuBar->EnableCommand( kCmdRosterAddUser );		//		// Send Message		//		gMenuBar->EnableCommand( kCmdSendNewMessage );		gMenuBar->EnableCommand( kCmdInviteChat );		gMenuBar->EnableCommand( kCmdJoinGroupChat );			//		// Presence		//		gMenuBar->EnableCommand( kCmdStatusAvailable );		gMenuBar->EnableCommand( kCmdStatusChat );		gMenuBar->EnableCommand( kCmdStatusAway );		gMenuBar->EnableCommand( kCmdStatusDND );		gMenuBar->EnableCommand( kCmdStatusXA );		gMenuBar->CheckCommand( kCmdStatusAvailable,									PresenceManager::GetPresenceStatus() == kOnlinePresenceStatus );		gMenuBar->CheckCommand( kCmdStatusChat,									PresenceManager::GetPresenceStatus() == kChatPresenceStatus );		gMenuBar->CheckCommand( kCmdStatusAway,									PresenceManager::GetPresenceStatus() == kAwayPresenceStatus );		gMenuBar->CheckCommand( kCmdStatusDND,									PresenceManager::GetPresenceStatus() == kDNDPresenceStatus );		gMenuBar->CheckCommand( kCmdStatusXA,									PresenceManager::GetPresenceStatus() == kNAPresenceStatus );				//		// Window Menu		//		gMenuBar->EnableCommand( kCmdSelectHistoryWindow );		gMenuBar->EnableCommand( kCmdSelectRawXMLWindow );	}#endif}///--------------------------------------------------------------------------------------//	SelectRawXMLDialog://		//		//	Changes://		2000-05-16	MH		Created///--------------------------------------------------------------------------------------void	JabberApplication::SelectRawXMLDialog(){#ifndef TOQ	if( msRawXMLDialog == NULL )	{		FailNIL( msRawXMLDialog = new JabberDialog( gApplication, kRawXMLDialogID ));		try		{			msRawXMLDialog->InitZWindow();			msRawXMLDialog->Place();		}		catch( ZoopError err )		{			ForgetObject( msRawXMLDialog );			throw err;		}	}		msRawXMLDialog->Select();#endif}///--------------------------------------------------------------------------------------//	OpenFile://		//		//	Changes://		2000-??-??	MH		Created///--------------------------------------------------------------------------------------ZWindow*	JabberApplication::OpenFile( const FSSpec& aFile, const OSType fType, Boolean isStationery ){#ifndef TOQ	if( fType == 'TEXT' )	{		ProfileManager::OpenFile( aFile, fType, isStationery );	}#endif	return NULL;}#pragma mark -///--------------------------------------------------------------------------------------//	CheckCanRun://		//		//	Changes://		2000-09-26	MH		Created///--------------------------------------------------------------------------------------Boolean		JabberApplication::CheckCanRun(){	if( !inherited::CheckCanRun() )		return FALSE;	if( !gMacInfo.hasDragManager )		return FALSE;	if( !gMacHasThreadManager )		return FALSE;		return TRUE;}void	JabberApplication::RegisterClasses(){#ifndef TOQ	ZViewDialog::RegisterDialogItem( CreateNewEnhancedTextBox, kMagicStringEnhancedText, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateNewChatView, kMagicStringChat, kInitItemWithFirstParam );#endif}