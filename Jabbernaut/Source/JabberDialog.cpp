///--------------------------------------------------------------------------------------//	File:		JabberDialog.cpp//	Project:	Jabbernaut////	Purpose:	This base class provides some commonly used helpful methods//	Created:	Tuesday, 2000-06-29//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	© 2000-2001 Max Horn, All rights reserved worldwide.////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZGrafState.h"#include	"ZListDialogItem.h"#include	"ZTextDialogItem.h"#include	"ColorDialogItem.h"#include	"JabberDialog.h"#include	"JabberDItemMaker.h"#include	"PrefsManager.h"#ifdef TOQ#include	"ZIconButtonDialogItem.h"#endif// The following are only included to make CleverSelect() work!#ifndef TOQ  #include	"ChatDialog.h"  #include	"ChatInviteDialog.h"  #include	"GroupChatDialog.h"  #include	"GroupChatJoinDialog.h"#endif#include	"SendMsgDialog.h"#include	<stdlib.h>#include	<typeinfo>///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JabberDialog::JabberDialog( ZCommander* aBoss, const short windowID  )	: inherited( aBoss, windowID ){}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------JabberDialog::~JabberDialog(){}#pragma mark -///--------------------------------------------------------------------------------------//	CleverSelect://		Check if the top window is a Send Message window if this is the case, put//		ourself behind it. Otherwise, call Select().//		//	Changes://		2000-05-16	MH		Created//		2000-05-17	MH		Fixed to check if _we_ are the top dialog!//		2000-05-18	MH		Added support for GroupChatDialog//		2000-06-29	MH		Moved to baseclass JabberDialog///--------------------------------------------------------------------------------------void	JabberDialog::CleverSelect(){	ZWindow		*topWindow = gWindowManager->GetTopWindow();	Boolean		wasVis = IsVisible();		if( wasVis )		return;		if(	(topWindow != this) &&#ifdef TOQ		(typeid(*topWindow) == typeid(SendMsgDialog)))#else		((typeid(*topWindow) == typeid(SendMsgDialog)) ||		 (typeid(*topWindow) == typeid(ChatDialog)) ||		 (typeid(*topWindow) == typeid(ChatInviteDialog)) ||		 (typeid(*topWindow) == typeid(GroupChatJoinDialog)) ||		 (typeid(*topWindow) == typeid(GroupChatDialog))		))#endif	{				SendBehind( topWindow );		Show();				if( !wasVis )			PerformUpdate();	}	else		Select();}#pragma mark -///--------------------------------------------------------------------------------------//	SetValueAsString://		Works like the SetValue functions//		//	Changes://		2000-06-29	MH		Created//		2000-07-13	MH		Renamed, and merged SetTextItem() functionality///--------------------------------------------------------------------------------------void	JabberDialog::SetValueAsString( const short item, const std::string &text ){	ZTextDialogItem*	textDialogItem;	textDialogItem = dynamic_cast<ZTextDialogItem*>(GetItemObject( item ));	if( textDialogItem )	{		Handle				textHandle;		size_t				textLength;				textLength = text.size();		FailNIL( textHandle = NewHandle( textLength ) );		HLock( textHandle );		BlockMoveData( text.data(), *textHandle, textLength);		textDialogItem->SetText( textHandle );		DisposeHandle( textHandle );	}	else	{		Str255		pStr;				CopyCToPString( text.c_str(), pStr );		ZDialog::SetValue( item, pStr );	}}///--------------------------------------------------------------------------------------//	GetValueAsString://		Works like the GetValue functions//		//	Changes://		2000-06-29	MH		Created//		2000-07-13	MH		Renamed, and merged GetTextItem() functionality///--------------------------------------------------------------------------------------void	JabberDialog::GetValueAsString( const short item, std::string &text ){	ZTextDialogItem*	textDialogItem;	textDialogItem = dynamic_cast<ZTextDialogItem*>(GetItemObject( item ));	if( textDialogItem )	{		Handle		textHandle;		size_t		textLength;				FailNIL( textHandle = NewHandle( 0 ) );		textDialogItem->GetText( textHandle );		textLength = GetHandleSize( textHandle );		SetHandleSize( textHandle, textLength + 1 );		FailMemError();		HLock( textHandle );		(*textHandle)[textLength] = '\0';		text = *textHandle;		DisposeHandle( textHandle );	}	else	{		Str255		pStr;		char		cStr[256];		GetValueAsText( item, pStr );		CopyPToCString(pStr, cStr);				text = cStr;	}}#pragma mark -///--------------------------------------------------------------------------------------//	GetValue://		Works like the other GetValue functions//		//	Changes://		2000-06-29	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::GetValue( const short item, bool &value ){	value = ZDialog::GetValue( item );}///--------------------------------------------------------------------------------------//	GetValue://		Works like the other GetValue functions//		//	Changes://		2000-06-29	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::GetValue( const short item, long &value ){	value = ZDialog::GetValue( item );}///--------------------------------------------------------------------------------------//	GetValue://		Works like the other GetValue functions//		//	Changes://		2000-07-26	MH		Created///--------------------------------------------------------------------------------------long	JabberDialog::GetValue( const short item ){	return ZDialog::GetValue( item );}#pragma mark -///--------------------------------------------------------------------------------------//	SetRGBValue://		Set the color of the ColorDialogItem 'item'//		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::SetRGBValue( const short item, const RGBColor& inColor ){	ColorDialogItem*	colorDialogItem;		FailNIL( colorDialogItem = dynamic_cast<ColorDialogItem*>(GetItemObject( item )) );		colorDialogItem->SetColor( inColor );}///--------------------------------------------------------------------------------------//	GetRGBValue://		Set the color of the ColorDialogItem 'item'//		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::GetRGBValue( const short item, RGBColor& inColor ){	ColorDialogItem*	colorDialogItem;		FailNIL( colorDialogItem = dynamic_cast<ColorDialogItem*>(GetItemObject( item )) );		inColor = colorDialogItem->GetColor();}#pragma mark -///--------------------------------------------------------------------------------------//	ListSet://		Set the contents of a ZListDialogItem to 'inList'.//		Note: only use this with single-colum lists.//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListSet( const short item, const StringList &inList ){	ZGrafState			gs;	ZListDialogItem*	listDialogItem;		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		listDialogItem->MLSetEmptyList();	listDialogItem->MLAppendCol();	for( StringList::const_iterator X = inList.begin(); X != inList.end(); ++X )	{		listDialogItem->MLAppendRowData( (char *)X->data(), X->size() );	}}///--------------------------------------------------------------------------------------//	ListGet://		Get the contents of a ZListDialogItem and store them in 'outList'//		Note: only use this with single-colum lists.//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListGet( const short item, StringList &outList ){	ZListDialogItem*	listDialogItem;	Cell				myCell = { 0, 0 };	Str255				pStr;	char				cStr[256];		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		outList.clear();	for( myCell.v = 0; myCell.v < listDialogItem->MLCountRows(); myCell.v++ )	{		listDialogItem->MLGetCell( myCell, pStr );		CopyPToCString( pStr, cStr );		outList.push_back( std::string(cStr) );	}}///--------------------------------------------------------------------------------------//	ListGetSelected://		Set the selected contents of a ZListDialogItem and store them in 'outList'//		Note: only use this with single-colum lists.//		//	Changes://		2000-10-18	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListGetSelected( const short item, StringList &outList ){	ZListDialogItem*	listDialogItem;	Cell				myCell = { 0, 0 };	Str255				pStr;	char				cStr[256];		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		outList.clear();	for( myCell.v = 0; myCell.v < listDialogItem->MLCountRows(); myCell.v++ )	{		if( LGetSelect( false, &myCell, listDialogItem->MLGetMacList()) )		{			listDialogItem->MLGetCell( myCell, pStr );			CopyPToCString( pStr, cStr );			outList.push_back( std::string(cStr) );		}	}}///--------------------------------------------------------------------------------------//	ListGetSelected://		Set the selected contents of a ZListDialogItem and store them in 'outList'//		Note: only use this with single-colum lists.//		//	Changes://		2000-11-01	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListGetSelected( const short item, std::string &outStr ){	ZListDialogItem*	listDialogItem;	Cell				myCell = { 0, 0 };	Str255				pStr;	char				cStr[256];		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		outStr.clear();		if( LGetSelect( true, &myCell, listDialogItem->MLGetMacList() ) )	{		listDialogItem->MLGetCell( myCell, pStr );		CopyPToCString( pStr, cStr );		outStr = cStr;		return;	}}///--------------------------------------------------------------------------------------//	ListAppendValue://		Add a value to a list item (optionaly sorted, assuming the list was sorted before).//		//	Changes://		2000-10-18	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListAppendValue( const short item, std::string value, bool sort, bool unique ){	ZGrafState			gs;	ZListDialogItem*	listDialogItem;	Str255				pStr;	Cell				myCell = { 0, 0 };			FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );	for( myCell.v = 0; myCell.v < listDialogItem->MLCountRows(); myCell.v++ )		LSetSelect( FALSE, myCell, listDialogItem->MLGetMacList() );	CopyCToPString( value.c_str(), pStr );	if( sort )		myCell.v = listDialogItem->MLAppendRowInAlphaOrder( pStr, unique );	else		myCell.v = listDialogItem->MLAppendRowData(pStr);	LSetSelect( TRUE, myCell, listDialogItem->MLGetMacList() );}///--------------------------------------------------------------------------------------//	ListRemoveSelected://		Remove all selected items from a list//		//	Changes://		2000-10-18	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListRemoveSelected( const short item ){	ZGrafState			gs;	ZListDialogItem*	listDialogItem;	Cell				oldSelection = { 0, 0 };	Cell				myCell = { 0, 0 };	short				numRows;		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		if( listDialogItem->MLCountRows() > 0 )	{		listDialogItem->MLGetSelection( &oldSelection );		if( oldSelection.v >= 0 )		{			for( myCell.v = listDialogItem->MLCountRows()-1; 0 <= myCell.v; --myCell.v )			{				if( LGetSelect( false, &myCell, listDialogItem->MLGetMacList()) )					listDialogItem->MLDeleteRow( myCell.v );			}					numRows = listDialogItem->MLCountRows() - 1;			if( oldSelection.v > numRows )				oldSelection.v = numRows;			listDialogItem->MLSetSelection( oldSelection );		}	}}///--------------------------------------------------------------------------------------//	ListClear://		Empties the list//		//	Changes://		2000-10-18	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::ListClear( const short item ){	ZGrafState			gs;	ZListDialogItem*	listDialogItem;		FailNIL( listDialogItem = dynamic_cast<ZListDialogItem*>(GetItemObject( item )) );		listDialogItem->MLSetEmptyList();	listDialogItem->MLAppendCol();}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		Attach a JabberDItemMaker() object //		//	Changes://		2000-07-03	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::InitZWindow(){	AttachItemMaker( new JabberDItemMaker() );	inherited::InitZWindow();		SetSnap( snapALL );}#ifdef TOQ///--------------------------------------------------------------------------------------//	Type://		//		//	Changes://		2000-09-12	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::Type( const char theKey, const short modifiers ){	Boolean					notAutoKey;		notAutoKey = ( modifiers & kFromAutoKeyEvent ) == 0;		Focus();	ClipRect( WINDOWPORTRECT( GetMacWindow() ));	switch ( theKey )				// tab	{		case RETURN_KEY:			// return		case ENTER_KEY:				// enter			if ( defaultItem > 0 && notAutoKey )			{				ASSERT( "Bad default ID in Type()", defaultItem <= itsItems->CountItems(), defaultItem )								FakeClick( defaultItem );			}				break;					case '.':			if (( modifiers & cmdKey ) == 0 )				break;							// fall through to cancel case for cmd-period			case ESCAPE_KEY:			// escape			if ( escapeItem > 0 && notAutoKey )			{				ASSERT( "Bad escape ID in Type()", escapeItem <= itsItems->CountItems(), escapeItem )								FakeClick( escapeItem );			}				break;					default:			inherited::Type( theKey, modifiers );			break;	}}///--------------------------------------------------------------------------------------//	FakeClick://		If item is a ZIconButtonDialogItem, then fake a click on it. Otherwise, just call//		the inherited method.//		//	Changes://		2000-09-12	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::FakeClick( const short item ){	ZIconButtonDialogItem*	ibDi;	GrafPtr					savePort;	Rect					iBox;		ibDi = dynamic_cast<ZIconButtonDialogItem*>(GetItemObject( item ));		if( ibDi && ibDi->IsEnabled() )	{		ibDi->GetBounds( &iBox );				GetPort( &savePort );		SETPORTTODIALOG( GetMacDialog());				ibDi->DoHilightSelection( TRUE );		MZDelay( 8 );		ibDi->DoHilightSelection( FALSE );				SetLocalZoomSource( &iBox );		SetPort( savePort );		ClickItem( item );	}	else		inherited::FakeClick( item );}#endif#pragma mark -///--------------------------------------------------------------------------------------//	SavePosition://		Saves the window position by handing it to the prefs manager.//		//	Changes://		2000-07-31	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::SavePosition( short id ){#if 1	inherited::SavePosition( id );#else	PrefsManager::SaveWindowPosition( this, windID );#endif}///--------------------------------------------------------------------------------------//	RestorePosition://		Restores the window position by querying the prefs manager.//		//	Changes://		2000-07-31	MH		Created///--------------------------------------------------------------------------------------void	JabberDialog::RestorePosition( short id ){#if 1	inherited::RestorePosition( id );#else	PrefsManager::RestoreWindowPosition( this, windID );#endif}