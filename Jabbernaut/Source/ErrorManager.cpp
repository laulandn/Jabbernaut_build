///--------------------------------------------------------------------------------------//	File:		ErrorManager.cpp//	Project:	Jabbernaut////	Purpose:	Handles errors by taking appropriate actions (e.g. show an error alert)//	Created:	Wednesday, 2000-08-16//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ErrorManager.h"///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kErrorAlertID	= 700,	kSuccessAlertID	= 701};#pragma mark -void		ErrorManager::ReportSuccess( short strListID, short strIndex ){	Str255 msgStr;		// In case we are called while offscreen focused:	SetGWorld((CGrafPtr) FrontWindow(), GetMainDevice());	gMenuBar->ShowHideMenuBar( MBAR_SHOW );	// Fetch the message string	GetIndString( msgStr, strListID, strIndex );		// Display the alert	ParamText( msgStr, NULL, NULL, NULL );	(void) NotifyAlert( kSuccessAlertID, ntAlertPlaySound );}void		ErrorManager::ReportFailure( short strListID, short strIndex, long errID ){	Str255			errMsgStr;	Str15			errIDStr;	// In case we are called while offscreen focused:	SetGWorld((CGrafPtr) FrontWindow(), GetMainDevice());	gMenuBar->ShowHideMenuBar( MBAR_SHOW );		// Conert error num to a string	NumToString( errID, errIDStr );				// Fetch the error string	GetIndString( errMsgStr, strListID, strIndex );	// Fill in error number and text, and display the alert	ParamText( errIDStr, errMsgStr, NULL, NULL );	(void) NotifyAlert( kErrorAlertID, ntAlertPlaySound );}