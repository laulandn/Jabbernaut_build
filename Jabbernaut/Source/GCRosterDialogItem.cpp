///--------------------------------------------------------------------------------------//	File:		GCRosterDialogItem.cpp//	Project:	Jabbernaut////	Purpose:	This dialog is used to display the "roster" of a groupchat//	Created:	Monday, 2000-07-24//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialog.h"#include	"ZGrafState.h"#include	"GCRosterDialogItem.h"#include	"PrefsManager.h"#include	"Messages.h"///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -#pragma mark [Class Init]CLASSCONSTRUCTOR( GCRosterDialogItem );///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------GCRosterDialogItem::GCRosterDialogItem( ZDialog* aDialog, const short item )	: inherited( aDialog, item ){	classID = CLASS_GCRosterDialogItem;}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------GCRosterDialogItem::GCRosterDialogItem()	: inherited(){	classID = CLASS_GCRosterDialogItem;}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------GCRosterDialogItem::~GCRosterDialogItem(){}#pragma mark -///--------------------------------------------------------------------------------------//	OnPresence://		OnPresence updates the nick list//		//	Changes://		2000-07-24	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::OnPresence( const PresenceMsg &aMsg ) {	if( aMsg.getType() == "unavailable" )		RemoveNick( GCRosterItem( aMsg ) );	else		AddNick( GCRosterItem( aMsg ) );		InvalItem();}///--------------------------------------------------------------------------------------//	OnMessage://		This is used to recognize "idle" users//		//	Changes://		2000-07-31	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::OnMessage( const MacJLib::MessageMsg &aMsg ){	if( aMsg.getFrom().hasResource() )	{		NickList::iterator X = mNickList.find( GCRosterItem(aMsg.getFrom().getResource()) );		if( X != mNickList.end() )		{			if( X->OnActivity() )				ForceRedraw( *X );		}	}}#pragma mark -///--------------------------------------------------------------------------------------//	AddNick://		Add a nick to the nick list.//		//	Changes://		2000-06-19	MH		Created//		2000-07-24	MH		Moved from GroupChatDialog to GCRosterDialogItem///--------------------------------------------------------------------------------------void	GCRosterDialogItem::AddNick( const GCRosterItem &item ){	Str255			pStr;	mNickList.erase( item );	mNickList.insert( item );	CopyCToPString( item.GetNick().c_str(), pStr );	MLAppendRowInAlphaOrder( pStr, true );}///--------------------------------------------------------------------------------------//	RemoveNick://		Remove a nick from the nick list.//		//	Changes://		2000-06-19	MH		Created//		2000-07-24	MH		Moved from GroupChatDialog to GCRosterDialogItem///--------------------------------------------------------------------------------------void	GCRosterDialogItem::RemoveNick( const GCRosterItem &item ){	Cell			myCell = { 0, 0 };	mNickList.erase( item );		myCell.v = FindItemRow( item );		if( -1 != myCell.v )		MLDeleteRow( myCell.v );}///--------------------------------------------------------------------------------------//	ContainsNick://		Check whether the specified nick is contained in the nick list.//		//	Changes://		2000-07-24	MH		Created///--------------------------------------------------------------------------------------bool	GCRosterDialogItem::ContainsNick( const std::string &nick ){	return mNickList.count( GCRosterItem(nick) ) != 0;}#pragma mark -///--------------------------------------------------------------------------------------//	ForceRedraw://		Force the redraw of item 'item'//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::ForceRedraw( const GCRosterItem &item ){	Str255			pStr;	char			cStr[256];	Cell			myCell = { 0, 0 };	for( myCell.v = 0; myCell.v < MLCountRows(); myCell.v++ )	{		MLGetCell( myCell, pStr );		CopyPToCString( pStr, cStr );		if( item.GetNick() == cStr )		{			ZGrafState	zg;			FocusBoss();			PrepareForDrawing();						LDraw( myCell, lh );			break;		}	}}///--------------------------------------------------------------------------------------//	FindItemRow://		Returns the row in which a certain nick is in, or -1//		//	Changes://		2000-07-30	MH		Created///--------------------------------------------------------------------------------------short	GCRosterDialogItem::FindItemRow( const GCRosterItem &item ){	Str255			pStr;	char			cStr[256];	Cell			myCell = { 0, 0 };	for( myCell.v = 0; myCell.v < MLCountRows(); myCell.v++ )	{		MLGetCell( myCell, pStr );		CopyPToCString( pStr, cStr );		if( item.GetNick() == cStr )			return myCell.v;	}	return -1;}///--------------------------------------------------------------------------------------//	GetItemInRow://		Return the item in row row, or NULL//		//	Changes://		2000-07-30	MH		Created///--------------------------------------------------------------------------------------const GCRosterItem*	GCRosterDialogItem::GetItemInRow( short row ){	Cell	theCell;	Str255	pStr;	char	cStr[256];		theCell.h = 0;	theCell.v = row;	MLGetCell( theCell, pStr );	CopyPToCString( pStr, cStr );		for( NickList::iterator X = mNickList.begin(); X != mNickList.end(); ++X)	{		if( X->GetNick() == cStr )			return &*X;		// FIX ME!! UGLY!	}	return NULL;}#pragma mark -///--------------------------------------------------------------------------------------//	MLDraw1Cell://		//		//	Changes://		2000-07-24	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::MLDraw1Cell( Rect* area, Cell theCell, Boolean hilited ){	const GCRosterItem* item;		item = GetItemInRow(theCell.v);	if( item )	{		EraseRect( area );		item->Draw( *area );	}}///--------------------------------------------------------------------------------------//	InitItem://		//		//	Changes://		2000-07-24	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::InitItem( const short paramCount, const long params[] ){	inherited::InitItem( paramCount, params );		MLInstallCallbacks( TRUE, FALSE );		// activate a timer for use, so we can handle "idle" GC participants by drawing	// them grayed out etc.	SetTimer( this );}///--------------------------------------------------------------------------------------//	DoTimer://		//		//	Changes://		2000-08-16	MH		Created///--------------------------------------------------------------------------------------void	GCRosterDialogItem::DoTimer( long timerID ){	for( NickList::iterator X = mNickList.begin(); X != mNickList.end(); ++X)		if( X->OnIdle() )			ForceRedraw( *X );}