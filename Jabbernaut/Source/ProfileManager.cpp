///--------------------------------------------------------------------------------------//	File:		ProfileManager.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Friday, 2000-05-19//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZFile.h"#include	"ZPrefsFile.h"#include	"ConnectionManager.h"#include	"PrefsManager.h"#include	"Profile.h"#include	"ProfileDialog.h"#include	"ProfileManager.h"///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===ProfileDialog		*ProfileManager::msProfileDialog = NULL;#pragma mark -///--------------------------------------------------------------------------------------//	Init://		Give this manager a chance to initate static members etc.//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::Init(){	ASSERT("msProfileDialog != NULL",msProfileDialog == NULL,0);	FailNIL( msProfileDialog = new ProfileDialog());	try	{		msProfileDialog->InitZWindow();		msProfileDialog->Place();		// create the Profile dialog, but keep it hidden until "Edit Profile"	}	catch( ZoopError err )	{		ForgetObject( msProfileDialog );				throw err;	}		// Add a pref that determines what to do on startup:	// a) no profile -> user has first to create/open one	// b) use last opened profile (which should be stored in the prefs somehow...)	// c) use a certain profile the user chose in the prefs dialog	//	// HACK: in the meantime, we try to open file "Default Profile"}///--------------------------------------------------------------------------------------//	Deinit://		Give this manager a chance to dispose static members etc.//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::Deinit(){}#pragma mark -///--------------------------------------------------------------------------------------//	OnRegister://		//		//	Changes://		2000-05-20	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::OnRegister(){#if PREFS_FIX  FIX ME#endif	if( msProfileDialog )		msProfileDialog->OnRegister();}///--------------------------------------------------------------------------------------//	OnRegisterFailed://		//		//	Changes://		2000-05-20	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::OnRegisterFailed( MacJLib::IQErrorMsg &inError ){#if PREFS_FIX  FIX ME#endif	if( msProfileDialog )		msProfileDialog->OnRegisterFailed( inError );}#pragma mark -///--------------------------------------------------------------------------------------//	UpdateMenus://		En/disable menu items//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::UpdateMenus(){	ASSERT("msProfileDialog == NULL",msProfileDialog != NULL,0);		if( !ConnectionManager::IsLoggedIn() )	{		gMenuBar->EnableCommand( kCmdProfileNew );		gMenuBar->EnableCommand( kCmdProfileOpen );	}		gMenuBar->EnableCommand( kCmdProfileSaveAs );}///--------------------------------------------------------------------------------------//	HandleCommand://		//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------bool	ProfileManager::HandleCommand( const ZoopCommand aCmd ){	ASSERT("msProfileDialog == NULL",msProfileDialog != NULL,0);	switch ( aCmd )	{		case kCmdProfileNew:			{				short	result;				// ask				gWindowManager->DeactivateForDialog( -1, TRUE );//				gWindowManager->DeactivateForDialog( 1101, TRUE );				result =  Alert( 1101, NULL );				gWindowManager->Activate();				if( result == 1 )					Profile::SetNeedsRegister( true );				else if( result == 3 )	// Cancel					return true;				// pop up the dialog				msProfileDialog->Select();			}			break;		case kCmdProfileOpen:			{				FSSpec	aFile;				OSType	anFType;				FInfo	fi;								if ( gApplication->PickFile( &aFile, &anFType ))			// choose a file				{					// is it a stationery (template) file?										FSpGetFInfo( &aFile, &fi );					msProfileDialog->SetFile( aFile );					msProfileDialog->OpenFile( anFType, ( fi.fdFlags & kIsStationery ) == kIsStationery );				}			}			break;		case kCmdProfileSaveAs:			msProfileDialog->Save( TRUE );			break;		default:			return false;			break;	}	return true;}#pragma mark -///--------------------------------------------------------------------------------------//	OpenFile://		//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileManager::OpenFile( const FSSpec& aFile, const OSType fType, Boolean isStationery ){#if 0	ASSERT("msProfileDialog == NULL",msProfileDialog != NULL,0);		msProfileDialog->SetFile( aFile );	msProfileDialog->OpenFile( fType, isStationery  );#else	if (aFile.vRefNum != kNoFile)	{		if (fType != 'TEXT')			FailOSErr(paramErr);		else		{			// If OpenFile was called, we can can assume the file already exists... I hope ;)						if( PrefsManager::msPrefsFile )				ForgetObject( PrefsManager::msPrefsFile );			FailNIL( PrefsManager::msPrefsFile = new ZFile( aFile ) );						PrefsManager::ReadPrefs();		}	}#endif}