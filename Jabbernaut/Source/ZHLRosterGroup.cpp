///--------------------------------------------------------------------------------------//	File:		ZHLRosterGroup.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Sunday, 2000-07-16//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZGrafState.h"#include	"PrefsManager.h"#include	"ZHLRosterGroup.h"#include	<typeinfo>///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===#define		SetRGBColor(c, r, g, b)		(c.red = r, c.green = g, c.blue = b)///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------ZHLRosterGroup::ZHLRosterGroup( ConstStr31Param p, MetaGroup inGroup, bool isMetaGroup )	:  ZHLFolder( p ){	mIsMetaGroup = isMetaGroup;		SetMetaGroup( inGroup );		if( !isMetaGroup )		CopyPString( title, mSortName );}#pragma mark -///--------------------------------------------------------------------------------------//	DrawCell://		Draw a ZHL folder, but with our own color scheme//		//	Changes://		2000-06-08	MH		Created///--------------------------------------------------------------------------------------void ZHLRosterGroup::DrawCell(Rect& r, ZHLDialogItem *boss){	short		height, relTop;	Str255		text;	Str255		num;	RGBColor	textColor;	RGBColor	backColor;	ZGrafState	zg;		// First, fill the back with the right color, but only if we are not selected	if( !(boss && boss->IsSelected(this)) && CustomBackgroundColour( backColor, boss ))	{		Rect		dummyRect;		RGBBackColor( &backColor );		dummyRect = r;		dummyRect.left = 1;		dummyRect.bottom++;		dummyRect.right--;		EraseRect( &dummyRect );	}	// Set up the color for the text	if( CustomForegroundColour( textColor, boss ) )		RGBForeColor( &textColor );//	else//		RGBForeColor( &gBlack );	NumToString( CalcNumberOfItems(), num );	CopyPString( title, text );	ConcatPStrings( text, "\p (" );	ConcatPStrings( text, num );	ConcatPStrings( text, "\p)" );		TextFace (bold);	height = r.bottom - r.top;			// height of cell	relTop = 1 + (height * 2) / 3;		// top offset for text	MoveTo (r.left, r.top + relTop);	DrawString (text);}///--------------------------------------------------------------------------------------//	SetMetaGroup://		Sets the 'meta group' of this folder. This determines how we look like.//		//	Changes://		2000-06-08	MH		Created///--------------------------------------------------------------------------------------void ZHLRosterGroup::SetMetaGroup( MetaGroup inGroup ){// FIX ME - make colors customisable	mMetaGroup = inGroup;	if( mIsMetaGroup )		NumToString( mMetaGroup, mSortName );}#pragma mark -///--------------------------------------------------------------------------------------//	CalcNumberOfItems://		Recursively determines the total number of ZHLRosterItems contained in this//		group and its subgroups.//		//	Changes://		2000-06-24	MH		Created///--------------------------------------------------------------------------------------long ZHLRosterGroup::CalcNumberOfItems(){	ZHLItem*	anItem;	long i, count = 0;			for( i = 1; i <= items.CountItems(); ++i )	{		FailNIL( anItem = dynamic_cast<ZHLItem*>(items.GetObject(i)) );				if( typeid(*anItem) == typeid(ZHLRosterGroup) )			count += dynamic_cast<ZHLRosterGroup*>(anItem)->CalcNumberOfItems();		else if( typeid(*anItem) == typeid(ZHLRosterItem) )			++count;	}		return count;}#pragma mark -///--------------------------------------------------------------------------------------//	CustomBackgroundColour://		Override to make sure ZHL draws us correctly//		//	Changes://		2000-07-25	MH		Created///--------------------------------------------------------------------------------------bool	ZHLRosterGroup::CustomBackgroundColour(RGBColor &color, ZHLDialogItem *){#ifdef TOQ	return false;#else	if( mIsMetaGroup )	{		switch( mMetaGroup )		{		case kMetaGroupOnline:			color = PrefsManager::GetPrefsRec().mGroupOnline.metaColor;			break;		case kMetaGroupMyResources:			color = PrefsManager::GetPrefsRec().mGroupMyResources.metaColor;			break;		case kMetaGroupOffline:			color = PrefsManager::GetPrefsRec().mGroupOffline.metaColor;			break;		case kMetaGroupPending:			color = PrefsManager::GetPrefsRec().mGroupPending.metaColor;			break;		case kMetaGroupStalkers:			color = PrefsManager::GetPrefsRec().mGroupStalkers.metaColor;			break;		case kMetaGroupAgents:			color = PrefsManager::GetPrefsRec().mGroupAgents.metaColor;			break;		}	}	else	{		switch( mMetaGroup )		{		case kMetaGroupOnline:			color = PrefsManager::GetPrefsRec().mGroupOnline.groupColor;			break;		case kMetaGroupMyResources:			color = PrefsManager::GetPrefsRec().mGroupMyResources.groupColor;			break;		case kMetaGroupOffline:			color = PrefsManager::GetPrefsRec().mGroupOffline.groupColor;			break;		case kMetaGroupPending:			color = PrefsManager::GetPrefsRec().mGroupPending.groupColor;			break;		case kMetaGroupStalkers:			color = PrefsManager::GetPrefsRec().mGroupStalkers.groupColor;			break;		case kMetaGroupAgents:			color = PrefsManager::GetPrefsRec().mGroupAgents.groupColor;			break;		}	}	return true;#endif}///--------------------------------------------------------------------------------------//	CustomForegroundColour://		Get the text color//		//	Changes://		2000-08-04	MH		Created///--------------------------------------------------------------------------------------bool	ZHLRosterGroup::CustomForegroundColour(RGBColor &color, ZHLDialogItem *){#ifdef TOQ	return false;#else	if( mIsMetaGroup )	{		switch( mMetaGroup )		{		case kMetaGroupOnline:			color = PrefsManager::GetPrefsRec().mGroupOnline.metaTextColor;			break;		case kMetaGroupMyResources:			color = PrefsManager::GetPrefsRec().mGroupMyResources.metaTextColor;			break;		case kMetaGroupOffline:			color = PrefsManager::GetPrefsRec().mGroupOffline.metaTextColor;			break;		case kMetaGroupPending:			color = PrefsManager::GetPrefsRec().mGroupPending.metaTextColor;			break;		case kMetaGroupStalkers:			color = PrefsManager::GetPrefsRec().mGroupStalkers.metaTextColor;			break;		case kMetaGroupAgents:			color = PrefsManager::GetPrefsRec().mGroupAgents.metaTextColor;			break;		}	}	else	{		switch( mMetaGroup )		{		case kMetaGroupOnline:			color = PrefsManager::GetPrefsRec().mGroupOnline.groupTextColor;			break;		case kMetaGroupMyResources:			color = PrefsManager::GetPrefsRec().mGroupMyResources.groupTextColor;			break;		case kMetaGroupOffline:			color = PrefsManager::GetPrefsRec().mGroupOffline.groupTextColor;			break;		case kMetaGroupPending:			color = PrefsManager::GetPrefsRec().mGroupPending.groupTextColor;			break;		case kMetaGroupStalkers:			color = PrefsManager::GetPrefsRec().mGroupStalkers.groupTextColor;			break;		case kMetaGroupAgents:			color = PrefsManager::GetPrefsRec().mGroupAgents.groupTextColor;			break;		}	}	return true;#endif}