///--------------------------------------------------------------------------------------//	File:		ReceiveManager.cpp//	Project:	Jabbernaut////	Purpose:	Handle incoming (normal) messages//	Created:	Thursday, 2000-10-05//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#ifndef TOQ  #include	"HistoryManager.h"#endif#include	"JabberUtils.h"#include	"PrefsManager.h"#include	"ReceiveManager.h"#include	"ReceiveMsgDialog.h"#include	"RosterManager.h"///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===ReceiveManager		*ReceiveManager::msInstance		= NULL;#pragma mark -///--------------------------------------------------------------------------------------//	GetInstance://		Return an instance of ReceiveManager//		//	Changes://		2000-10-05	MH		Created///--------------------------------------------------------------------------------------ReceiveManager*	ReceiveManager::GetInstance(){	// IDEA: Extend this later on to take a Client pointer as parameter	// then, use a std::map to find the listener associated to that client.	// This will be very helpful for the multi-headed service...	if( !msInstance )		FailNIL( msInstance = new ReceiveManager() );	return msInstance;}#pragma mark -///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------ReceiveManager::ReceiveManager()	: ZComrade(), MsgListener(){	FailNIL( mReceiveMsgDialogs = new ZObjectList() );	ListenTo( gWindowManager );}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------ReceiveManager::~ReceiveManager(){	msInstance = NULL;	ForgetObject( mReceiveMsgDialogs );}#pragma mark -///--------------------------------------------------------------------------------------//	onMessage://		dispatch our messages//		//	Changes://		2000-10-05	MH		Created///--------------------------------------------------------------------------------------void	ReceiveManager::onMessage( MessageMsg &inMessage ){	ASSERT("mReceiveMsgDialogs == NULL",mReceiveMsgDialogs,0);	ZHLRosterItem*	rosterItem = RosterManager::FindZHLRosterItem(inMessage.getFrom());	// If we are to only show msgs from people on our roster, and the sende of inMessage	// is not on the roster, then do nothing.	if( PrefsManager::GetPrefsRec().mOnlyShowMsgIfOnRoster && !rosterItem )		return;		if( JabberUtils::MatchString( inMessage.getFrom().getFull(),									PrefsManager::GetPrefsRec().mBlockJIDList ) )		return;		if( inMessage.getType().empty() || inMessage.getType() == "normal" )	{#ifdef TOQ		if( !rosterItem )		{			RosterManager::AddFakeRosterItem( inMessage );			FailNIL( rosterItem = RosterManager::FindZHLRosterItem(inMessage.getFrom()) );		}#else		HistoryManager::DispatchMessageMsg( inMessage );#endif		// This is a default type message		JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventNormalMsg );//		ReceiveMsgDialog::DispatchMessageMsg( inMessage );		ReceiveMsgDialog*	theReceiveMsgDialog;		#ifndef TOQ		theReceiveMsgDialog = FindReceiveMsgDialog( inMessage.getFrom() );		if( theReceiveMsgDialog )		{			theReceiveMsgDialog->OnMessage( inMessage );			theReceiveMsgDialog->CleverSelect();		}		else#endif		{			FailNIL( theReceiveMsgDialog = new ReceiveMsgDialog( inMessage ) );						try			{				theReceiveMsgDialog->InitZWindow();				theReceiveMsgDialog->Place();#ifdef TOQ				if( !PrefsManager::GetPrefsRec().mIncomingMessagesDelayed )#endif					theReceiveMsgDialog->Select();			}			catch( ZoopError err )			{				ForgetObject( theReceiveMsgDialog );								throw err;			}			mReceiveMsgDialogs->AppendItem( theReceiveMsgDialog );			#ifdef TOQ			if( PrefsManager::GetPrefsRec().mIncomingMessagesDelayed )				rosterItem->StartBlinking();#endif		}	}}#pragma mark -///--------------------------------------------------------------------------------------//	ReceiveMessage://		Detect if one of our ReceiveMsgDialogs was closed//		//	Changes://		2000-10-05	MH		Created///--------------------------------------------------------------------------------------void	ReceiveManager::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){	ASSERT("mReceiveMsgDialogs == NULL",mReceiveMsgDialogs,0);	if( (aMsg == kWMMsgWindowRemoved) && msgData)	{		// Remove it from our list		mReceiveMsgDialogs->DeleteObject( (ZObject*)msgData );	}}#pragma mark -///--------------------------------------------------------------------------------------//	FindReceiveMsgDialog://		Return a pointer to the ReceiveMsgDialog matching aJID or NULL//		//	Changes://		2000-10-06	MH		Created///--------------------------------------------------------------------------------------ReceiveMsgDialog*	ReceiveManager::FindReceiveMsgDialog( const JID & aJID ){	ASSERT("mReceiveMsgDialogs == NULL",mReceiveMsgDialogs,0);	ReceiveMsgDialog*	theReceiveMsgDialog;	for ( long i = 1; i <= mReceiveMsgDialogs->CountItems(); ++i )	{			theReceiveMsgDialog = (ReceiveMsgDialog*) mReceiveMsgDialogs->GetObject( i );		if ( theReceiveMsgDialog->mSenderJID == aJID )			return theReceiveMsgDialog;	}		return NULL;}///--------------------------------------------------------------------------------------//	FindInvisibleReceiveMsgDialog://		Return a pointer to the first invisible ReceiveMsgDialog matching aJID or NULL//		//	Changes://		2000-10-06	MH		Created///--------------------------------------------------------------------------------------ReceiveMsgDialog*	ReceiveManager::FindInvisibleReceiveMsgDialog( const JID & aJID ){	ASSERT("mReceiveMsgDialogs == NULL",mReceiveMsgDialogs,0);	ReceiveMsgDialog*	theReceiveMsgDialog;	for ( long i = 1; i <= mReceiveMsgDialogs->CountItems(); ++i )	{			theReceiveMsgDialog = (ReceiveMsgDialog*) mReceiveMsgDialogs->GetObject( i );		if ( !theReceiveMsgDialog->IsVisible() && (theReceiveMsgDialog->mSenderJID == aJID) )			return theReceiveMsgDialog;	}		return NULL;}