///--------------------------------------------------------------------------------------//	File:		RosterDialog.cpp//	Project:	Jabbernaut////	Purpose:	This dialog displays the roster (aka "Buddy List")//	Created:	Thursday, 2000-05-11//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialogItem.h"#include	"ZHierarchicList.h"#include	"ConnectionManager.h"#include	"JabberApplication.h"#ifndef TOQ  #include	"RosterAddItemDialog.h"#endif#include	"RosterDialog.h"#include	"RosterManager.h"#include	"UniqueID.h"#include	<typeinfo>///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kRosterDialogID	= 1004};enum{#ifdef TOQ	kRosterListID			= 1,	kRosterStatusPopupID	= 2,	kRosterGroupPopupID		= 3#else	kRosterListID			= 1#endif};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------RosterDialog::RosterDialog()	: inherited( gApplication, kRosterDialogID ){	isInline = true;	mZHL = NULL;}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------RosterDialog::~RosterDialog(){	RosterManager::msRosterDialog = NULL;}#pragma mark -///--------------------------------------------------------------------------------------//	Close://		close the dialog (actually hides it)//		//	Changes://		2000-10-16	MH		Created///--------------------------------------------------------------------------------------Boolean		RosterDialog::Close( const short phase ){	if( PrefsManager::GetPrefsRec().mRosterCloseQuits )		gApplication->RequestQuit();	return inherited::Close( phase );}///--------------------------------------------------------------------------------------//	UpdateMenus://		update the menu to enable our command as appropriate//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------void		RosterDialog::UpdateMenus(){	ASSERT("mZHL == NULL",mZHL != NULL,0);	inherited::UpdateMenus();		if( ConnectionManager::IsLoggedIn() )	{		if( mZHL->TotalSelected() == 1 )		{			if( typeid(*mZHL->GetSelection(1)) == typeid(ZHLRosterItem) )			{				gMenuBar->EnableCommand( kCmdInformation );				gMenuBar->EnableCommand( kCmdRosterRemoveUser );			}		}	}}///--------------------------------------------------------------------------------------//	HandleCommand://		Handle commands//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------void		RosterDialog::HandleCommand( const ZoopCommand aCmd ){	switch ( aCmd )	{		case kCmdRosterAddUser:			AddRosterItem(MacJLib::emptyJID);			break;		case kCmdInformation:			EditRosterItem();			break;		case kCmdRosterRemoveUser:			RemoveRosterItem();			break;		case kCmdRosterQueryVersion://			QueryVersionRosterItem();			break;		case kCmdRosterQueryTime://			QueryTimeRosterItem();			break;		default:			inherited::HandleCommand( aCmd );			break;	}}///--------------------------------------------------------------------------------------//	ClickItem://		Handle clicks in the variouse dialog items//		//	Changes://		2000-09-13	MH		Created///--------------------------------------------------------------------------------------void		RosterDialog::ClickItem( const short theItem ){#ifdef TOQ	if( theItem == kRosterStatusPopupID )	{		short	val = GetValue( theItem );				// FIX ME		// allow this only when online?!? Or maybe go to online/offline mode... hm		switch( val )		{		case 1:		// "Online"			gApplication->HandleCommand( kCmdStatusAvailable );			break;		case 2:		// "Offline" == away			gApplication->HandleCommand( kCmdStatusAway );			break;		case 3:		// "Desconectado"			gApplication->HandleCommand( kCmdStatusDisconnected );			break;		}	}	else if( theItem == kRosterGroupPopupID )	{		Str255	pStr;		short	val = GetValue( theItem );				if( val == 1 )	// "Todos" == all			RosterManager::SetCurrentGroupName("");		else		{			GetIndString( pStr, 1105, val );			if( pStr[0] )			{				char	cStr[256];				CopyPToCString( pStr, cStr );				RosterManager::SetCurrentGroupName(cStr);			}		}			}	else#endif		inherited::ClickItem( theItem );}///--------------------------------------------------------------------------------------//	ReceiveMessage://		check various messages from the ZHLDialogItem//		//	Changes://		2000-05-14	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){}///--------------------------------------------------------------------------------------//	ContextualMenuClick://		pass on contextual click to the ZHL//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::ContextualMenuClick( Point globalMouse ){	if( mZHL )	{		if( this != gApplication->GetFrontWindow() )			Select();		mZHL->ContextualMenuClick( globalMouse );	}}#pragma mark -///--------------------------------------------------------------------------------------//	UserInitialise://		set up the ZHL in here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::UserInitialise( ZDialogItem* theItem ){	ZHLDialogItem	*zhlItem = dynamic_cast<ZHLDialogItem *>(theItem);		if( zhlItem )	{		mZHL = zhlItem;		mZHL->SetModes( zhl::selOnlyOne | zhl::selNotContents );	}}#pragma mark -///--------------------------------------------------------------------------------------//	AddRosterItem://		//		//	Changes://		2000-05-14	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::AddRosterItem( const MacJLib::JID & aJID ){#ifndef TOQ	RosterAddItemDialog*	myRosterAddItemDialog;		FailNIL( myRosterAddItemDialog = new RosterAddItemDialog());		try	{		myRosterAddItemDialog->InitZWindow();		myRosterAddItemDialog->SetUserJID( aJID );		myRosterAddItemDialog->Place();		myRosterAddItemDialog->Select();	}	catch( ZoopError err )	{		ForgetObject( myRosterAddItemDialog );				throw err;	}#endif}///--------------------------------------------------------------------------------------//	RemoveRosterItem://		//		//	Changes://		2000-05-14	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::RemoveRosterItem(){	if( mZHL->TotalSelected() == 1 )	{		ZHLRosterItem		*zhlRI = NULL;		zhlRI = dynamic_cast<ZHLRosterItem *>(mZHL->GetSelection( 1 ));			if( zhlRI )			zhlRI->DoRemoveRosterItem();	}}///--------------------------------------------------------------------------------------//	EditRosterItem://		//		//	Changes://		2000-05-14	MH		Created///--------------------------------------------------------------------------------------void	RosterDialog::EditRosterItem(){	if( mZHL->TotalSelected() == 1 )	{		ZHLRosterItem		*zhlRI = NULL;		zhlRI = dynamic_cast<ZHLRosterItem *>(mZHL->GetSelection( 1 ));			if( zhlRI )			zhlRI->DoEditRosterItem();	}}