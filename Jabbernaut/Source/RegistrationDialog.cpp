///--------------------------------------------------------------------------------------//	File:		RegistrationDialog.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Monday, 2000-07-10//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialogItem.h"#include	"ConnectionManager.h"#include	"RegisterManager.h"#include	"RegistrationDialog.h"#include	"UniqueID.h"///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kRegDialogID	= 1012,		kRegDialogVerticalItemOffset = 22};enum{	kRegOKID				= 1,	kRegCancelID			= 2,		kRegInstructionsID		= 4,		kRegUsernameTitleID		= 5};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------RegistrationDialog::RegistrationDialog( const MacJLib::RegisterMsg &inRegister )	: inherited( gApplication, kRegDialogID ), mRegisterMsg(inRegister){}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------RegistrationDialog::~RegistrationDialog(){	RegisterManager::RemovedRegisterDialog( this );}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		Init the dialog contents//		//	Changes://		2000-07-10	MH		Created///--------------------------------------------------------------------------------------void	RegistrationDialog::InitZWindow(){	Rect			oldBounds;	Str255			pStr;	short			i, j, itemID, dv;	bool			requiredFlagField[MacJLib::RegisterMsg::kReqSize];	std::string		elementsField[MacJLib::RegisterMsg::kReqSize];	// first, call the inherited method and let is setup the dialog	inherited::InitZWindow();			SetValueAsString( kRegInstructionsID, mRegisterMsg.getInstructions() );		mRegisterMsg.getRequiredFlags( requiredFlagField );	mRegisterMsg.getElements( elementsField );	itemID = kRegUsernameTitleID;	dv = 0;	for( j = MacJLib::RegisterMsg::kReqUsername, i = 0; j < MacJLib::RegisterMsg::kReqSize; ++i, ++j )	{		if( requiredFlagField[i] )		{			OffsetItem( itemID, 0, dv );			OffsetItem( itemID+1, 0, dv );		}		else		{			GetItemObject( itemID )->Hide();			GetItemObject( itemID+1 )->Hide();			GetItemObject( itemID+1 )->Disable( TRUE );			dv -= kRegDialogVerticalItemOffset;		}		CopyCToPString( elementsField[i].c_str(), pStr );		SetValue( itemID+1, pStr );		itemID += 2;	}	OffsetItem( kRegOKID, 0, dv );	OffsetItem( kRegCancelID, 0, dv );		GetBounds( &oldBounds );#if MACZOOP_VERSION < 0x0250	SetSize( oldBounds.right - oldBounds.left,  oldBounds.bottom - oldBounds.top + dv, false );#else	SetSize( oldBounds.right - oldBounds.left,  oldBounds.bottom - oldBounds.top + dv );#endif}///--------------------------------------------------------------------------------------//	ClickItem://		Handle mouse clicks inside of the dialog//		//	Changes://		2000-07-10	MH		Created///--------------------------------------------------------------------------------------void	RegistrationDialog::ClickItem( const short theItem ){	inherited::ClickItem( theItem );	if( theItem == kRegOKID )	{		MacJLib::RegisterMsg	*responseMsg;		std::string				uniqueID;		std::string				elementsField[MacJLib::RegisterMsg::kReqSize];		bool					requiredFlagField[MacJLib::RegisterMsg::kReqSize];		short					i, itemID;				uniqueID = GenerateUniqueID();				itemID = kRegUsernameTitleID+1;		mRegisterMsg.getRequiredFlags( requiredFlagField );		for( i = 0; i < MacJLib::RegisterMsg::kReqSize; i++ )		{			if( requiredFlagField[i] )			{				GetValueAsString( itemID, elementsField[i] );			}			itemID += 2;		}		responseMsg = mRegisterMsg.makeReply();		responseMsg->setElements( elementsField );		responseMsg->setType( "set" );		responseMsg->setID( uniqueID );				// Fire it up!		ConnectionManager::PostMessage( responseMsg );				// Remember the message ID,, so we can track it (we also save the agent		//	JID and the current time, so we can do timeouts etc.		RegisterManager::msRegisterAttemptIDs.insert( make_pair(uniqueID, RegisterQuery(responseMsg->getTo(), MacJLib::GetTimeSeconds())) );				Close( kRunning );	}	else if( theItem == kRegCancelID )	{		Close( kRunning );	}}#pragma mark -///--------------------------------------------------------------------------------------//	OffsetItem://		Offset an item by dh/dv//		//	Changes://		2000-07-10	MH		Created///--------------------------------------------------------------------------------------void	RegistrationDialog::OffsetItem( short item, short dh, short dv ){	ASSERT( "Bad item ID in OffsetItem", item <= itsItems->CountItems(), item )		ZDialogItem*	di;	Rect			itemRect;		FailNIL( di = GetItemObject( item ) );		di->GetBounds( &itemRect );	OffsetRect( &itemRect, dh, dv );	di->SetBounds( &itemRect );}