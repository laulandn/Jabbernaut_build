///--------------------------------------------------------------------------------------//	File:		ProfileDialog.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Friday, 2000-05-19//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialogItem.h"#include	"ZFile.h"#include	"ZProgress.h"#include	"CheckKeyModifier.h"#include	"ConnectionManager.h"#include	"Profile.h"#include	"ProfileDialog.h"#include	"PrefsManager.h"#include	"Messages.h"///- Constants --------------------------------------------------------------------------#pragma mark -#pragma mark === Constants ===enum{	kProfileDialogID	= 1000};enum{	kProfileOKID		= 1,	kProfileCancelID	= 2,	kProfileUsernameID	= 6,	kProfilePasswordID	= 8,	kProfileResourceID	= 10,	kProfileServerID	= 14};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	• Constructor:///--------------------------------------------------------------------------------------ProfileDialog::ProfileDialog( ZCommander* aBoss, const short windowID )	: ZDialog( aBoss, windowID ){	isInline = true;		mRegisterSucceeded = false;	mRegisterFailed = false;}///--------------------------------------------------------------------------------------//	• Constructor:///--------------------------------------------------------------------------------------ProfileDialog::ProfileDialog()	: ZDialog( gApplication, kProfileDialogID ){//	isInline = false;	isInline = true;		mRegisterSucceeded = false;	mRegisterFailed = false;}///--------------------------------------------------------------------------------------//	• Destructor:///--------------------------------------------------------------------------------------ProfileDialog::~ProfileDialog(){}#pragma mark -///--------------------------------------------------------------------------------------//	OnRegister://		//		//	Changes://		2000-05-20	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::OnRegister(){	mRegisterSucceeded = true;}///--------------------------------------------------------------------------------------//	OnRegisterFailed://		//		//	Changes://		2000-05-20	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::OnRegisterFailed( MacJLib::IQErrorMsg &inError ){	mRegisterFailed = true;}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		Set up the dialog//		//	Changes://		2000-08-18	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::InitZWindow(){	inherited::InitZWindow();	// attach a modifier to the 'username' field	GetItemObject(kProfileUsernameID)->AddModifier( new UsernameModifier() );}///--------------------------------------------------------------------------------------//	ClickItem://		Handle clicks into the ProfileDialog. Mainly used to catch "OK"//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::ClickItem( const short theItem ){	if( theItem == kProfileOKID )	{		Str255	pStr;		char	cStr[256];		bool	timeOut = false;				// reset the prefs		PrefsManager::ResetPrefs();				GetValueAsText(kProfileUsernameID, pStr);		CopyPToCString( pStr, cStr );		Profile::SetUsername( cStr );				GetValueAsText(kProfilePasswordID, pStr);		CopyPToCString( pStr, cStr );		Profile::SetPassword( cStr );				GetValueAsText(kProfileResourceID, pStr);		CopyPToCString( pStr, cStr );		Profile::SetResource( cStr );				GetValueAsText(kProfileServerID, pStr);		CopyPToCString( pStr, cStr );		Profile::SetServer( cStr );				if( !Profile::IsInited() )		{			SysBeep(1);			if( PrefsManager::msPrefsFile )				PrefsManager::ReadPrefs();	// read back in the old prefs			return;		}		// unattach the current file		if( PrefsManager::msPrefsFile )			ForgetObject( PrefsManager::msPrefsFile );						// Consider this:#if !_DEBUG_////	FIX ME - I need it hard#endif#if 1		if( Profile::NeedsRegister() )		{			ZProgress	aPD( this, kStdProgressResID, 4, kCancelType, kIndeterminateProgress );			aPD.SetDelay( kTwoSeconds );			bool	loggedIn = false;			mRegisterSucceeded = mRegisterFailed = false;			ConnectionManager::OpenConnectionAsync();			aPD.SetMessage("\pConnecting to server…");			aPD.InformProgress( 1 );			// check to see if connection opening failed!!!			std::time_t startTime = TickCount();			do			{				if( (startTime + 30*60) < TickCount() )			// 30 seconds time out!					 mRegisterFailed = timeOut = true;	// This may be to short, but it's just a hack anyway								// Give time to the connection thread so it can do its work...				YieldToAnyThread();				if( !loggedIn && ConnectionManager::IsConnected() )				{					loggedIn = true;										aPD.SetMessage("\pConnected.");					aPD.InformProgress( 2 );					aPD.SetMessage("\pRegistering new account…");					aPD.InformProgress( 3 );				}			} while( !(mRegisterSucceeded || mRegisterFailed || timeOut) );						if( mRegisterSucceeded )			{				aPD.SetMessage("\pRegistered.");				aPD.InformProgress( 4 );			}			else if( mRegisterFailed )			{				if( timeOut )				{					aPD.SetMessage("\pTimeout!");					aPD.InformProgress( 4 );				}				else				{					aPD.SetMessage("\pRegistered.");					aPD.InformProgress( 4 );				}			}						StopCursorAnimation();		}#endif				Profile::SetNeedsRegister( false );				Hide();	}	else if( theItem == kProfileCancelID )	{		Profile::SetNeedsRegister( false );				Hide();	}	else		inherited::ClickItem( theItem );	mRegisterSucceeded = mRegisterFailed = false;}#pragma mark -///--------------------------------------------------------------------------------------//	Select://		Put in the current values into the fields as appropriate//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::Select(){	Str255	pStr;	//read data from Profile	CopyCToPString( Profile::GetUsername().c_str(), pStr );	SetValue(kProfileUsernameID, pStr);	CopyCToPString( Profile::GetPassword().c_str(), pStr );	SetValue(kProfilePasswordID, pStr);	CopyCToPString( Profile::GetResource().c_str(), pStr );	SetValue(kProfileResourceID, pStr);	CopyCToPString( Profile::GetServer().c_str(), pStr );	SetValue(kProfileServerID, pStr);		SelectItem( kProfileUsernameID );		inherited::Select();}#pragma mark -///--------------------------------------------------------------------------------------//	SaveFile://		//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::SaveFile(){	if (macFile.vRefNum != kNoFile)	{		if( PrefsManager::msPrefsFile )			ForgetObject( PrefsManager::msPrefsFile );		FailNIL( PrefsManager::msPrefsFile = new ZFile( macFile ) );		PrefsManager::WritePrefs();		macFile.vRefNum = kNoFile;	}}///--------------------------------------------------------------------------------------//	OpenFile://		//		//	Changes://		2000-05-19	MH		Created///--------------------------------------------------------------------------------------void	ProfileDialog::OpenFile( const OSType aFileType, Boolean isStationery ){	if (macFile.vRefNum != kNoFile)	{		if (aFileType != 'TEXT')			FailOSErr(paramErr);		else		{			// If OpenFile was called, we can can assume the file already exists... I hope ;)						if( PrefsManager::msPrefsFile )				ForgetObject( PrefsManager::msPrefsFile );			FailNIL( PrefsManager::msPrefsFile = new ZFile( macFile ) );						PrefsManager::ReadPrefs();		}		macFile.vRefNum = kNoFile;	}}#pragma mark -///--------------------------------------------------------------------------------------//	CheckForSave://		Only try to save the data when the app quits.//		//	Changes://		2000-05-20	MH		Created///--------------------------------------------------------------------------------------short	ProfileDialog::CheckForSave( const short phase ){//	if( phase != kQuitting )		return kCloseNoSave;//	else//		return inherited::CheckForSave( phase );}