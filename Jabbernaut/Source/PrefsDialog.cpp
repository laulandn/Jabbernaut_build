///--------------------------------------------------------------------------------------//	File:		PrefsDialog.cpp//	Project:	Jabbernaut////	Purpose:	The preference dialog//	Created:	Friday, 2000-05-19//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDialogItem.h"#if _DEBUG_#include	"JabberApplication.h"#include	"ZDebugTextWindow.h"#endif#include	"CheckKeyModifier.h"#include	"PrefsDialog.h"#include	"PrefsManager.h"#include	"PresenceManager.h"#include	"RosterManager.h"#include	"SoundManager.h"///- Macros -----------------------------------------------------------------------------#pragma mark -#pragma mark === Macros ===#define	SetMetaGroupPrefs(x)	do { \	SetValue( kPrefsMetaShowID, prefs.mGroup##x##.show );	\	SetValue( kPrefsMetaOpenID, prefs.mGroup##x##.open );	\	SetRGBValue( kPrefsMetaColor1stID, prefs.mGroup##x##.metaColor );	\	SetRGBValue( kPrefsMetaColor2ndID, prefs.mGroup##x##.groupColor );	\	SetRGBValue( kPrefsMetaColor3rdID, prefs.mGroup##x##.itemColor );	\	SetRGBValue( kPrefsMetaColor4thID, prefs.mGroup##x##.resourceColor );	\	SetRGBValue( kPrefsMetaTextColor1stID, prefs.mGroup##x##.metaTextColor );	\	SetRGBValue( kPrefsMetaTextColor2ndID, prefs.mGroup##x##.groupTextColor );	\	SetRGBValue( kPrefsMetaTextColor3rdID, prefs.mGroup##x##.itemTextColor );	\	SetRGBValue( kPrefsMetaTextColor4thID, prefs.mGroup##x##.resourceTextColor );	\	} while(0)#define	GetMetaGroupPrefs(x)	do { \	GetValue( kPrefsMetaShowID, prefs.mGroup##x##.show );	\	GetValue( kPrefsMetaOpenID, prefs.mGroup##x##.open );	\	GetRGBValue( kPrefsMetaColor1stID, prefs.mGroup##x##.metaColor );	\	GetRGBValue( kPrefsMetaColor2ndID, prefs.mGroup##x##.groupColor );	\	GetRGBValue( kPrefsMetaColor3rdID, prefs.mGroup##x##.itemColor );	\	GetRGBValue( kPrefsMetaColor4thID, prefs.mGroup##x##.resourceColor );	\	GetRGBValue( kPrefsMetaTextColor1stID, prefs.mGroup##x##.metaTextColor );	\	GetRGBValue( kPrefsMetaTextColor2ndID, prefs.mGroup##x##.groupTextColor );	\	GetRGBValue( kPrefsMetaTextColor3rdID, prefs.mGroup##x##.itemTextColor );	\	GetRGBValue( kPrefsMetaTextColor4thID, prefs.mGroup##x##.resourceTextColor );	\	} while(0)#define	SetEventPrefs(x)	do { \	SetValue( kPrefsEventSoundOnID, prefs.mEvent##x##.soundOn );		\	SetValue( kPrefsEventBlinkID, prefs.mEvent##x##.blinkMenu );		\	SetValue( kPrefsEventAppToFrontID, prefs.mEvent##x##.bringToFront );		\	} while(0)#define	GetEventPrefs(x)	do { \	GetValue( kPrefsEventSoundOnID, prefs.mEvent##x##.soundOn );		\	GetValue( kPrefsEventBlinkID, prefs.mEvent##x##.blinkMenu );		\	GetValue( kPrefsEventAppToFrontID, prefs.mEvent##x##.bringToFront );		\	} while(0)///- Contants ---------------------------------------------------------------------------#pragma mark -#pragma mark === Contants ===enum{	kPrefsDialogID	= 1400};enum{	kPrefsOKID						= 1,	kPrefsCancelID					= 2,	kPrefsSwitchItemID				= 3,		//	// Account Prefs	//	kPrefsUsernameID				= 5,	kPrefsPasswordID				= 7,	kPrefsResourceID				= 9,	kPrefsServerID					= 11,	kPrefsUseSSLID					= 12,	kPrefsSavePasswordID			= 13,	kPrefsUseKeychainID				= 14,		//	// General Prefs	//	kPrefsAutoLoginID				= 16,	kPrefsTryReloginID				= 17,	kPrefsCheckVersionID			= 18,	kPrefsTimestampsInChatID		= 20,	kPrefsTimestampsInGCID			= 21,	kPrefsAutoAwayID				= 23,	kPrefsAutoAwayDelayID			= 24,	kPrefsXAutoAwayID				= 26,	kPrefsXAutoAwayDelayID			= 27,	kPrefsAutoEndAutoaway			= 29,		kPrefsShowAgentsWinID			= 31,	kPrefsShowHistoryWinID			= 32,	kPrefsShowRosterWinID			= 33,			//	// Subscription Prefs	//	kPrefsIfOnRosterAcceptID		= 36,	kPrefsIfOnRosterRejectID		= 37,	kPrefsIfOnRosterAskID			= 38,	kPrefsIfNotOnRosterAcceptID		= 40,	kPrefsIfNotOnRosterRejectID		= 41,	kPrefsIfNotOnRosterAskID		= 42,		kPrefsAutoSubscribeID			= 43,	kPrefsAutoSubscribeGroupID		= 45,		kPrefsSendRejectionMsgID		= 46,	kPrefsRejectionMsgID			= 48,		//	// Roster Prefs	//		// Meta Group prefs	kPrefsMetaListID				= 50,	kPrefsMetaShowID				= 51,	kPrefsMetaOpenID				= 52,	kPrefsMetaColor1stID			= 54,	kPrefsMetaColor2ndID			= 55,	kPrefsMetaColor3rdID			= 56,	kPrefsMetaColor4thID			= 57,	kPrefsMetaTextColor1stID		= 59,	kPrefsMetaTextColor2ndID		= 60,	kPrefsMetaTextColor3rdID		= 61,	kPrefsMetaTextColor4thID		= 62,	kPrefsRosterSortID				= 64,		kPrefsDoubleClickMsgID			= 66,	kPrefsDoubleClickChatID			= 67,		//	// Privacy Prefs	//		kPrefsOnlyShowMsgIfOnRosterID	= 68,		kPrefsBlockListID				= 70,	kPrefsBlockListAddBtnID			= 71,	kPrefsBlockListChangeBtnID		= 72,	kPrefsBlockListRemoveBtnID		= 73,	kPrefsBlockJIDFieldID			= 75,		//	// Chat Prefs	//		kPrefsChatIgnoreThreadID		= 76,		kPrefsChatDefaultNickID			= 78,		//	// Groupchat Prefs	//		kPrefsGroupChatIdleTimeID		= 80,		kPrefsFavoriteGroupsID			= 83,	kPrefsFavoriteGroupsAddBtnID	= 84,	kPrefsFavoriteGroupsChangeBtnID	= 85,	kPrefsFavoriteGroupsRemoveBtnID	= 86,		kPrefsFavoriteGroupsTitleID		= 88,	kPrefsFavoriteGroupsGroupID		= 90,	kPrefsFavoriteGroupsServerID	= 92,	kPrefsFavoriteGroupsNickID		= 94,		//	// Event Prefs	//		kPrefsEventListID				= 96,	kPrefsEventSoundOnID			= 97,	kPrefsEventBlinkID				= 98,	kPrefsEventAppToFrontID			= 99,	//	// Color Prefs	//	kPrefsColorDefaultID			= 102,	kPrefsColorOwnID				= 104,	kPrefsColorServerID				= 106,	kPrefsColorPrivateID			= 108,	kPrefsColorOpsID				= 111,	kPrefsColorVoiceID				= 113,		//	// Debug Prefs	//	kPrefsShowDebugWindowsID		= 114,	kPrefsShowDebugTimestampsID		= 115};enum{	kBlockJIDDialogID		= 1108,	kJIDToBLockID			= 4};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------PrefsDialog::PrefsDialog( ZCommander* aBoss, const short windowID  )	: inherited( aBoss, windowID ){	isInline = true;}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------PrefsDialog::PrefsDialog()	: inherited( gApplication, kPrefsDialogID ){	isInline = true;}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------PrefsDialog::~PrefsDialog(){}#pragma mark -///--------------------------------------------------------------------------------------//	DisplayPrefsRec://		Display the data in the PrefsRec prefs inside this dialog//		//	Changes://		2000-06-25	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::DisplayPrefsRec( const PrefsRec &prefs ){// FIX ME DisplayPrefsRec() is almost identical to SaveDialogToPrefsRec!!// almost only difference if Get... <-> Set... Hm, maybe exploit this...	//	// Account Prefs	//	SetValueAsString( kPrefsUsernameID, prefs.mUsername );	SetValueAsString( kPrefsPasswordID, prefs.mPassword );	SetValueAsString( kPrefsResourceID, prefs.mResource );	if( 0 != long(prefs.mServerPort) )	{		std::string dummy(prefs.mServer);		dummy += ":";		dummy += prefs.mServerPort.c_str();		SetValueAsString( kPrefsServerID, dummy  );	}	else	{		SetValueAsString( kPrefsServerID, prefs.mServer );	}	SetValue( kPrefsUseSSLID, prefs.mUseSSL );	SetValue( kPrefsSavePasswordID, prefs.mSavePassword );// FIX ME	if( !prefs.mSavePassword )		DisableItem( kPrefsUseKeychainID );	else		EnableItem( kPrefsUseKeychainID );	SetValue( kPrefsUseKeychainID, prefs.mUseKeychain );		//	// General Prefs	//	SetValue( kPrefsAutoLoginID, prefs.mAutoLogin );	SetValue( kPrefsTryReloginID, prefs.mAutoRelogin );		SetValue( kPrefsCheckVersionID, prefs.mCheckVersion );		SetValue( kPrefsTimestampsInChatID, prefs.mTimestampsInChat );	SetValue( kPrefsTimestampsInGCID, prefs.mTimestampsInGC );		SetValue( kPrefsAutoAwayID, prefs.mAutoAway );	SetValue( kPrefsAutoAwayDelayID, prefs.mAutoAwayDelay );	SetValue( kPrefsXAutoAwayID, prefs.mExtendedAutoAway );	SetValue( kPrefsXAutoAwayDelayID, prefs.mExtendedAutoAwayDelay );	SetValue( kPrefsAutoEndAutoaway, prefs.mAutoEndAuoAway );	SetValue( kPrefsShowAgentsWinID, prefs.mAgentsVisible );	SetValue( kPrefsShowHistoryWinID, prefs.mHistoryVisible );	SetValue( kPrefsShowRosterWinID, prefs.mRosterVisible );	//	// Subscription Prefs	//	SetValue( kPrefsIfOnRosterAcceptID, prefs.mResponseIfOnRoster == kAutoAcceptPresenceRequest );	SetValue( kPrefsIfOnRosterRejectID, prefs.mResponseIfOnRoster == kAutoRejectPresenceRequest );	SetValue( kPrefsIfOnRosterAskID, prefs.mResponseIfOnRoster == kAskOnPresenceRequest );	SetValue( kPrefsIfNotOnRosterAcceptID, prefs.mResponseIfNotOnRoster == kAutoAcceptPresenceRequest );	SetValue( kPrefsIfNotOnRosterRejectID, prefs.mResponseIfNotOnRoster == kAutoRejectPresenceRequest );	SetValue( kPrefsIfNotOnRosterAskID, prefs.mResponseIfNotOnRoster == kAskOnPresenceRequest );	SetValue( kPrefsAutoSubscribeID, prefs.mAutoSubscribeBack );	SetValueAsString( kPrefsAutoSubscribeGroupID, prefs.mAutoSubscribeGroup );	SetValue( kPrefsSendRejectionMsgID, prefs.mSendRejectionMsg );	SetValueAsString( kPrefsRejectionMsgID, prefs.mRejectionMsg );	//	// Roster Prefs	//	// Meta Group prefs		switch( GetValue( kPrefsMetaListID ) )	{		case 1:			SetMetaGroupPrefs(Online);			break;		case 2:			SetMetaGroupPrefs(MyResources);			break;		case 3:			SetMetaGroupPrefs(Offline);			break;		case 4:			SetMetaGroupPrefs(Pending);			break;		case 5:			SetMetaGroupPrefs(Stalkers);			break;		case 6:			SetMetaGroupPrefs(Agents);			break;	}		SetValue( kPrefsRosterSortID, prefs.mRosterSortByStatus );	SetValue( kPrefsDoubleClickMsgID, prefs.mDoubleClickSendsMsg );	SetValue( kPrefsDoubleClickChatID, !prefs.mDoubleClickSendsMsg );	//	// Privacy Prefs	//	SetValue( kPrefsOnlyShowMsgIfOnRosterID, prefs.mOnlyShowMsgIfOnRoster );	ListSet( kPrefsBlockListID, prefs.mBlockJIDList );			//	// Chat Prefs	//		SetValueAsString( kPrefsChatDefaultNickID, prefs.mDefaultNick );	SetValue( kPrefsChatIgnoreThreadID, prefs.mChatIgnoreThread );	//	// Groupchat Prefs	//	SetValue( kPrefsGroupChatIdleTimeID, prefs.mGroupChatIdleTime );	//	// Event Prefs	//	switch( GetValue( kPrefsEventListID ) )	{		case 1:			SetEventPrefs(Online);			break;		case 2:			SetEventPrefs(Offline);			break;		case 3:			SetEventPrefs(StatusChange);			break;		case 4:			SetEventPrefs(NormalMsg);			break;		case 5:			SetEventPrefs(ChatMsg);			break;		case 6:			SetEventPrefs(GroupchatMsg);			break;		case 7:			SetEventPrefs(Headline);			break;		case 8:			SetEventPrefs(Error);			break;		case 9:			SetEventPrefs(SubscribeReq);			break;	}	//	// Color Prefs	//	SetRGBValue( kPrefsColorDefaultID, prefs.mColorDefault );	SetRGBValue( kPrefsColorOwnID, prefs.mColorOwn );	SetRGBValue( kPrefsColorServerID, prefs.mColorServer );	SetRGBValue( kPrefsColorPrivateID, prefs.mColorPrivate );	SetRGBValue( kPrefsColorOpsID, prefs.mColorOps );	SetRGBValue( kPrefsColorVoiceID, prefs.mColorVoice );	//	// Debug Prefs	//	SetValue( kPrefsShowDebugWindowsID, prefs.mShowDebugWindows );	SetValue( kPrefsShowDebugTimestampsID, prefs.mShowDebugTimestamps );}///--------------------------------------------------------------------------------------//	SaveDialogToPrefsRec://		Stores the data from the dialog into the PrefsRec prefs//		//	Changes://		2000-06-29	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::SaveDialogToPrefsRec( PrefsRec &prefs ){	//	// Account Prefs	//	GetValueAsString( kPrefsUsernameID, prefs.mUsername );	GetValueAsString( kPrefsPasswordID, prefs.mPassword );	GetValueAsString( kPrefsResourceID, prefs.mResource );	GetValueAsString( kPrefsServerID, prefs.mServer );	std::string::size_type	pos = prefs.mServer.find(":");	if( pos != std::string::npos )	{		prefs.mServerPort = prefs.mServer.substr(pos+1).c_str();		prefs.mServer = prefs.mServer.substr(0, pos);	}	else		prefs.mServerPort = 0L;			GetValue( kPrefsUseSSLID, prefs.mUseSSL );	GetValue( kPrefsSavePasswordID, prefs.mSavePassword );	if( !prefs.mSavePassword )		DisableItem( kPrefsUseKeychainID );	else		EnableItem( kPrefsUseKeychainID );	GetValue( kPrefsUseKeychainID, prefs.mUseKeychain );		//	// General Prefs	//	GetValue( kPrefsAutoLoginID, prefs.mAutoLogin );	GetValue( kPrefsTryReloginID, prefs.mAutoRelogin );		GetValue( kPrefsCheckVersionID, prefs.mCheckVersion );		GetValue( kPrefsTimestampsInChatID, prefs.mTimestampsInChat );	GetValue( kPrefsTimestampsInGCID, prefs.mTimestampsInGC );		GetValue( kPrefsAutoAwayID, prefs.mAutoAway );	GetValue( kPrefsAutoAwayDelayID, prefs.mAutoAwayDelay );		GetValue( kPrefsXAutoAwayID, prefs.mExtendedAutoAway );	GetValue( kPrefsXAutoAwayDelayID, prefs.mExtendedAutoAwayDelay );	GetValue( kPrefsAutoEndAutoaway, prefs.mAutoEndAuoAway );		GetValue( kPrefsShowAgentsWinID, prefs.mAgentsVisible );	GetValue( kPrefsShowHistoryWinID, prefs.mHistoryVisible );	GetValue( kPrefsShowRosterWinID, prefs.mRosterVisible );	//	// Subscription Prefs	//		if( ZDialog::GetValue( kPrefsIfOnRosterAcceptID ) )		prefs.mResponseIfOnRoster = kAutoAcceptPresenceRequest;	else if( ZDialog::GetValue( kPrefsIfOnRosterRejectID ) )		prefs.mResponseIfOnRoster = kAutoRejectPresenceRequest;	else		prefs.mResponseIfOnRoster = kAskOnPresenceRequest;		if( ZDialog::GetValue( kPrefsIfNotOnRosterAcceptID ) )		prefs.mResponseIfNotOnRoster = kAutoAcceptPresenceRequest;	else if( ZDialog::GetValue( kPrefsIfNotOnRosterRejectID ) )		prefs.mResponseIfNotOnRoster = kAutoRejectPresenceRequest;	else		prefs.mResponseIfNotOnRoster = kAskOnPresenceRequest;	GetValue( kPrefsAutoSubscribeID, prefs.mAutoSubscribeBack );	GetValueAsString( kPrefsAutoSubscribeGroupID, prefs.mAutoSubscribeGroup );		GetValue( kPrefsSendRejectionMsgID, prefs.mSendRejectionMsg );	GetValueAsString( kPrefsRejectionMsgID, prefs.mRejectionMsg );			//	// Roster Prefs	//		// Meta Group prefs	switch( GetValue( kPrefsMetaListID ) )	{		case 1:			GetMetaGroupPrefs(Online);			break;		case 2:			GetMetaGroupPrefs(MyResources);			break;		case 3:			GetMetaGroupPrefs(Offline);			break;		case 4:			GetMetaGroupPrefs(Pending);			break;		case 5:			GetMetaGroupPrefs(Stalkers);			break;		case 6:			GetMetaGroupPrefs(Agents);			break;	}		GetValue( kPrefsRosterSortID, prefs.mRosterSortByStatus );	GetValue( kPrefsDoubleClickMsgID, prefs.mDoubleClickSendsMsg );	//	// Privacy Prefs	//	GetValue( kPrefsOnlyShowMsgIfOnRosterID, prefs.mOnlyShowMsgIfOnRoster );	ListGet( kPrefsBlockListID, prefs.mBlockJIDList );	//	// Chat Prefs	//	GetValueAsString( kPrefsChatDefaultNickID, prefs.mDefaultNick );	GetValue( kPrefsChatIgnoreThreadID, prefs.mChatIgnoreThread );	//	// Groupchat Prefs	//	GetValue( kPrefsGroupChatIdleTimeID, prefs.mGroupChatIdleTime );	//	// Event Prefs	//	switch( GetValue( kPrefsEventListID ) )	{		case 1:			GetEventPrefs(Online);			break;		case 2:			GetEventPrefs(Offline);			break;		case 3:			GetEventPrefs(StatusChange);			break;		case 4:			GetEventPrefs(NormalMsg);			break;		case 5:			GetEventPrefs(ChatMsg);			break;		case 6:			GetEventPrefs(GroupchatMsg);			break;		case 7:			GetEventPrefs(Headline);			break;		case 8:			GetEventPrefs(Error);			break;		case 9:			GetEventPrefs(SubscribeReq);			break;	}	//	// Color Prefs	//	GetRGBValue( kPrefsColorDefaultID, prefs.mColorDefault );	GetRGBValue( kPrefsColorOwnID, prefs.mColorOwn );	GetRGBValue( kPrefsColorServerID, prefs.mColorServer );	GetRGBValue( kPrefsColorPrivateID, prefs.mColorPrivate );	GetRGBValue( kPrefsColorOpsID, prefs.mColorOps );	GetRGBValue( kPrefsColorVoiceID, prefs.mColorVoice );	//	// Debug Prefs	//	GetValue( kPrefsShowDebugWindowsID, prefs.mShowDebugWindows );	GetValue( kPrefsShowDebugTimestampsID, prefs.mShowDebugTimestamps );	RosterManager::NotifyPrefChange();	RosterManager::SortRoster();#if _DEBUG_	if( PrefsManager::GetPrefsRec().mShowDebugWindows )	{		if( gDataInDebugWindow )			gDataInDebugWindow->Show();		if( gDataOutDebugWindow )			gDataOutDebugWindow->Show();	}	else	{		if( gDataInDebugWindow )			gDataInDebugWindow->Hide();		if( gDataOutDebugWindow )			gDataOutDebugWindow->Hide();	}#endif}#pragma mark -///--------------------------------------------------------------------------------------//	ClickItem://		Handle clicks in the variouse dialog items//		//	Changes://		2000-05-25	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::ClickItem( const short theItem ){	// finally, call inherited ClickItem to handle other clicks, and	// to close the dialog if the OK or Cancel button was pressed.	inherited::ClickItem( theItem );		switch( theItem )	{	case kPrefsOKID:		{			PrefsManager::Commit();			// close the dialog			Close( kRunning );		}		break;	case kPrefsCancelID:		{			PrefsManager::Restore();			// close the dialog			Close( kRunning );			DisplayPrefsRec( PrefsManager::msPrefsRec );		}		break;	case kPrefsSwitchItemID:		break;		case kPrefsBlockListAddBtnID:		{			std::string	aStr;			GetValueAsString( kPrefsBlockJIDFieldID, aStr);						// FIX ME - this item should be disabled if the edit field is empty			if( !aStr.empty() )				ListAppendValue( kPrefsBlockListID, aStr, true, true );		}		SaveDialogToPrefsRec( PrefsManager::msPrefsRec );		break;		case kPrefsBlockListChangeBtnID:	case kPrefsBlockListRemoveBtnID:		if( theItem == kPrefsBlockListChangeBtnID )		{			std::string	aStr;			ListGetSelected( kPrefsBlockListID, aStr );			// FIX ME - this item should be disabled if nothing is selected			if( !aStr.empty() )			{				GetValueAsString( kPrefsBlockJIDFieldID, aStr);								ListRemoveSelected( kPrefsBlockListID );				ListAppendValue( kPrefsBlockListID, aStr, true, true );			}		}		else if( theItem == kPrefsBlockListRemoveBtnID )		{			std::string	aStr;			ListRemoveSelected( kPrefsBlockListID );			ListGetSelected( kPrefsBlockListID, aStr );			SetValueAsString( kPrefsBlockJIDFieldID, aStr);		}		SaveDialogToPrefsRec( PrefsManager::msPrefsRec );		case kPrefsBlockListID:	case kPrefsBlockJIDFieldID:		{			std::string	listStr, jidStr;						ListGetSelected( kPrefsBlockListID, listStr );			if( !listStr.empty() && (theItem == kPrefsBlockListID))				SetValueAsString( kPrefsBlockJIDFieldID, listStr);			GetValueAsString( kPrefsBlockJIDFieldID, jidStr);			if( listStr.empty() || (jidStr == listStr) )				DisableItem( kPrefsBlockListChangeBtnID );			else				EnableItem( kPrefsBlockListChangeBtnID );			if( jidStr.empty() )				DisableItem( kPrefsBlockListAddBtnID );			else				EnableItem( kPrefsBlockListAddBtnID );		}		break;		case kPrefsMetaListID:	case kPrefsEventListID:		DisplayPrefsRec( PrefsManager::msPrefsRec );		break;		default:		SaveDialogToPrefsRec( PrefsManager::msPrefsRec );		break;	}}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		Set up the dialog to reflect the current preferences//		//	Changes://		2000-05-25	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::InitZWindow(){	inherited::InitZWindow();//	GetItemObject(kPrefsTryReloginID)->Disable( TRUE );	GetItemObject(kPrefsSendRejectionMsgID)->Disable( TRUE );	for( short item = kPrefsFavoriteGroupsID; item <= kPrefsFavoriteGroupsNickID; ++item )		GetItemObject(item)->Disable( TRUE );		// make sure the "meta group" list is inited	SetValue( kPrefsMetaListID, 1 );		// make sure the "event" list is inited	SetValue( kPrefsEventListID, 1 );	// attach a modifier to the 'username' field	GetItemObject(kPrefsUsernameID)->AddModifier( new UsernameModifier() );}///--------------------------------------------------------------------------------------//	ReceiveMessage://		not used yet...//		//	Changes://		2000-05-25	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){}#pragma mark -///--------------------------------------------------------------------------------------//	OnLogin://		//		//	Changes://		2000-08-21	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::OnLogin(){	GetItemObject(kPrefsUsernameID)->Disable( TRUE );	GetItemObject(kPrefsPasswordID)->Disable( TRUE );	GetItemObject(kPrefsResourceID)->Disable( TRUE );	GetItemObject(kPrefsServerID)->Disable( TRUE );	PostRefresh();}///--------------------------------------------------------------------------------------//	OnLogout://		//		//	Changes://		2000-08-21	MH		Created///--------------------------------------------------------------------------------------void	PrefsDialog::OnLogout(){	GetItemObject(kPrefsUsernameID)->Enable( TRUE );	GetItemObject(kPrefsPasswordID)->Enable( TRUE );	GetItemObject(kPrefsResourceID)->Enable( TRUE );	GetItemObject(kPrefsServerID)->Enable( TRUE );	PostRefresh();}