///--------------------------------------------------------------------------------------//	File:		PresenceManager.cpp//	Project:	Jabbernaut////	Purpose:	This modules handles incoming presence and dispatches it as needed//	Created:	Tuesday, 2000-05-16//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"ZErrors.h"#ifndef TOQ  #include	"AuthorizeDialog.h"  #include	"GroupChatManager.h"#endif#include	"ConnectionManager.h"#include	"JabberUtils.h"#include	"PrefsManager.h"#include	"PresenceManager.h"#include	"RosterManager.h"#include	"Messages.h"#include	"UniqueID.h"///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===PresenceStatus		PresenceManager::mPresenceStatus = kOfflinePresenceStatus;std::string			PresenceManager::mStatusString;#pragma mark -///--------------------------------------------------------------------------------------//	DispatchPresenceMsg://		Handle incoming message and take appropriate actions (i.e. inform other modules)//		//	Changes://		2000-05-16	MH		Created//		2000-05-26	MH		Moved code from AuthorizeDialog::DispatchPresenceMsg to here///--------------------------------------------------------------------------------------void	PresenceManager::DispatchPresenceMsg( const MacJLib::PresenceMsg &inPresence ){	if( inPresence.getType() == "subscribe" )	{#ifdef TOQ		SendPresence( inPresence.getFrom(), "subscribed", "", "" );		SendPresence( inPresence.getFrom(), "subscribe", "", "" );#else		ZHLRosterItem*		rosterItem;		PresenceResponse	response;		bool				isAlreadySubscribedTo;				rosterItem = RosterManager::FindZHLRosterItem( inPresence.getFrom() );		if( rosterItem )		{			response = PrefsManager::GetPrefsRec().mResponseIfOnRoster;			isAlreadySubscribedTo = rosterItem->isSubscribedTo();		}		else		{			response = PrefsManager::GetPrefsRec().mResponseIfNotOnRoster;			isAlreadySubscribedTo = false;		}						// Request for permission to see presence -> check user prefs:		switch( response )		{		case kAutoAcceptPresenceRequest:			// automatically accept request			SendPresence( inPresence.getFrom(), "subscribed", "", "" );			if( !isAlreadySubscribedTo && PrefsManager::GetPrefsRec().mAutoSubscribeBack )				SendPresence( inPresence.getFrom(), "subscribe", "", "" );			break;		case kAutoRejectPresenceRequest:			// automatically deny request			SendPresence( inPresence.getFrom(), "unsubscribed", "", "" );			break;		case kAskOnPresenceRequest:			// ask the user what to do via a dialog:			AuthorizeDialog*	theAuthorizeDialog;			FailNIL( theAuthorizeDialog = new AuthorizeDialog());						try			{				theAuthorizeDialog->InitZWindow();				theAuthorizeDialog->Place();			}			catch( ZoopError err )			{				ForgetObject( theAuthorizeDialog );								throw err;			}						JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventSubscribeReq );			theAuthorizeDialog->OnPresence( inPresence );			theAuthorizeDialog->Select();			break;		}#endif	}	else if( inPresence.getType() == "subscribed" )	{		// FIXME		// dialog: "User xyz approved your request"	}	else if( inPresence.getType() == "unsubscribe" )	{		// FIX ME - this could be a cancel to a "subscribe".		// We should check all AuthorizeDialog, and if one matching		// this JID is open, close it!		//		// To do so, maybe keep all AuthorizeDialog in a list.		// Which means other hassles, i.e. we need to be informed		// when a dialog closes so we can update our list...	}	else if( inPresence.getType() == "unsubscribed" )	{		// tell roster -> do you want to unsubscribe, too?		// but roster should only ask this if currently subscribed!	}}#pragma mark -///--------------------------------------------------------------------------------------//	BroadcastPresence://		broadcast our presence message//		//	Changes://		2000-05-16	MH		Created///--------------------------------------------------------------------------------------void	PresenceManager::BroadcastPresence( PresenceStatus inPresenceStatus,											const std::string &status,											const MacJLib::JID &to ){	std::string		show;	std::string		type;		mPresenceStatus = inPresenceStatus;	mStatusString = status;		// set the show/type attributes:	switch( mPresenceStatus )	{	case kNAPresenceStatus:		show = "xa";		break;	case kDNDPresenceStatus:		show = "dnd";		break;	case kChatPresenceStatus:		show = "chat";		break;	case kAwayPresenceStatus:		show = "away";		break;	case kOfflinePresenceStatus:		type = "unavailable";		break;	}		// ...and send it	SendPresence( to, type, status, show );}#pragma mark -///--------------------------------------------------------------------------------------//	GetPresenceStatus://		Extracts the presence status from a PresenceMsg//		//	Changes://		2000-07-21	MH		Created///--------------------------------------------------------------------------------------PresenceStatus	PresenceManager::GetPresenceStatus( const MacJLib::PresenceMsg &inPresence ){	if( inPresence.getType() == "unavailable" )		return kOfflinePresenceStatus;	else	{		if( inPresence.getShow() == "chat" )			return kChatPresenceStatus;		else if( inPresence.getShow() == "away" )			return kAwayPresenceStatus;		else if( inPresence.getShow() == "xa" )			return kNAPresenceStatus;		else if( inPresence.getShow() == "dnd" )			return kDNDPresenceStatus;	}		return kOnlinePresenceStatus;}///--------------------------------------------------------------------------------------//	GetStatusString://		Extracts the presence status string from a PresenceMsg//		//	Changes://		2000-08-21	MH		Created///--------------------------------------------------------------------------------------std::string	PresenceManager::GetStatusString( const MacJLib::PresenceMsg &inPresence ){	return inPresence.getStatus();}#pragma mark -///--------------------------------------------------------------------------------------//	SendPresence://		Send out presence//		//	Changes://		2000-05-17	MH		Created//		2000-08-21	MH		Changed to be usable for general purpose presence sending///--------------------------------------------------------------------------------------void		PresenceManager::SendPresence( const MacJLib::JID &inJID,											const std::string &type,											const std::string &status,											const std::string &show ){	MacJLib::PresenceMsgHeader	presenceHeader;		// sent it back to the requester	presenceHeader.to = inJID;		// set the type, status and show attributes	presenceHeader.type = type;	presenceHeader.status = status;	presenceHeader.show = show;		// ...and send it	ConnectionManager::PostMessage( new MacJLib::PresenceMsg(&presenceHeader) );}