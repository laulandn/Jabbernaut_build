///--------------------------------------------------------------------------------------//	File:		SendMsgDialog.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Saturday, 2000-04-15//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ReceiveMsgDialog.h"#include	"RosterManager.h"#include	"SendManager.h"#include	"SendMsgDialog.h"#include	"Messages.h"#include	"UniqueID.h"#include	<iostream>///- Constants --------------------------------------------------------------------------#pragma mark -#pragma mark === Constants ===const	 int kSendMessageDialogID	= 1001;enum{#ifdef TOQ	kSendMsgSendButtonID	= 1,	kSendMsgBodyID			= 2#else	kSendMsgSendButtonID	= 1,	kSendMsgCancelButtonID	= 2,	kSendMsgReceiverID		= 6,	kSendMsgSubjectID		= 8,	kSendMsgBodyID			= 9#endif};#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------SendMsgDialog::SendMsgDialog( ReceiveMsgDialog* parent )	: inherited( gApplication, kSendMessageDialogID ){	// create a unique thread id	mThreadID = GenerateUniqueID();	mParentWin = parent;}#pragma mark -///--------------------------------------------------------------------------------------//	InitZWindow://		clear all fields//		//	Changes://		2000-05-26	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::InitZWindow(){	inherited::InitZWindow();	#ifndef TOQ	SetValueAsString( kSendMsgReceiverID, "" );	SetValueAsString( kSendMsgSubjectID,  "" );#endif		SetValueAsString( kSendMsgBodyID, "" );		ListenTo( gWindowManager );}///--------------------------------------------------------------------------------------//	ClickItem://		put your description here//		//	Changes://		2000-04-15	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::ClickItem( const short theItem ){	inherited::ClickItem( theItem );	if( theItem == kSendMsgSendButtonID )	{		MacJLib::MessageMsgHeader	message;		std::string					to;	#ifdef TOQ		message.to = mReceiverJID;#else		// Get the recipient address from the dialog and put it into the header.		GetValueAsString( kSendMsgReceiverID, to );		if( to.empty() )		{			gWindowManager->DeactivateForDialog( -1, TRUE );			(void) Alert( 1200, NULL );			gWindowManager->Activate();			return;		}		message.to = to;#endif		#ifndef TOQ		// now get the subject		GetValueAsString( kSendMsgSubjectID, message.subject );#endif				// finally, get the message body (it's stored in a ZTextDialogItem)		GetValueAsString( kSendMsgBodyID, message.body );				// Generate an unique ID for this		message.id = GenerateUniqueID();				// Set the thread ID.		message.thread = mThreadID;				// now, send the message via the SendManager		SendManager::SendMessage( message );				// try to close our parent		if( mParentWin && !mParentWin->HasRemainingMessages())		{			mParentWin->Close( kRunning );			//mParentWin = NULL;		}				// finally, close the dialog!		Close( kRunning );	}#ifndef TOQ	else if( theItem == kSendMsgCancelButtonID )	{		Close( kRunning );	}#endif}///--------------------------------------------------------------------------------------//	ReceiveMessage://		Detect if our parent receive message dialog was closed//		//	Changes://		2000-10-02	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){	if( (aMsg == kWMMsgWindowRemoved) && (mParentWin == msgData) )	{		mParentWin = NULL;	}}#pragma mark -///--------------------------------------------------------------------------------------//	SetTargetJID://		//		//	Changes://		2000-05-26	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::SetTargetJID( const MacJLib::JID &inJID ){#ifdef TOQ	Str255			pStr;	char			cStr[256];	std::string		titleStr;		mReceiverJID = inJID;		GetName( pStr );	CopyPToCString( pStr, cStr );	titleStr = std::string(cStr) + RosterManager::GetRosterNick( mReceiverJID );	CopyCToPString( titleStr.c_str(), pStr );		SetTitle( pStr );#else	Str255			pStr;		CopyCToPString( inJID.c_str(), pStr );	SetValue( kSendMsgReceiverID, pStr );		// if there is a recipient specified, focus the message body field, so	// the user can start typing right away	if( 0 != pStr[0] )		SelectItem( kSendMsgBodyID );	else		SelectItem( kSendMsgReceiverID );#endif}///--------------------------------------------------------------------------------------//	SetSubject://		//		//	Changes://		2000-05-26	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::SetSubject( const std::string &inSubject ){#ifndef TOQ	SetValueAsString( kSendMsgSubjectID, inSubject );#endif}///--------------------------------------------------------------------------------------//	SetThreadID://		//		//	Changes://		2000-05-26	MH		Created///--------------------------------------------------------------------------------------void	SendMsgDialog::SetThreadID( const std::string &inThreadID ){	mThreadID = inThreadID;}