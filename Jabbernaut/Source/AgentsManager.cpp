///--------------------------------------------------------------------------------------//	File:		AgentsManager.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Wednesday, 2000-05-17//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"AgentsDialog.h"#include	"AgentsManager.h"#include	"ConnectionManager.h"#include	"Profile.h"#include	"Messages.h"#include	"UniqueID.h"#include <stdlib.h>///- Static Members ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Members ===AgentsDialog		*AgentsManager::msAgentsDialog			= NULL;ZHLFolder			*AgentsManager::msZHLRootFolder			= NULL;ZObjectList			*AgentsManager::msZHLAgentItems			= NULL;ZObjectList			*AgentsManager::msZHLServerItems		= NULL;bool				AgentsManager::msAgentsListTransfered	= false;#pragma mark -///--------------------------------------------------------------------------------------//	Init://		Give this manager a chance to initate static members etc.//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::Init(){	ASSERT("msAgentsDialog != NULL",msAgentsDialog == NULL,0);	ASSERT("msZHLAgentItems != NULL",msZHLAgentItems == NULL,0);	ASSERT("msZHLServerItems != NULL",msZHLServerItems == NULL,0);	ASSERT("msZHLRootFolder != NULL",msZHLRootFolder == NULL,0);	//	// Create the item lists	//	FailNIL( msZHLAgentItems = new ZObjectList );	FailNIL( msZHLServerItems = new ZObjectList );	//	// Create the agents dialog	//	FailNIL( msAgentsDialog = new AgentsDialog());	try	{		msAgentsDialog->InitZWindow();		msAgentsDialog->Place();		// create the agents window, but keep it hidden at first!	}	catch( ZoopError err )	{		ForgetObject( msAgentsDialog );				throw err;	}	//	// Create the root folder	//	FailNIL( msZHLRootFolder = new ZHLFolder( "\proot" ) );	msZHLRootFolder->SetSort( ZHLAgenttemCompare, 0 );	msAgentsDialog->mZHL->AttachRootFolder(msZHLRootFolder);}///--------------------------------------------------------------------------------------//	Deinit://		Give this manager a chance to dispose static members etc.//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::Deinit(){	if( msAgentsDialog )	{		// Disable drawing		msAgentsDialog->mZHL->DrawingActive( false );		// Clear the agent list		ClearAgentList();	}	if( msZHLAgentItems )		ForgetObject( msZHLAgentItems );	if( msZHLServerItems )		ForgetObject( msZHLServerItems );	if( msZHLRootFolder )		ForgetObject( msZHLRootFolder );}#pragma mark -///--------------------------------------------------------------------------------------//	SelectAgentsDialog://		//		//	Changes://		2000-05-27	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::SelectAgentsDialog(){	ASSERT("msAgentsDialog == NULL",msAgentsDialog != NULL,0);		msAgentsDialog->Select();}#pragma mark -///--------------------------------------------------------------------------------------//	RefreshAgentList://		Send out a jabber:iq:agents to the server//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::RefreshAgentList(){	std::set<std::string>	ServerSet;	MacJLib::AgentsMsg		*anAgentsMsg;	// Disable drawing	msAgentsDialog->mZHL->DrawingActive( false );	// Clear the agent list	ClearAgentList();	// Re-enable drawing and update to screen	msAgentsDialog->mZHL->DrawingActive( true );		msAgentsDialog->mZHL->RefreshListContents();	// FIX ME	ServerSet.insert(Profile::GetServer());	ServerSet.insert("jabber.org");	ServerSet.insert("jabber.com");	ServerSet.insert("free-source.com");	ServerSet.insert("hotjabber.com");		for( std::set<std::string>::const_iterator X = ServerSet.begin(); X != ServerSet.end(); ++X )	{		FailNIL( anAgentsMsg = new MacJLib::AgentsMsg() );		anAgentsMsg->setType( "get" );		anAgentsMsg->setTo( *X );		anAgentsMsg->setID( GenerateUniqueID() );		ConnectionManager::PostMessage( anAgentsMsg );	}}#pragma mark -///--------------------------------------------------------------------------------------//	DispatchAgentsMsg://		Split the message and dispatch the agent elements one by one//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::DispatchAgentsMsg( MacJLib::AgentsMsg &inAgentsMsg ){	ASSERT("msAgentsDialog == NULL",msAgentsDialog != NULL,0);		msAgentsDialog->mZHL->DrawingActive( false );	for( AgentsMsg::AgentsList::const_iterator X = inAgentsMsg.agentsList().begin(); X != inAgentsMsg.agentsList().end(); ++X )		OnAgent( *X, inAgentsMsg.getFrom() );	msAgentsDialog->mZHL->DrawingActive( true );		msAgentsDialog->mZHL->RefreshListContents();		// FIX ME	// This code just pretends that the agents list is fully transfered in one package,	// But this is incorrect in our case, as we query multiple servers for agents!	// To fix this, we'd need to keep a list of servers we asked. Then, whenever either	// a reply or an error for each request is received, we mark that in a list. Only	// when all requests are replied to (or a timeout has happened) can we safely (and 	// what is more important, correctly) set msAgentsListTransfered to true.	msAgentsListTransfered = true;}///--------------------------------------------------------------------------------------//	DispatchRegisterMsg://		Find the matching agent item and let it handle the message//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::DispatchRegisterMsg( RegisterMsg &inRegister ){	ASSERT("msAgentsDialog == NULL",msAgentsDialog != NULL,0);		ZHLAgentItem*	zhlAI;		zhlAI = FindZHLAgentItem( inRegister.getFrom() );		if( zhlAI )	{//		msAgentsDialog->mZHL->DrawingActive( false );				zhlAI->OnRegister( inRegister );		//		msAgentsDialog->mZHL->DrawingActive( true );	//		msAgentsDialog->mZHL->RefreshListContents();	}}///--------------------------------------------------------------------------------------//	OnLogin://		//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::OnLogin(){	RefreshAgentList();}///--------------------------------------------------------------------------------------//	OnLogout://		First reset the dialog; then kill all roster items/folders from our list//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::OnLogout(){	// Disable drawing	msAgentsDialog->mZHL->DrawingActive( false );	// Clear the agents list	ClearAgentList();	// Mark the agents list as not transfered	msAgentsListTransfered = false;	// Re-enable drawing and update to screen	msAgentsDialog->mZHL->DrawingActive( true );		msAgentsDialog->mZHL->RefreshListContents();}#pragma mark -///--------------------------------------------------------------------------------------//	IsTransport://		Check whether a given JID is a transport agent or not//		//	Changes://		2000-08-14	MH		Created///--------------------------------------------------------------------------------------bool	AgentsManager::IsTransport( const MacJLib::JID &inJID ){	ZHLAgentItem*	zhlAI = FindZHLAgentItem( inJID );		if( zhlAI )		return zhlAI->isTransport();	else		return false;}#pragma mark -void	AgentsManager::BuildTransportsPopup( MenuHandle menuH ){	ZHLAgentItem*	zhlAI;	long			i, itemIndex;	Str255			pStr;		// Delete all items from the menu	i = CountMenuItems( menuH );	while( i > 0 )		DeleteMenuItem( menuH, i-- );	// Add a dummy entry for the "Jabber Transport"	CopyCToPString( "Jabber Transport", pStr );	AppendMenu( menuH, pStr );		// we begin with index 2 (index 1 is the dummy entry)	itemIndex = 2;	for( i = 1; i <= msZHLAgentItems->CountItems(); ++i )	{		FailNIL( zhlAI = (ZHLAgentItem*) msZHLAgentItems->GetObject( i ) );				if( zhlAI->isTransport() )		{			CopyCToPString( zhlAI->getDisplayString().c_str(), pStr );			// we can't use AppendMenu directly, beacuse it interprets certain charachters			// (like '(') in a special way, thus we use the following approach.			AppendMenu( menuH, "\px" );			SetMenuItemText( menuH, itemIndex, pStr );			itemIndex++;		}	}}///--------------------------------------------------------------------------------------//	FindItemInTransportsPopup://		Get the item text in menuH, and see if we can find a matching transport.//		If yes, return it, otherwise return NULL//		//	Changes://		2000-08-03	MH		Created///--------------------------------------------------------------------------------------ZHLAgentItem*	AgentsManager::FindItemInTransportsPopup( MenuHandle menuH, short item ){	ZHLAgentItem*	zhlAI;	Str255			pStr;	char			cStr[256];	long			i;	if( item <= 0 )		return NULL;	if( item > CountMenuItems( menuH ) )		return NULL;	GetMenuItemText( menuH, item, pStr );	CopyPToCString( pStr, cStr );	for( i = 1; i <= msZHLAgentItems->CountItems(); ++i )	{		FailNIL( zhlAI = (ZHLAgentItem*) msZHLAgentItems->GetObject( i ) );				if( zhlAI->getDisplayString() == cStr )		{			return zhlAI;		}	}		return NULL;}#pragma mark -///--------------------------------------------------------------------------------------//	FindZHLAgentItem://		search msZHLAgentItems for an item that matches inJID.//		Return it, or NULL if none found//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------ZHLAgentItem*	AgentsManager::FindZHLAgentItem( const MacJLib::JID &inJID ){	ZHLAgentItem*	zhlAI;	long			i;	for( i = 1; i <= msZHLAgentItems->CountItems(); ++i )	{		FailNIL( zhlAI = (ZHLAgentItem*) msZHLAgentItems->GetObject( i ) );				if( zhlAI->getJID() == inJID )		{			return zhlAI;		}	}		return NULL;}///--------------------------------------------------------------------------------------//	FindOrCreateServerItem://		This will check if there's already a group object with the name 'name'.//		If found, return the object, otherwise create a new one and return that.//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------ZHLFolder*	AgentsManager::FindOrCreateServerItem( const std::string &name ){	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msZHLServerItems == NULL",msZHLServerItems != NULL,0);		ZHLFolder	*myFolder;	Str255		pStr;	char		cStr[256];	long		i;	for( i = 1; i <= msZHLServerItems->CountItems(); ++i )	{		FailNIL( myFolder = (ZHLFolder*) msZHLServerItems->GetObject( i ) );		CopyPToCString( myFolder->GetName(), cStr );		if( name == cStr )		{			// found matching server folder: return it to the caller			return myFolder;		}	}		// If this point is reached, there was no matching group folder, thus we	// need to create a new one from scratch	CopyCToPString(name.c_str(), pStr);	FailNIL( myFolder = new ZHLFolder( pStr ));	myFolder->SetSort( ZHLAgenttemCompare, 0 );		// Put it into the list of group folders.	msZHLServerItems->AppendItem( myFolder );	// Insert it into root folder.	msZHLRootFolder->AddItem( myFolder );	//	msRosterDialog->mZHL->OpenFolder( myGroup, IsMetaFolderOpen(inMetaGroup) );	return myFolder;	// finally, return the newly created group object}#pragma mark -///--------------------------------------------------------------------------------------//	OnAgent://		//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::OnAgent( const Agent &inAgent, const JID &sender ){	ZHLAgentItem	*zhlAI;	ZHLFolder		*parentFolder = NULL;		if( !sender.empty() )	{		parentFolder = FindZHLAgentItem( sender );		if( parentFolder == NULL )			parentFolder = FindOrCreateServerItem( sender.getFull() );	}	if( parentFolder == NULL )		parentFolder = msZHLRootFolder;		zhlAI = FindZHLAgentItem( inAgent.getJID() );		if( zhlAI == NULL )	{		FailNIL( zhlAI = new ZHLAgentItem() );		zhlAI->SetSort( ZHLAgenttemCompare, 0 );	}	// call OnAgent *before* adding to the list, otherwise sorting doesn't work	zhlAI->OnAgent( inAgent );	// remove the item frome the agent list (this does nothing for new items)	msZHLAgentItems->DeleteObject( zhlAI );	parentFolder->RemoveItem( zhlAI );	// ...and insert it again, sorted.	msZHLAgentItems->InsertSortedItem( zhlAI, ZHLAgenttemCompare, 0 );	parentFolder->AddItem( zhlAI );}///--------------------------------------------------------------------------------------//	ClearAgentList://		First reset the dialog; then kill all roster items/folders from our list.//		This method is called by OnLogout() and by RefreshAgentList()//		//	Changes://		2000-08-02	MH		Created///--------------------------------------------------------------------------------------void	AgentsManager::ClearAgentList(){	ASSERT("msAgentsDialog == NULL",msAgentsDialog != NULL,0);	ASSERT("msZHLRootFolder == NULL",msZHLRootFolder != NULL,0);	ASSERT("msZHLAgentItems == NULL",msZHLAgentItems != NULL,0);	ASSERT("msZHLServerItems == NULL",msZHLServerItems != NULL,0);		// 1) kill the old root folder	ForgetObject( msZHLRootFolder );		// 2) Create a new one	FailNIL( msZHLRootFolder = new ZHLFolder( "\proot" ) );	msZHLRootFolder->SetSort( ZHLAgenttemCompare, 0 );	msAgentsDialog->mZHL->AttachRootFolder(msZHLRootFolder);		// 3) Remove all ZHLAgentItems and all server groups	msZHLAgentItems->DisposeAll();	msZHLServerItems->DisposeAll();}