///--------------------------------------------------------------------------------------//	File:		JabberClient.cpp//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Friday, 2000-04-07//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------///- Includes ---------------------------------------------------------------------------#pragma mark === Includes ===#include	"MacZoop.h"#include	"ZDebugTextWindow.h"#ifndef TOQ  #include	"AgentsManager.h"  #include	"ChatManager.h"#endif#include	"ConnectionManager.h"#ifndef TOQ  #include	"GroupChatManager.h"  #include	"HistoryManager.h"#endif#include	"JabberApplication.h"#include	"JabberClient.h"#include	"JabberUtils.h"#include	"Profile.h"#ifndef TOQ  #include	"ProfileManager.h"#endif#include	"ReceiveManager.h"#ifndef TOQ  #include	"RegisterManager.h"#endif#include	"RosterManager.h"#include	"Messages.h"#include	"UniqueID.h"#include	"CTCPUtils.h"#include	"MemoryOps.h"#include	"MacJLibUtils.h"#include	"Node.h"///- Globals ----------------------------------------------------------------------------#pragma mark -#pragma mark === Globals ===///- Static Globals ---------------------------------------------------------------------#pragma mark -#pragma mark === Static Globals ===///- Prototypes -------------------------------------------------------------------------#pragma mark -#pragma mark === Prototypes ===#pragma mark -#pragma mark [Class Init]///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JabberClient::JabberClient( ClientConnection *conn, JXMLStream* inStream  )	: BaseClient( conn, inStream ){	mState = kNoClientState;		addMsgListener( ReceiveManager::GetInstance() );}///--------------------------------------------------------------------------------------//	¥ Destructor:///--------------------------------------------------------------------------------------JabberClient::~JabberClient(){}#pragma mark -///--------------------------------------------------------------------------------------//	onConnect://		put your description here//		//	Changes://		2000-04-07	MH		Created//		2000-04-27	MH		Extended to handle login/register///--------------------------------------------------------------------------------------void	JabberClient::onConnect(){	if( Profile::NeedsRegister() )	{		RegisterMsgHeader	myRegHeader;		myRegHeader.type = "set";		myRegHeader.username = Profile::GetUsername();		myRegHeader.password = Profile::GetPassword();		mSavedMsgID = GenerateUniqueID();		myRegHeader.id = mSavedMsgID;		queueMessage( new RegisterMsg( &myRegHeader ) );		mState = kRegisterAccountClientState;	}	else	{		AuthMsgHeader		myAuthHeader;		myAuthHeader.username = Profile::GetUsername();		myAuthHeader.password = Profile::GetPassword();		myAuthHeader.resource = Profile::GetResource();		mSavedMsgID = GenerateUniqueID();		myAuthHeader.id = mSavedMsgID;		queueMessage( new AuthMsg( &myAuthHeader ) );				mState = kLoginClientState;	}}///--------------------------------------------------------------------------------------//	onDisconnect://		put your description here//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onDisconnect(){	mState = kNoClientState;	mSavedMsgID.clear();		ConnectionManager::OnLogout();}///--------------------------------------------------------------------------------------//	onError://		put your description here//		//	Changes://		2000-04-13	MH		Created//		2000-04-27	MH		Extended to handle login/register///--------------------------------------------------------------------------------------void	JabberClient::onError( IQErrorMsg &inError ){// ATTENTION!!// HANDLE Error 302 (redirect)!!!	if( !mSavedMsgID.empty() && (mSavedMsgID == inError.getID()) )	{		// login/register failed		if( mState == kLoginClientState )		{			ConnectionManager::OnLoginFailed( inError );		}		else if( mState == kRegisterAccountClientState )		{			// get the error id			// 409 - name already taken#ifndef TOQ			ProfileManager::OnRegisterFailed( inError );#endif			ConnectionManager::OnRegisterFailed( inError );		}	}	#ifndef TOQ	RegisterManager::DispatchIQErrorMsg( inError );#endif}///--------------------------------------------------------------------------------------//	onResult://		put your description here//		//	Changes://		2000-04-13	MH		Created//		2000-04-27	MH		Extended to handle login/register///--------------------------------------------------------------------------------------void	JabberClient::onResult( IQResultMsg &inResult ){	if( !mSavedMsgID.empty() && (mSavedMsgID == inResult.getID()) )	{		// login/register suceeded		if( mState == kLoginClientState )		{			ConnectionManager::OnLogin();			// succesfully logged in!		}		else if( mState == kRegisterAccountClientState )		{#ifndef TOQ			ProfileManager::OnRegister();#endif			ConnectionManager::OnRegister();			// try to login via the newly registered account			// FIX ME: this code shouldn't be in JabberClient			AuthMsgHeader		myAuthHeader;			myAuthHeader.username = Profile::GetUsername();			myAuthHeader.password = Profile::GetPassword();			myAuthHeader.resource = Profile::GetResource();			mSavedMsgID = GenerateUniqueID();			myAuthHeader.id = mSavedMsgID;			queueMessage( new AuthMsg( &myAuthHeader ) );			mState = kLoginClientState;		}	}	#ifndef TOQ	RegisterManager::DispatchIQResultMsg( inResult );#endif}///--------------------------------------------------------------------------------------//	onMessage://		put your description here//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onMessage( MessageMsg &inMessage ){	bool	isOnRoster = RosterManager::IsOnRoster(inMessage.getFrom());		if( inMessage.getType() == "error" )	{		// FIX ME		// how should we handle errors?!//		HistoryManager::DispatchMessageMsg( inMessage );		JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventError );	}	else if( !PrefsManager::GetPrefsRec().mOnlyShowMsgIfOnRoster ||				(PrefsManager::GetPrefsRec().mOnlyShowMsgIfOnRoster && isOnRoster ) )	{		if( inMessage.getType() == "chat" )		{			//FIX ME			// check whether this is a groupchat derived message			// (i.e. a /msg message or a GC server message), and display			// it in the GC window instead of a chat window#ifndef TOQ			ChatManager::DispatchMessageMsg( inMessage );#endif		}		else if( inMessage.getType() == "groupchat" )		{#ifndef TOQ			GroupChatManager::DispatchMessageMsg( inMessage );#endif		}		else if( inMessage.getType() == "headline" )		{#ifndef TOQ			// FIX ME			// how should we handle headlines?!			JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventHeadline );			#if _DEBUG_				HistoryManager::DispatchMessageMsg( inMessage );			#endif#endif		}		else		{#ifdef TOQ			if( !isOnRoster )				RosterManager::AddFakeRosterItem( inMessage );#endif			// This is a default type message#ifdef OLD_ReceiveMsgDialog_CODE			JabberUtils::DoEventNotify( PrefsManager::GetPrefsRec().mEventNormalMsg );			ReceiveMsgDialog::DispatchMessageMsg( inMessage );#endif		}	}}///--------------------------------------------------------------------------------------//	onPresence://		put your description here//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onPresence( PresenceMsg &inPresence ){	PresenceManager::DispatchPresenceMsg( inPresence );#ifndef TOQ	GroupChatManager::DispatchPresenceMsg( inPresence );#endif}///--------------------------------------------------------------------------------------//	onRegister://		Pass on the handling of inRegister to the RegisterManager//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onRegister( RegisterMsg &inRegister ){#ifndef TOQ	AgentsManager::DispatchRegisterMsg( inRegister );	RegisterManager::DispatchRegisterMsg( inRegister );#endif}///--------------------------------------------------------------------------------------//	onVersion://		put your description here//		//	Changes://		2000-04-16	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onVersion( VersionMsg &inVersion ){	if( inVersion.getType() == "get" )	{		VersionMsg	*myVer = inVersion.makeResult();		myVer->setName("Jabbernaut");				myVer->setVersion( JabberUtils::GetVersionString() );		myVer->setOS("MacOS");		queueMessage( myVer );	}}///--------------------------------------------------------------------------------------//	onTime://		put your description here//		//	Changes://		2000-05-03	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onTime( TimeMsg &inTime ){	if( inTime.getType() == "get" )	{		TimeMsg		*myTime;		std::time_t	secs;				FailNIL( myTime = inTime.makeResult() );				secs = MacJLib::GetTimeSeconds();		myTime->setUTC(MacJLib::SecondsToUTC(secs - TimeZoneOffsetInSeconds()));		myTime->setDisplay(BuildTimeString(secs));				queueMessage( myTime );	}}///--------------------------------------------------------------------------------------//	onAgents://		put your description here//		//	Changes://		2000-05-03	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onAgents( AgentsMsg &inAgentsMsg ){#ifndef TOQ	AgentsManager::DispatchAgentsMsg( inAgentsMsg );#endif}///--------------------------------------------------------------------------------------//	onUnknownMsg://		put your description here//		//	Changes://		2000-04-07	MH		Created///--------------------------------------------------------------------------------------void	JabberClient::onUnknownMsg( ParseableNode &unknown ){}///--------------------------------------------------------------------------------------//	onDataIn://		put your description here//		//	Changes://		2000-04-08	MH		Created//		2000-04-13	MH		Changed to print to seperate "IN" window///--------------------------------------------------------------------------------------void	JabberClient::onDataIn( const char *dataIn, std::size_t len  ){#if _DEBUG_	if( gDataInDebugWindow )	{		if( PrefsManager::GetPrefsRec().mShowDebugTimestamps )		{			unsigned long	secs;			Str255			pStr;						GetDateTime(&secs);			TimeString( secs, false, pStr, NULL );						ConcatPStrings(pStr, "\p: ");						gDataInDebugWindow->AppendBuffer( ((char*)pStr)+1, pStr[0] );			gDataInDebugWindow->AppendBuffer( dataIn, len );			gDataInDebugWindow->AppendBuffer( "\r\r", 2 );		}		else			gDataInDebugWindow->AppendBuffer( dataIn, len );	}#endif}///--------------------------------------------------------------------------------------//	onDataOut://		put your description here//		//	Changes://		2000-04-13	MH		Created//		2000-04-13	MH		Changed to print to seperate "OUT" window///--------------------------------------------------------------------------------------void	JabberClient::onDataOut( const char *dataOut, std::size_t len  ){#if _DEBUG_	if( gDataOutDebugWindow )	{		if( PrefsManager::GetPrefsRec().mShowDebugTimestamps )		{			unsigned long	secs;			Str255			pStr;						GetDateTime(&secs);			TimeString( secs, false, pStr, NULL );						ConcatPStrings(pStr, "\p: ");						gDataOutDebugWindow->AppendBuffer( ((char*)pStr)+1, pStr[0] );			gDataOutDebugWindow->AppendBuffer( dataOut, len );			gDataOutDebugWindow->AppendBuffer( "\r\r", 2 );		}		else			gDataOutDebugWindow->AppendBuffer( dataOut, len );	}#endif}