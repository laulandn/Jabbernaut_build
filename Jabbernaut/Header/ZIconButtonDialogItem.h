/****************************************************************************************************			ZIconButtonDialogItem.h		-- a versatile graphical button class******			© 2000, Max Horn****************************************************************************************************/#pragma once#ifndef	__ZIconButtonDialogItem__#define	__ZIconButtonDialogItem__#include	"ZDialogItem.h"enum{	kPushButton		= 1,	kToggleButton	= 2};typedef short ButtonType;enum{	kIconButton		= 1,	kPictButton		= 2};typedef short ButtonStyle;// template resource format#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endiftypedef struct{	short				btType;				// button type	short				btStyle;			// button style	short				btNormalResID;		// res ID for the "normal" state	short				btPushedResID;		// res ID for the "pushed" state	short				btNormalDisResID;	// res ID for the "normal+disabled" state	short				btPushedDisResID;	// res ID for the "pushed+disabled" state}ButtonTemplateRec, *ButtonTemplatePtr, **ButtonTemplateHdl;#define		kButtonTemplateResType		'Btn '#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif// class info:DEFINECLASSID( ZIconButtonDialogItem, 'IBdi' );class	ZIconButtonDialogItem : public ZDialogItem{protected:	ButtonType		itsType;				// button type	ButtonStyle		itsStyle;				// button style	Boolean			isPushed;				// button's state (normal/pushed)	short			normalResID;			// res ID for the "normal" state	short			pushedResID;			// res ID for the "pushed" state	short			normalDisResID;			// res ID for the "normal+disabled" state	short			pushedDisResID;			// res ID for the "pushed+disabled" statepublic:	ZIconButtonDialogItem();	ZIconButtonDialogItem( ZDialog* aBoss, const short anID );	~ZIconButtonDialogItem();	virtual void		DoHilightSelection( Boolean hiliteIt );	inline ButtonType	GetButtonType()		{ return itsType; }	inline Boolean		IsButtonePushed()	{ return isPushed; }	// overrides	virtual void		InitItem( const short paramCount, const long params[] );	virtual void		Click( const Point aMousePt, const short modifiers );	virtual void		DrawItem();	protected:	virtual Boolean	TrackButton();	};#endif