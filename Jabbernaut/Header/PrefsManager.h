///--------------------------------------------------------------------------------------//	File:		PrefsManager.h//	Project:	Jabbernaut////	Purpose:	This module manages the preferences and handles the prefs dialog//	Created:	Friday, 2000-05-26//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------#pragma once///- Includes ---------------------------------------------------------------------------#include	"JID.h"#include	"NumericString.h"#include	"MacJLibUtils.h"#include	<list>#include	<string>///- Class forwards ---------------------------------------------------------------------namespace MacJLib{	class	CAbstractNode;	class	CElementNode;	class	CExpatParser;	class	CNodeBuildingHandler;}using	MacJLib::CAbstractNode;using	MacJLib::CElementNode;using	MacJLib::CExpatParser;using	MacJLib::CNodeBuildingHandler;class	PrefsDialog;class	ZFile;class	ZWindow;///- Constants --------------------------------------------------------------------------enum{	kAskOnPresenceRequest = 0,	kAutoAcceptPresenceRequest,	kAutoRejectPresenceRequest};///- Globals ----------------------------------------------------------------------------///- Prototypes -------------------------------------------------------------------------///- Data Types -------------------------------------------------------------------------using	MacJLib::StringList;typedef long PresenceResponse;struct EventNotify{	bool	soundOn;	long	sndResID;	bool	blinkMenu;	bool	bringToFront;};struct RosterMetagroup{	bool		show;	bool		open;	RGBColor	metaColor;	RGBColor	metaTextColor;	RGBColor	groupColor;	RGBColor	groupTextColor;	RGBColor	itemColor;	RGBColor	itemTextColor;	RGBColor	resourceColor;	RGBColor	resourceTextColor;};struct PrefsRec{	//	// Account Prefs	//	std::string			mUsername;	std::string			mPassword;	std::string			mResource;	std::string			mServer;	NumericString		mServerPort;		#ifndef TOQ	bool				mUseSSL;	bool				mSavePassword;	bool				mUseKeychain;#endif	//	// General Prefs	//	bool				mAutoLogin;	bool				mAutoRelogin;#ifndef TOQ	bool				mCheckVersion;		bool				mTimestampsInChat;	bool				mTimestampsInGC;		bool				mAutoAway;	long				mAutoAwayDelay;	bool				mExtendedAutoAway;	long				mExtendedAutoAwayDelay;		bool				mAutoEndAuoAway;#endif		//	// Subscription Prefs	//#ifndef TOQ	PresenceResponse	mResponseIfOnRoster;	PresenceResponse	mResponseIfNotOnRoster;		bool				mAutoSubscribeBack;	std::string			mAutoSubscribeGroup;		bool				mSendRejectionMsg;	std::string			mRejectionMsg;#endif		//	// Roster Prefs	//#ifndef TOQ	RosterMetagroup		mGroupOnline;	RosterMetagroup		mGroupMyResources;	RosterMetagroup		mGroupOffline;	RosterMetagroup		mGroupPending;	RosterMetagroup		mGroupStalkers;	RosterMetagroup		mGroupAgents;		bool				mRosterSortByStatus;		bool				mDoubleClickSendsMsg;#endif		bool				mRosterCloseQuits;		//	// Privacy Prefs	//	bool				mOnlyShowMsgIfOnRoster;		StringList			mBlockJIDList;		//	// Chat Prefs	//#ifndef TOQ	std::string			mDefaultNick;	bool				mChatIgnoreThread;#endif		//	// Groupchat Prefs	//#ifndef TOQ	long				mGroupChatIdleTime;#endif		//	// Event Prefs	//	EventNotify			mEventOnline;	EventNotify			mEventOffline;	EventNotify			mEventStatusChange;	EventNotify			mEventNormalMsg;#ifndef TOQ	EventNotify			mEventChatMsg;	EventNotify			mEventGroupchatMsg;	EventNotify			mEventHeadline;#endif	EventNotify			mEventError;	EventNotify			mEventSubscribeReq;		//	// Color Prefs	//#ifndef TOQ	RGBColor			mColorDefault;	RGBColor			mColorOwn;	RGBColor			mColorServer;	RGBColor			mColorPrivate;	RGBColor			mColorOps;	RGBColor			mColorVoice;#endif		//	// Debug Prefs	//	bool				mShowDebugWindows;	bool				mShowDebugTimestamps;		//	// Hidden Prefs	//#ifdef TOQ	bool				mIncomingMessagesDelayed;#else	bool				mAgentsVisible;	bool				mHistoryVisible;	bool				mRosterVisible;#endif};///- Class declaration ------------------------------------------------------------------#pragma mark PrefsManagerclass PrefsManager{	friend class PrefsDialog;	friend class Profile;	friend class ProfileDialog;	// FIX ME#ifndef _DEBUG_		FIX ME - these friend declarations are evil!#endif		//ÊStatic Data	protected:		static CElementNode*		msXMLPrefsTree;		static PrefsDialog*		msPrefsDialog;		static PrefsRec			msPrefsRec;		static PrefsRec			msBackupPrefsRec;		static bool				msHasKeychain;		static ZFile*			msPrefsFile;					// Static Functions	public:		static void				Init();		static void				Deinit();		static void				DoPrefsDialog();				static const PrefsRec&	GetPrefsRec()		{ return msPrefsRec; }				static bool				HasKeychain()		{ return msHasKeychain; }				static void				SaveWindowPosition( ZWindow * aWindow, short id );		static void				RestoreWindowPosition( ZWindow * aWindow, short id );		static void				OnLogin();		static void				OnLogout();			protected:		static void				Commit();		static void				Restore();		static void				ResetPrefs();		static void				ReadPrefs();		static void				WritePrefs();				static void				ReadFromPrefsTree( const CElementNode* aTree, PrefsRec &prefsRec );		static void				WriteToPrefsTree( CElementNode* aTree, const PrefsRec &prefsRec );				static void				PathSetRGBValue( CElementNode* aTree, const std::string& basePath, const RGBColor& aColor );		static void				PathGetRGBValue( const CElementNode* aTree, const std::string& basePath, RGBColor& aColor, const RGBColor& defaultColor );		static void				PathSetSecretValue( CElementNode* aTree, const std::string& basePath, const std::string& password );		static void				PathGetSecretValue( const CElementNode* aTree, const std::string& basePath, std::string& password );				static void				SyncPrefsDialog();				static bool				WindowOnDesktop( Rect* wFrame );};