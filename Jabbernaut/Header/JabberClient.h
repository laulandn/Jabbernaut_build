///--------------------------------------------------------------------------------------//	File:		JabberClient.h//	Project:	Jabbernaut////	Purpose:	<default>//	Created:	Friday, 2000-04-07//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	(c) 2000-2001 Max Horn <max@quendi.de>////	This program is free software; you can redistribute it and/or modify//	it under the terms of the GNU General Public License as published by//	the Free Software Foundation; either version 2 of the License, or//	(at your option) any later version.//	//	This program is distributed in the hope that it will be useful,//	but WITHOUT ANY WARRANTY; without even the implied warranty of//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//	GNU General Public License for more details.//	//	You should have received a copy of the GNU General Public License//	along with this program; if not, write to the Free Software//	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA, or visit//	<http://www.gnu.org/copyleft/gpl.html> on the World Wide Web.///--------------------------------------------------------------------------------------#pragma once///- Includes ---------------------------------------------------------------------------#include	"ZComrade.h"#include	"BaseClient.h"#include	"ClientConnection.h"///- Class forwards ---------------------------------------------------------------------using namespace MacJLib;///- Constants --------------------------------------------------------------------------typedef enum{	kNoClientState = 0,	kLoginClientState,	kRegisterAccountClientState} ClientState;///- Globals ----------------------------------------------------------------------------///- Prototypes -------------------------------------------------------------------------///- Data Types -------------------------------------------------------------------------///- Class declaration ------------------------------------------------------------------#pragma mark class LoginListenerclass LoginListener{public:	// Listener interface to watch for (dis)connect events.	virtual void		onLogin()	{}	virtual void		onLogout()	{}};typedef std::list<LoginListener>	LoginListenerList;#pragma mark class JabberClientclass JabberClient : public BaseClient{	typedef BaseClient inherited;	//ÊData	protected:		ClientState		mState;		std::string		mSavedMsgID;			// Functions	public:		JabberClient( ClientConnection *conn, JXMLStream* inStream  );		virtual ~JabberClient();			protected:		virtual void	onConnect();		virtual void	onDisconnect();		virtual void	onError( IQErrorMsg &inError );		virtual void	onResult( IQResultMsg &inResult );		virtual void	onMessage( MessageMsg &inMessage );		virtual void	onRoster( RosterMsg &inRoster )			{}		virtual void	onPresence( PresenceMsg &inPresence );		virtual void	onRegister( RegisterMsg &inRegister );		virtual void	onVersion( VersionMsg &inVersion );		virtual void	onTime( TimeMsg &inTime );		virtual void	onAgents( AgentsMsg &inAgentsMsg );		virtual void	onSearch( SearchMsg &inSearchMsg )		{}		virtual void	onUnknownMsg( ParseableNode &unknown );		/**		Hooks to watch the inbound/outbound data.		It is not necessary to override these		*/		virtual void	onDataIn( const char *dataIn, std::size_t len  );		virtual void	onDataOut( const char *dataOut, std::size_t len  );	protected:		};