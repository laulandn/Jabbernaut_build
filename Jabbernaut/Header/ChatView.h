///--------------------------------------------------------------------------------------//	File:		ChatView.h//	Project:	Jabbernaut////	Purpose:	A View derived from ZTextView that implements special features for chats//	Created:	Friday, 2001-01-05//	Authors:	MH - Max Horn <max@quendi.de>////	Copyright:	© 2000-2001 Max Horn, All rights reserved worldwide.///--------------------------------------------------------------------------------------#pragma once///- Includes ---------------------------------------------------------------------------#include	"ZTextView.h"#include	<ctime>#include	<string>///- Class forwards ---------------------------------------------------------------------namespace MacJLib{	class	JID;}class	ZControlView;///- Constants --------------------------------------------------------------------------///- Globals ----------------------------------------------------------------------------///- Prototypes -------------------------------------------------------------------------enum{	kMagicStringChat	= 'Chat'};DEFINECLASSID( ChatView, kMagicStringChat );ZView*		CreateNewChatView( ZView* aParent, Rect* aFrame, const short param );///- Data Types -------------------------------------------------------------------------///- Class declaration ------------------------------------------------------------------#pragma mark ChatViewclass ChatView : public ZTextView{	typedef	ZTextView	inherited;	//ÊData	protected:		ZControlView*	mEditLineItem;			// Methods	public:		ChatView( ZView* aParent, Rect* aFrame );		virtual ~ChatView();		void			AppendChatData( const MacJLib::JID& inJID,										const std::string& message,										const RGBColor& aColor,										bool useTimestamp = true,										std::time_t utcSecs = 0 );		void			ClearChatData();		void			SetEditLineItem( ZControlView* inItem )							{ mEditLineItem = inItem; }		ZControlView*	GetEditLineItem()							{ return mEditLineItem; }		// overrides:			virtual void		BecomeHandler( Boolean isBecoming )	{};//		virtual void		Type( const char theKey, const short modifiers );//		virtual void		SetBounds( Rect* newBounds );//		virtual void		Deactivate();};