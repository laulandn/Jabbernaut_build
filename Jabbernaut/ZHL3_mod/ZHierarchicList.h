// ZHierarchicList -- a hierarchic listview class for MacZoop.//// Conceived and begun December'98 by brk (benk@intranet.ca)//// This code is copyright ©1998-2000 by Ben R. Kennedy, but may be freely used and// modified by Mac developers provided that credit is given to the original author.// See doc file accompanying the archive for details and revision history.#pragma once#include "MacZoop.h"#include "ZGWorld.h"#include "ZDialog.h"#include "ZDialogItem.h"#include "ZObjectArray.cpp"#define _ZHL_REVISION	3	// revision number of this ZHL release// put some of our constants into namespace so that they don't pose conflicts elsewhere,// since so seldomly used.  When they are, simply prepend "zhl::" before the identifier.//namespace zhl {	// configurable options for the list (use SetMode() to get/set)	enum ZHLOpts		{		// selection modes governing how the user can select cells		selNone = 0,				// nothing at all can be selected (!)		selMultiple = (1 << 0),		// allow any number of items selected at once		selOnlyOne = (1 << 1),		// only one item may be selected at a time		selAlways = (1 << 2),		// something always selected (no empty selection)		selNotFolders = (1 << 3),	// folders themselves may not be selected		selNotContents = (1 << 4),	// selecting a folder does not select its contents		selNotByName = (1 << 5),	// disallow selection by typing name at keyboard				// other option flags		optNoIndent = (1 << 15),	// don't indent root folder (non-hierarchic mode)		optSmartHilite = (1 << 16)	// use outline selection hiliting when unfocused		};		// positioning mode for ChooseItem autoscrolling of not-currently-visible cells	enum PosMode		{		posNone = 0,				// don't autoscroll		posMiddle,					// position in middle of listview		posTop,						// position at top of listview		posBottom					// position at bottom of listview		};		}	// namespace#pragma mark ZHLItem// ZHLItem -- items (files, entries, etc) which appear in the list.DEFINECLASSID (ZHLItem, 'ZHLi');class ZHLDialogItem;class ZHLItem : public ZComrade	{	friend class ZHLDialogItem;	friend class ZHLFolder;protected:	long flags;				// various flags (unused)	Boolean isFolder;		// if this is a ZHLFolder, true; plain ZHLItem, false	Str31 title;			// title string as it appears in list	public:	void *ref;				// for public use at the user's whim	ZHLItem (ConstStr31Param p = "\puntitled");	virtual ~ZHLItem();	// various item state adjusters	void *GetRef() { return ref; };	void SetRef (void *r) { ref = r; };	virtual StringPtr GetName() { return title; };	virtual void SetName (ConstStr31Param p);	virtual StringPtr GetNameForSort() { return GetName(); };protected:		// doing the graphics	virtual void DrawCell (Rect& r, ZHLDialogItem *);	// notification methods for optional further action	virtual void Select (Boolean onoff, ZHLDialogItem *) {};	virtual void Click (short modifiers, ZHLDialogItem *) {};	virtual void DoubleClick (short modifiers, ZHLDialogItem *) {};	virtual void ContextualMenuClick (const Point where) {};	virtual bool IsSelectable (ZHLDialogItem *) { return true; };	virtual bool CustomBackgroundColour(RGBColor &color, ZHLDialogItem *) { return false; };	};#pragma mark ZHLItemList, etc.// ZHLItemList -- linked list (ZObjectArray) of items in a folder.////typedef ZObjectArray<ZHLItem> ZHLItemList;//class ZHLItemList : public ZObjectArray<ZHLItem>class ZHLItemList : public ZObjectList	{public:	void Duplicate (ZHLItemList& source);	};// deriving from ZObjectList will make smaller code// at the expense of needing to typecast everythingshort ZHLItemCompare (void *, void *, const long);#pragma mark ZHLFolder// ZHLFolder -- folders (groups, hierarchies, etc) which can contain items.DEFINECLASSID (ZHLFolder, 'ZHLf');class ZHLFolder : public ZHLItem	{	friend class ZHLDialogItem;protected:		ZHLItemList items;			// the items it contains	SortCmpProcPtr compareFunc;	// comparison proc for sorting items in all folders	long sortRef;				// reference constant passed to the sort proc	public:	ZHLFolder (ConstStr31Param p = "\puntitled");	~ZHLFolder();	// item maintenance functions	virtual void AddItem (ZHLItem *, long where = 0);	virtual void RemoveItem (ZHLItem *);	void DisposeItem (ZHLItem *o) { RemoveItem(o); delete o; };	void DisposeRecursively();	void RemoveAllItems()	{ items.DeleteAll(); };	long CountItems() { return items.CountItems(); };	ZHLItem *GetItem (long n) { return (ZHLItem*) items.GetObject (n); };	long GetIndex (ZHLItem *o) { return items.FindIndex (o); };	virtual void SetSort (SortCmpProcPtr f, long ref = NULL);	protected:	// folder state -- called by list object when the event happens	virtual void Open (ZHLDialogItem*) {};	virtual void Close (ZHLDialogItem*) {};	// overrides	virtual void DrawCell (Rect& r, ZHLDialogItem*);	virtual void DoubleClick (short modifiers, ZHLDialogItem*);	virtual bool IsSelectable (ZHLDialogItem *);	// internal methods	void Enumerate (ZHLDialogItem*, char);	};#pragma mark ZHLDialogItem// ZHLDialogItem --	the actual list dialog item for ZAdvancedDialog.DEFINECLASSID (ZHLDialogItem, 'ZHLd');class ZHLDialogItem : public ZDialogItem	{	friend pascal void ZHLScrollActionProc (ControlHandle, ControlPartCode);	friend class ZHLMaster;	friend class ZHLItem;	friend class ZHLFolder;protected:	Boolean leaveRoomForGrowbox;	Boolean smallScrollbar;	Boolean dynamicScrollbar;	ZDialog *theDialog;			// into which this is embedded	ControlHandle scrollBar;	// the scroll bar	ControlHandle discTri;		// our dynamically usable disclosure triangle	PixMapHandle triOpen, triClosed;	// images of it in open and shut states	ZGWorld *listZGW;			// back buffer for list contents	Rect listBounds;	long listHeight, rowHeight, drawOfs, visiCells, firstCell;	RgnHandle rgn1, rgn2, rgn3;	Boolean folderAnimate;		// examined by folder's OpenClose method	Boolean drawing;			// draw changes to the screen? (re-render list)?	UInt32 listOptionFlags;		// flags controlled by SetMode() with above defines	Str15 searchStr;			// for finding items in a list by type-selection	long lastKeyTime;			// time last key was typed	short keyThresh;			// reset threshold for typing		ZHLFolder *rootFolder;		// the root directory, as it were	Boolean willDelRoot;		// dispose of the root folder on cleanup?	ZHLItemList listVisible;	// ordered list of all potentially visible cells	ZHLItemList listSelected;	// unordered list of all currently-selected items	ZHLItemList listOldSelected;	// temp list of items previously selected	ZHLItemList listOpenFolders;	// list of all member folders which are open	unsigned char *nestLevel;	// array of 8-bit quantities corresponding to listVisible	long nestLevelSize;			// current size of nestLevel buffer	ZHLItem *lastItem;			// item most recently clicked with mouse (dblclick test)	ZHLItem *rangeFirst, *rangeLast;	// bounds of most recently selected range	public:	ZHLDialogItem (ZDialog*, const short);	~ZHLDialogItem();		// MacZoop standard overrides	virtual void InitItem (short, const long[]);	virtual void SetBounds (Rect *);	virtual void DrawItem (void);	virtual void DoHilightSelection (Boolean);	virtual void Enable (Boolean);	virtual void Disable (Boolean);	virtual void Click (const Point, const short);	virtual void Type (const char theKey, const short modifiers);	virtual void ReceiveMessage ( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData );	virtual void ContextualMenuClick (const Point);	// MacZoop command handling	virtual void DoCopy() { itsBoss->DoCopy(); };	virtual void DoCut() { itsBoss->DoCut(); };	virtual void DoClear() { itsBoss->DoClear(); };	virtual void DoPaste() { itsBoss->DoPaste(); };	virtual void DoSelectAll (void);	virtual void UpdateMenus (void);	// manipulation of list appearance behaviour	void SetModes (UInt32 sel) { listOptionFlags = sel; };	long GetModes() { return listOptionFlags; };	void SetListFont (short font, short size, short rowheight = 0);	Boolean DrawingActive (Boolean mode)		{ Boolean b = drawing; drawing = mode; return b; };	Boolean DrawingActive() { return drawing; };	virtual void RefreshListContents();	// root folder access and reinitialization	ZHLFolder *GetRootFolder() { return rootFolder; };	void AttachRootFolder (ZHLFolder *newRootFolder, Boolean autoDel = false);	virtual void ResetAndClearList();	// item selection and folder manipulation	virtual Boolean OpenFolder (ZHLFolder *o, Boolean opening);	virtual void ChooseItem (ZHLItem *o, short modifiers = NULL, short position = zhl::posMiddle);	virtual void SelectItem (ZHLItem *o, Boolean select);	virtual void SelectNone();	Boolean IsOpen (ZHLFolder *o);	Boolean IsSelected (ZHLItem *o);	long TotalSelected();	ZHLItem *GetSelection (long n);	virtual void NotifyRemoval (ZHLItem *o);protected:	// private funcs for list rendering	virtual void DrawListContents();	void RenderToScreen();	virtual inline void SetBackgroundColour (ZHLItem *o);	virtual inline void SetPlainBackgroundColour ();	virtual inline void DrawRowSeparator (short ax, short ay, short bx, short by);	virtual void EnumerateThis (ZHLItem *, char);	// private utilities	void AddSelectRecursively (ZHLItem *o);	void FlushSelection();	void OpenCloseAnimate (ZHLFolder *o, Boolean opening);	Boolean DoDisclosureTri (Boolean forreal, Boolean opening, Rect &t);	inline void SetTriRect (short, Rect&, Rect*);	Boolean FindItemListRect (ZHLItem *o, Rect *r, Rect*t);		};// ZHLDialogItem allocates a char array equal in size to the number of disclosed// (potentially visible) items it contains, in order to store nest level (indentation)// information for each.  This define sets the initial/default size for this array;// if more space is needed, it will be allocated in multiples of this amount.// If you KNOW your lists will have way more than 512 entries all the time, you could// increase this to an appropriate amount, but there's probably no need.//#define LIST_ENTRIES_INCREMENT	512// messages sent/received within our joint//enum {	zhlItemAdded = 'ZHL0',		// sender = ZHLDialogItem*; data = ZHLItem*	zhlItemRemoved,				// sender = ZHLDialogItem*; data = ZHLItem*	zhlItemSelected,			// sender = ZHLDialogItem*; data = ZHLItem*	zhlItemUnselected,			// sender = ZHLDialogItem*; data = ZHLItem*	zhlSelectCount,				// sender = ZHLDialogItem*; data = long	zhlItemClicked,				// sender = ZHLDialogItem*; data = ZHLItem*	zhlItemDoubleClicked,		// sender = ZHLDialogItem*; data = ZHLItem*	zhlFolderOpened,			// sender = ZHLDialogItem*; data = ZHLFolder*	zhlFolderClosed,			// sender = ZHLDialogItem*; data = ZHLFolder*	zhlFolderSorted				// sender = ZHLDialogItem*; data = ZHLFolder*	};#pragma mark ZHLMaster// ZHLMaster - global object which keeps track of all ZHL's.typedef ZObjectArray<ZHLDialogItem> ZHLDialogItemList;class ZHLMaster	{	friend class ZHLDialogItem;	ZHLDialogItemList allZHL;			// list of all active ZHL objects	SInt16 pixelDepth;					// for Appearance stuff	Boolean isColourDevice;				// for Appearance stuff	ControlActionUPP scrollActionUPP;	// callback for handling scroll barspublic:	ZHLMaster();	~ZHLMaster();	void RedrawIfVisible (ZHLItem *o);	// refresh display if this is visible	void RefreshFolderEvent (long, ZHLFolder *o, ZHLItem *p);		};extern ZHLMaster gZHLMaster;			// declared in the code proper