/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		MacJLibPrefix.h *  Created:	2000-06-14 *  Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once// Define USE_MACJLIB_NS to 1 if you want to put all MacJLib code into namespace MacJLib#ifndef USE_MACJLIB_NS  #define USE_MACJLIB_NS			1#endif// Define USE_MAC_ROUTINES to 1 if you want to use native macintosh routines to//	perform various tasks. Otherwise, it will use plain Std-C lib#ifndef USE_MAC_ROUTINES  #define USE_MAC_ROUTINES			1#endif// Define USE_MAC_ZOOP to 1 if you want MacJLib to use MacZoop for error handling etc.#ifndef USE_MAC_ZOOP  #define USE_MAC_ZOOP				0#endif// Define AUTOMATIC_UTF8 to 1 if you want MacJLib to automatically translate between//	mac encoding and UTF-8#ifndef USE_AUTOMATIC_UTF8  #define USE_AUTOMATIC_UTF8		1#endif// Define USE_NATIVE_UTF8 to 1 to use a native implementation of the UTF8 converter, if available#ifndef USE_NATIVE_UTF8  #define USE_NATIVE_UTF8			1#endif// Define MACJLIB_DEBUG to 1 to activate additional debug checks#ifndef MACJLIB_DEBUG  #define MACJLIB_DEBUG				1#endif#if USE_MAC_ZOOP	#include	"MacZoop.h"#endif#if USE_MACJLIB_NSnamespace MacJLib {#endif  #if USE_MAC_ZOOP	typedef ZoopError	MacJLibError;  #else	typedef long		MacJLibError;  #endif	const MacJLibError noError	= 0;#if USE_MACJLIB_NS}#endif// ASSERT macros- handy for debugging. For "final" code, ASSERT maps to nothing so no overhead// incurred within code by the checks made.// <r> is a reason string, (C string), which is usually written as a literal- since it's only// for debugging, there is no need to use resources or pascal formatted strings.// <x> is an expression that evaluates to a Boolean. If FALSE, the assertion fails with a call// to the debugger (if USE_MAC_ZOOP is enabled, MacZoop handles it). If TRUE, execution continues.#if MACJLIB_DEBUG  #if USE_MAC_ZOOP	#define MJ_ASSERT(r, x)			ASSERT( r, x, 0 )  #else	#define MJ_ASSERT(r, x)			if ( !( x )) { MJ_AssertError( __LINE__, __FILE__, r ); };	extern void MJ_AssertError( long lineNo, char* srcFile, char* reason );  #endif#else	#define MJ_ASSERT(r, x)#endif