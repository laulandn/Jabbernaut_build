/*Copyright (C) 2000  Chris BehmThis library is free software; you can redistribute it and/ormodify it under the terms of the GNU Lesser General PublicLicense as published by the Free Software Foundation; eitherversion 2.1 of the License, or (at your option) any later version.This library is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNULesser General Public License for more details.You should have received a copy of the GNU Lesser General PublicLicense along with this library; if not, write to the Free SoftwareFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USAContact Chris Behm at cjbehm@mail.comThe GNU LGPL is also readable at http://www.gnu.org/copyleft/lesser.html*/#pragma once#include	"MacJLibPrefix.h"#if USE_MACJLIB_NSnamespace MacJLib {#endif#define kDefaultBuf		1024/** Errors that can be returned when dealing with buffer functions*/enum BufErrors{	kBufNoErr		= 0,	kBufWasLocked	= -1,	kBufWasFull		= -2,	kBufMissing		= -3};enum ConnectionState{	kConnectionStateDisconnected	= -1,	kConnectionStateDisconnecting,	kConnectionStateConnected,	kConnectionStateConnecting};class ClientConnection{	/**	 Networking abstraction class. Clients create a subclass of this that	 implements networking services	*/	protected:		long	mExtraErrorInfo;	public:		ClientConnection();		virtual ~ClientConnection();		virtual long	houseKeeping();				/** Perform initialization functions that can return errors here */		virtual long	initializeConn() = 0;				/** Attempt to open a connection at 'server' on 'port' */		virtual long	openConn( const char *server, unsigned short port ) = 0;		virtual long	closeConn() = 0;		virtual ConnectionState getConnectionState() = 0;				/** Returns the number of bytes available */		virtual bool	isDataAvail() = 0;		virtual long	readBytes( char *buf, long maxSize ) = 0;		virtual long	writeBytes( const char *buf, long bufSize ) = 0;		virtual bool	locked();		virtual bool	lock();		virtual void	unlock();				long			getExtraErrors();		virtual char	*errorToCStr( long errNo );};#if USE_MACJLIB_NS}#endif