/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		JID.h *  Created:	2000-05-10 *  Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include	"MacJLibPrefix.h"#include	<string>#include	<cstdlib>#if USE_MACJLIB_NSnamespace MacJLib{#endifconst char kUsernameMaxLen		= 64;		//usernames may only be 64 characters longconst char kServernameMaxLen	= 255;class JID{protected:	std::string		mUsername;	std::string		mServer;	std::string		mResource;	std::string		mFull;public:	JID();	explicit JID( const JID &aJID );	JID( const char *full );	JID( const std::string &full );	JID( const std::string &username, const std::string &server, const std::string &res );		const std::string&	getUsername() const;	void				setUsername( const std::string& iUser );	const std::string&	getServer() const;	void				setServer( const std::string& iServer );	const std::string&	getResource() const;	void				setResource( const std::string& iResource );	bool				hasResource() const;		const std::string&	getFull() const						{ return mFull; }	void				setFull( const std::string& iFull )	{ parseFull( iFull ); }			bool				empty() const;	std::size_t			size() const;	const char			*c_str() const;	//	operator const char*() const							{ return c_str(); }//	operator const std::string&() const						{ return mFull; }		const JID&			operator=( const JID& aJID );	const JID&			operator=( const char *full );	const JID&			operator=( const std::string &full );		int					operator==( const JID& aJID ) const;	int					operator!=( const JID& aJID ) const;		int					compare( const JID& aJID ) const;	int					strictCompare( const JID& aJID ) const;protected:	void				parseFull( const std::string& full );	void				buildFull();};extern const JID	emptyJID;#if USE_MACJLIB_NS}#endif