/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		NumericString.h *  Created:	2000-04-15 *  Authors:	MH - Max Horn <max@quendi.de> *				CB - Chris Behm <cjbehm@mail.com> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include <string>#include <cstdlib>class NumericString{protected:	long	mValue;	char	mStorage[12];	public:	NumericString()							{ setValue( 0L ); }	NumericString( long aLong )				{ setValue( aLong ); }	NumericString( const char *aStr )		{ setValue( aStr ); }		bool			empty() const	{ return (mValue == 0); }	long			size() const	{ return std::strlen(mStorage); }	const char		*c_str() const	{ return mStorage; }		operator long()	const									{ return mValue; }	operator const char*() const							{ return c_str(); }		long operator=( const NumericString& aNumericString )	{ setValue( aNumericString.mValue ); return mValue; }	long operator=( long aLong )							{ setValue( aLong ); return mValue; }	long operator=( const char *aStr )						{ setValue( aStr ); return mValue;}		operator==( const NumericString& aNumericString ) const	{ return (mValue == aNumericString.mValue); }	operator!=( const NumericString& aNumericString ) const	{ return (mValue != aNumericString.mValue); }	operator<=( const NumericString& aNumericString ) const	{ return (mValue <= aNumericString.mValue); }	operator>=( const NumericString& aNumericString ) const	{ return (mValue >= aNumericString.mValue); }	operator<( const NumericString& aNumericString ) const	{ return (mValue < aNumericString.mValue); }	operator>( const NumericString& aNumericString ) const	{ return (mValue > aNumericString.mValue); }	operator==( long aNum ) const	{ return (mValue == aNum); }	operator!=( long aNum ) const	{ return (mValue != aNum); }protected:	inline void		setValue( long value );	inline void		setValue( const char *aStr );};inline void	NumericString::setValue( long value ){	mValue = value;	if( mValue == 0 )		mStorage[0] = '\0';		else		std::sprintf( mStorage, "%ld", mValue );}inline void	NumericString::setValue( const char *aStr ){	mValue = std::atol(aStr);	if( mValue == 0 )		mStorage[0] = '\0';		else		std::sprintf( mStorage, "%ld", mValue );}