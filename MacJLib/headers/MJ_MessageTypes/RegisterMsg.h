/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		RegisterMsg.h *  Created:	2000-04-01 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include "BaseIQMsg.h"#if USE_MACJLIB_NSnamespace MacJLib {#endifstruct RegisterMsgHeader : BaseIQMsgHeader{	std::string instructions;	std::string username;	std::string nick;	std::string password;	std::string name;	std::string first;	std::string last;	std::string email;	std::string address;	std::string city;	std::string state;	std::string zip;	std::string phone;	std::string url;	std::string date;	std::string misc;	std::string text;	std::string key;};#pragma mark class RegisterMsgclass RegisterMsg : public BaseIQMsg{	public:		enum RequiredFieldFlags		{			kReqUsername	= 0,			kReqNick,			kReqPassword,			kReqName,			kReqFirst,			kReqLast,			kReqEmail,			kReqAddress,			kReqCity,			kReqState,			kReqZip,			kReqPhone,			kReqUrl,			kReqDate,			kReqMisc,			kReqText,						kReqSize		};			protected:		std::string		mInstructions;		std::string		mKey;		bool			mRegistered;		bool			mRemove;		std::string		mElementsField[kReqSize];		bool			mRequiredFlagField[kReqSize];	public:				RegisterMsg();		RegisterMsg( const RegisterMsgHeader *pRgHdr );		RegisterMsg( const CElementNode& iq );		explicit RegisterMsg( const RegisterMsg& pRgMsg );		virtual ~RegisterMsg();				const std::string	&getInstructions() const;		const std::string	&getUsername() const;		const std::string	&getNick() const;		const std::string	&getPassword() const;		const std::string	&getName() const;		const std::string	&getFirst() const;		const std::string	&getLast() const;		const std::string	&getEmail() const;		const std::string	&getAddress() const;		const std::string	&getCity() const;		const std::string	&getState() const;		const std::string	&getZip() const;		const std::string	&getPhone() const;		const std::string	&getURL() const;		const std::string	&getDate() const;		const std::string	&getMisc() const;		const std::string	&getText() const;		const std::string	&getKey() const;				RegisterMsg			*makeReply() const;		bool				isRegistered() const;		void				setRemove( bool remove );				void				getRequiredFlags( bool inFlagField[kReqSize] ) const;		void				getElements( std::string elementsField[kReqSize] ) const;		void				setElements( const std::string elementsField[kReqSize] );				Ptr					toXML() const;		long				size() const;	protected:		virtual void		visitQueryNode( const CElementNode& aNode );		virtual std::string	getXMLNS() const							{ return msXMLNS; }	public:		static const std::string	msXMLNS;};#pragma mark class RegisterTagHandlertypedef IQTagHandler<RegisterMsg>	RegisterTagHandler;#if USE_MACJLIB_NS}#endif