/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		BaseMsg.h *  Created:	2000-??-?? *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include	"MacJLibPrefix.h"#include	"JID.h"#include	"MacJLibUtils.h"#include	"MsgAttachment.h"#include	"NumericString.h"#include	"ParseableNode.h"#include	"XML_Utils.h"#include	<string>#if USE_MACJLIB_NSnamespace MacJLib {#endifstruct BaseMsgHeader{	JID			to;	JID			from;	std::string	id;	std::string	type;};class BaseMsg : public ParseableNode{	public:		BaseMsg();		BaseMsg( const BaseMsgHeader *pMOHdr );		BaseMsg( const CElementNode& pNode );		explicit BaseMsg( const BaseMsg& pMsgObj );		virtual ~BaseMsg();				long					getRefCon() const;		void					setRefCon(long refcon);		void					setTo( const JID &iTo );		const JID				&getTo() const;		void					setFrom( const JID &iFrom );		const JID				&getFrom() const;		void					setID( const std::string &iID );		const std::string		&getID() const;				void					setType( const std::string &iType );		const std::string		&getType() const;		const long				getErrorType() const;		const std::string		&getErrorMessage() const;				std::time_t				getTimeStamp() const;		void					setTimeStamp( std::time_t t );		const AttachmentList	&attachments() const									{return mAttachments;}		void					addAttachment( ParseableNode * attachment)									{mAttachments.push_back(attachment);}		void					removeAttachment(ParseableNode * attachment)									{mAttachments.remove(attachment);}		//allocate and return a Ptr that is an XML representation of this object		virtual Ptr				toXML() const = 0;		virtual long			size() const = 0;	protected:		void					stdAttribsAppend( Ptr xmlStr ) const;		long					stdAttribsSize() const;				// subclasses should override this:		virtual void			visitNode( const CElementNode& aNode );	protected:		long					mRefCon;		JID						mTo;		JID						mFrom;		std::string				mID;		std::string				mType;		// the following two are only set if the message contained a <error> tag		NumericString			mErrorType;		std::string				mErrorMessage;				std::time_t				mTimestamp;				AttachmentList			mAttachments;};#if USE_MACJLIB_NS}#endif