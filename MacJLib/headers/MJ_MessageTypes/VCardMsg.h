/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		VCardMsg.h *  Created:	2000-08-21 *  Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include	"BaseIQMsg.h"#include	"MacJLibUtils.h"#if USE_MACJLIB_NSnamespace MacJLib {#endiftypedef	struct VCard_NAME{	std::string	familiy;	std::string	given;	std::string	middle;	std::string	prefix;	std::string	suffix;} VCard_NAME;typedef	struct VCard_ADR{	unsigned	home		: 1;	unsigned	work		: 1;	unsigned	postal		: 1;	unsigned	parcel		: 1;//	(DOM | INTL)?, 	unsigned	pref		: 1;	std::string	pobox;	std::string	extadr;	std::string	street;	std::string	locality;	std::string	region;	std::string	pcode;	std::string	ctry;} VCard_ADR;typedef	struct VCard_LABEL{	unsigned	home		: 1;	unsigned	work		: 1;	unsigned	postal		: 1;	unsigned	parcel		: 1;//	(DOM | INTL)?, 	unsigned	pref		: 1;	StringList	lines;} VCard_LABEL;typedef	struct VCard_TEL{	unsigned	home	: 1;	unsigned	work	: 1;	unsigned	voice	: 1;	unsigned	fax		: 1;	unsigned	pager	: 1;	unsigned	msg		: 1;	unsigned	cell	: 1;	unsigned	video	: 1;	unsigned	bbs		: 1;	unsigned	modem	: 1;	unsigned	isdn	: 1;	unsigned	pcs		: 1;	unsigned	pref	: 1;	std::string	number;} VCard_TEL;typedef	struct VCard_EMAIL{	unsigned	home		: 1;	unsigned	work		: 1;	unsigned	internet	: 1;	unsigned	X400		: 1;	std::string	userid;} VCard_EMAIL;typedef std::list<VCard_ADR>	VCard_ADR_list;typedef std::list<VCard_LABEL>	VCard_LABEL_list;typedef std::list<VCard_TEL>	VCard_TEL_list;typedef std::list<VCard_EMAIL>	VCard_EMAIL_list;typedef struct VCARD{	std::string 		fullName;	VCard_NAME			name;	StringList			nickName;	// <!ELEMENT PHOTO ((TYPE, BINVAL) | EXTVAL)>	std::string			bday;	VCard_ADR_list		adrList;	VCard_LABEL_list	labelList;	VCard_TEL_list		telList;	VCard_EMAIL_list	emailList;/*  <!-- Mailer (e.g., Mail User Agent Type) property. -->  <!ELEMENT MAILER (#PCDATA)>    <!-- Time zone's Standard Time UTC offset. Value must be an    ISO 8601 formatted UTC offset. -->  <!ELEMENT TZ (#PCDATA)>    <!-- Geographical position. Values are the decimal degress of    LATitude and LONgitude. The value should be specified to six decimal places.-->  <!ELEMENT GEO (LAT, LON)>      <!-- Latitude value. -->    <!ELEMENT LAT (#PCDATA)>	    <!-- Longitude value. -->    <!ELEMENT LON (#PCDATA)>	  <!-- Title property. -->  <!ELEMENT TITLE (#PCDATA)>  <!-- Role property. -->  <!ELEMENT ROLE (#PCDATA)>    <!-- Organization logo property. -->  <!ELEMENT LOGO ((TYPE, BINVAL) | EXTVAL)>    <!-- Administrative agent property. -->  <!ELEMENT AGENT (VCARD | EXTVAL)>    <!-- Organizational name and units property. -->  <!ELEMENT ORG (ORGNAME, ORGUNIT*)>      <!ELEMENT ORGNAME (#PCDATA)>      <!ELEMENT ORGUNIT (#PCDATA)>    <!-- Application specific categories property. -->  <!ELEMENT CATEGORIES (KEYWORD+)>      <!ELEMENT KEYWORD (#PCDATA)>    <!-- Commentary note property. -->  <!ELEMENT NOTE (#PCDATA)>    <!-- Identifier of product that generated the vCard property. -->  <!ELEMENT PRODID (#PCDATA)>    <!-- Last revised property. The value must be an ISO 8601 formatted UTC date/time. -->  <!ELEMENT REV (#PCDATA)>    <!-- Sort string property. -->  <!ELEMENT SORTSTR (#PCDATA)>    <!-- Formatted name pronunciation property. The value is either a textual phonetic    pronunciation, a BASE64 encoded binary digital audio pronunciation or a URI to    an external binary digital audio pronunciation.-->	  <!ELEMENT SOUND (PHONETIC | BINVAL | EXTVAL)>      <!-- Textual phonetic pronunciation. -->    <!ELEMENT PHONETIC (#PCDATA)>     <!-- Unique identifier property. -->  <!ELEMENT UID (#PCDATA)>    <!-- Directory URL property. -->  <!ELEMENT URL (#PCDATA)>    <!-- Privacy classification property. -->  <!ELEMENT CLASS (PUBLIC | PRIVATE | CONFIDENTIAL)>      <!ELEMENT PUBLIC EMPTY>	    <!ELEMENT PRIVATE EMPTY>	    <!ELEMENT CONFIDENTIAL EMPTY>	  <!-- Authentication credential or encryption  key property. -->  <!ELEMENT KEY (TYPE?, CRED)>      <!ELEMENT CRED (#PCDATA)>*/} VCARD;struct VCardMsgHeader : BaseIQMsgHeader{	VCARD	vcard;};class VCardMsg : public BaseIQMsg{	protected:	public:		VCardMsg();		VCardMsg( const VCardMsgHeader *iVCardMsgHeader );		VCardMsg( const CElementNode& iq, const CElementNode& iNode );		explicit VCardMsg( const VCardMsg& iVCardMsg );		virtual ~VCardMsg();				Ptr toXML() const;		long size() const;};#if USE_MACJLIB_NS}#endif