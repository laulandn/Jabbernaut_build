/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		AuthMsg.h *  Created:	2000-??-?? *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include "BaseIQMsg.h"#if USE_MACJLIB_NSnamespace MacJLib {#endifstruct AuthMsgHeader : BaseIQMsgHeader{	std::string			username;	std::string			password;	std::string			resource;};#pragma mark class AuthMsgclass AuthMsg : public BaseIQMsg{	protected:		std::string		mUsername;		std::string		mPassword;		std::string		mResource;	public:		AuthMsg();		AuthMsg( const AuthMsgHeader *pAuthHeader );		explicit AuthMsg( const AuthMsg& pAuth );		virtual ~AuthMsg();				void				setUsername( const std::string &iUsername );		const std::string	&getUsername() const;		void				setPassword( const std::string &iPassword );		const std::string	&getPassword() const;		void				setResource( const std::string &iResource );		const std::string	&getResource() const;		Ptr					toXML() const;		long				size() const;	protected://		virtual void		visitQueryNode( const CElementNode& aNode );		virtual std::string	getXMLNS() const							{ return msXMLNS; }	public:		static const std::string	msXMLNS;};/*#pragma mark class AuthTagHandlerclass	AuthTagHandler : public IQTagHandler{	bool		MatchNS( const std::string& ns )					{ return ns == AuthMsg::msXMLNS; }	BaseMsg*	Process( const CElementNode& iq )					{ return new AuthMsg( iq ); }};*/#if USE_MACJLIB_NS}#endif