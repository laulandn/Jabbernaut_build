/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		BaseIQMsg.h *  Created:	2000-04-01 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include	"BaseMsg.h"#include	"TagHandler.h"#if USE_MACJLIB_NSnamespace MacJLib {#endifstruct BaseIQMsgHeader : BaseMsgHeader{};#pragma mark class BaseIQMsgclass BaseIQMsg : public BaseMsg{	public:		BaseIQMsg();		explicit BaseIQMsg( const BaseIQMsg& pQuery );		BaseIQMsg( const CElementNode& pNode );		BaseIQMsg( const BaseIQMsgHeader *IQHdr );		virtual ~BaseIQMsg();	protected:		virtual void		visitNode( const CElementNode& aNode );		virtual void		visitQueryNode( const CElementNode& aNode ) {};		// override this to return the namespace (or an empty string)		virtual std::string	getXMLNS() const = 0;};#pragma mark class IQTagHandlertemplate<class T>class IQTagHandler : public TagHandler{protected:	virtual bool	Match( const CElementNode& inTag )					{						if( inTag.GetName() == "iq" )						{							CElementNode	*curNode;							for( CNodeList::const_iterator X = inTag.ChildNodes().begin();X != inTag.ChildNodes().end();++X)							{								curNode = dynamic_cast<CElementNode *>(*X);								if( curNode )								{									if( ("query" == curNode->GetName() ) &&										(T::msXMLNS == curNode->AttribVal("xmlns") ))										return true;								}							}						}						return false;					}	ParseableNode*	Process( const CElementNode& inTag )	{ return new T( inTag ); }};#if USE_MACJLIB_NS}#endif