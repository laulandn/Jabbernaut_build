/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		JXMLStream.h *  Created:	2000-06-13 *  Authors:	CB - Chris Behm <cbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#pragma once#include	"MacJLibPrefix.h"#include	"Node.h"#include	"TagHandler.h"#include	<string>#if USE_MACJLIB_NSnamespace MacJLib{#endifclass BaseMsg;class ParseableNode;class TagHandler;#pragma mark class JXMLStreamclass JXMLStream{	public:		virtual void				OpenStream() = 0L;		virtual void				CloseStream() = 0L;				virtual void				ParseStream( const char* inStream, const std::size_t inLength ) = 0L;		virtual void				ParseStream( const std::string& inStream ) = 0L;				virtual ParseableNode*		GetNextMessage() = 0L;		virtual const std::string&	GetSessionID()	{ return mSessionID; }		virtual bool				IsOpen()		{ return mStreamOpen; }				inline void					AddTagHandler( TagHandler *inTagHandler );		inline void					AddAttachmentHandler( TagHandler *inTagHandler );	protected:		ParseableNode*				ParseNode( const CElementNode& inTag ) const;		bool						mStreamOpen;		std::string					mSessionID;	private:		TagHandlerList				mMsgTagHandlers;		TagHandlerList				mAttachmentTagHandlers;		void TryToMakeAttachmen( const CElementNode& inTag, BaseMsg* msg ) const;};inline void JXMLStream::AddTagHandler( TagHandler *inTagHandler ){	MJ_ASSERT( "inTagHandler == NULL", inTagHandler != NULL )		mMsgTagHandlers.push_back( inTagHandler );}inline void JXMLStream::AddAttachmentHandler( TagHandler *inTagHandler ){	MJ_ASSERT( "inTagHandler == NULL", inTagHandler != NULL )		mAttachmentTagHandlers.push_back( inTagHandler );}#if USE_MACJLIB_NS}#endif