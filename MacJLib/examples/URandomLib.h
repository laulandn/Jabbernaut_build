// Header for URandomLib#pragma once#ifndef __TYPES__	#include <Types.h>	// to define Boolean#endifclass URandomLib {public:	URandomLib(); 	~URandomLib() {};/******* Function                          Return value *****************/      	long ULong32();							// U[-2147483648, 2147483647] 	long ULong31();							// U[0, 2147483647] 	short UShort16();							// U[-32768, 32767] 	short UShort15();							// U[0,32767] 	short UShort8();							// (short) U[-128, 127] 	short UShort8u();							// (short) U[0, 255] 	short UShort7();							// (short) U[0, 127] 	Boolean UBoolean();						// true or false	float Uniform_0_1();						// U(0,1) with >= 25-bit mantissa 	float Uniform_m1_1();					// U(-1,1) but excluding zero 	double DUniform_0_1();					// U[0,1) with <= 63-bit mantissa 	double DUniform_m1_1();					// U(-1,1) with <= 63-bit mantissa 	float Normal(float mu, float sigma);// Normal(mean, std. dev. > 0) 	float Expo(float lambda);				// Exponential(lambda > 0) 	Boolean SaveStart(char *pathname = nil);	Boolean RecallStart(char *pathname = nil); 	void 	Initialize(unsigned long seed1 = 0, unsigned long seed2 = 0);private:	void 				Refill();				// low-level core routine	struct {		double			gauss;		unsigned long	FSR[37], SWB[37], brw, seed1, seed2;		long				bits;		short				byt, bit;		char				*ptr;	} Ultra_Remember;	// to restart PRNG from a known beginning	double			Ultra_2n63, Ultra_2n31, Ultra_2n7,						Ultra_gauss;					// remaining gaussian variate	unsigned long	Ultra_seed2;	long				Ultra_bits;						// bits for UBoolean	short				Ultra_bit;						// # bits left in bits};static URandomLib	PRNG;