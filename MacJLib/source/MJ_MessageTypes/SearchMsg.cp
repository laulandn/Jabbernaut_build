/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		SearchMsg.cp *  Created:	2000-11-06 *	Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"SearchMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib{#endifconst std::string SearchMsg::msXMLNS("jabber:iq:search");SearchMsg::SearchMsg() : BaseIQMsg(){}SearchMsg::SearchMsg( const JID &inJID ) : BaseIQMsg(){	mTo = inJID;}SearchMsg::SearchMsg( const CElementNode &inIQ ) : BaseIQMsg( inIQ ){}SearchMsg::~SearchMsg(){}#pragma mark -Ptr SearchMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				for( SearchItemList::const_iterator X = mSearchItems.begin(); X != mSearchItems.end(); ++X )			X->appendXML( xmlStr );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long SearchMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>		for( SearchItemList::const_iterator X = mSearchItems.begin(); X != mSearchItems.end(); ++X )		len += X->size();		return len;}#pragma mark -void SearchMsg::visitQueryNode( const CElementNode& aNode ){	if( aNode.GetName() == "key" )		TagToString( aNode, mKey );	else if( aNode.GetName() == "instructions" )		TagToString( aNode, mInstructions );	else if( aNode.GetName() == "item" )		mSearchItems.push_back( SearchItem( aNode ) );	else		BaseIQMsg::visitQueryNode( aNode );}#if USE_MACJLIB_NS}#endif