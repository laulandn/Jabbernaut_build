/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		PresenceMsg.cp *  Created:	2000-??-?? *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"PresenceMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifPresenceMsg::PresenceMsg() : BaseMsg(){}PresenceMsg::PresenceMsg( const PresenceMsg& iPres ) : BaseMsg( iPres ){	mStatus = iPres.mStatus;	mShow = iPres.mShow;	mPriority = iPres.mPriority;}PresenceMsg::PresenceMsg( const PresenceMsgHeader *iPresHdr ) : BaseMsg( iPresHdr ){	MJ_ASSERT( "iPresHdr==NULL", iPresHdr!=NULL )	mStatus = iPresHdr->status;	mShow = iPresHdr->show;	mPriority = iPresHdr->priority;}PresenceMsg::PresenceMsg( const CElementNode& iNode ) : BaseMsg( iNode ){	// The following is there to make the live of client authors easier	if( mType.empty() )		mType = "available";}PresenceMsg::~PresenceMsg(){}#pragma mark -Ptr PresenceMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;	xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<presence");		stdAttribsAppend( xmlStr );		strcat(xmlStr,">");				tag_strcat( xmlStr, "status", mStatus );		tag_strcat( xmlStr, "show", mShow );		tag_strcat( xmlStr, "priority", mPriority.c_str() );				strcat(xmlStr,"</presence>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long PresenceMsg::size() const{	long len = 9;					//<presence	len += stdAttribsSize();	len++;							//>	len += tag_strlen( "status", mStatus );	len += tag_strlen( "show", mShow );	len += tag_strlen( "priority", mPriority.c_str() );		len += 11;						//</presence>		//this function returns the size of the actual data, which doesn't include the null	//byte, done on purpose		return len;}#pragma mark -const std::string &PresenceMsg::getStatus() const{	return mStatus;}void PresenceMsg::setStatus( const std::string &iStatus ){	mStatus = iStatus;}const std::string &PresenceMsg::getShow() const{	return mShow;}void PresenceMsg::setShow( const std::string &iShow ){	mShow = iShow;}long PresenceMsg::getPriority() const{	return mPriority;}void PresenceMsg::setPriority( long iPriority ){	mPriority = iPriority;}#pragma mark -void PresenceMsg::visitNode( const CElementNode& aNode ){	if( aNode.GetName() == "status" )	{		TagToString( aNode, mStatus );	}	else if( aNode.GetName() == "show" )	{		TagToString( aNode, mShow );	}	else if( aNode.GetName() == "priority" )	{		std::string tmp;		TagToString( aNode, tmp );		mPriority = tmp.c_str();	}	else		BaseMsg::visitNode( aNode );}#if USE_MACJLIB_NS}#endif