/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		TimeMsg.cp *  Created:	2000-05-03 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"TimeMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifconst std::string TimeMsg::msXMLNS("jabber:iq:time");TimeMsg::TimeMsg() : BaseIQMsg(){}TimeMsg::TimeMsg( const TimeMsg& inTimeMsg ) : BaseIQMsg( inTimeMsg ){	mUTC = inTimeMsg.mUTC;	mTimeZone = inTimeMsg.mTimeZone;	mDisplay = inTimeMsg.mDisplay;}TimeMsg::TimeMsg( const JID &inTo ) : BaseIQMsg(){	mTo = inTo;	mType = "get";}TimeMsg::TimeMsg( const CElementNode& inIQ ) : BaseIQMsg( inIQ ){}TimeMsg::~TimeMsg(){}TimeMsg *TimeMsg::makeResult() const{	TimeMsg *timeMsg = new TimeMsg( *this );	if( timeMsg )	{		//this is a reply so swap the to and from fields		timeMsg->setType( "result" );		timeMsg->setTo( mFrom );		timeMsg->setFrom( mTo );	}		return timeMsg;}#pragma mark -Ptr TimeMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				tag_strcat( xmlStr, "utc", mUTC );		tag_strcat( xmlStr, "tz", mTimeZone );		tag_strcat( xmlStr, "display", mDisplay );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long TimeMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>		len += tag_strlen( "utc", mUTC );	len += tag_strlen( "tz", mTimeZone );	len += tag_strlen( "display", mDisplay );		return len;}#pragma mark -const std::string &TimeMsg::getUTC() const{	return mUTC;}void TimeMsg::setUTC( const std::string &inUTC ){	mUTC = inUTC;}const std::string &TimeMsg::getTimeZone() const{	return mTimeZone;}void TimeMsg::setTimeZone( const std::string &inTimeZone ){	mTimeZone = inTimeZone;}const std::string &TimeMsg::getDisplay() const{	return mDisplay;}void TimeMsg::setDisplay( const std::string &inDisplay ){	mDisplay  = inDisplay;}#pragma mark -void TimeMsg::visitQueryNode( const CElementNode& aNode ){	if( aNode.GetName() == "utc" )		TagToString( aNode, mUTC );	else if( aNode.GetName() == "tz" )		TagToString( aNode, mTimeZone );	else if( aNode.GetName() == "display" )		TagToString( aNode, mDisplay );	else		BaseIQMsg::visitQueryNode( aNode );}#if USE_MACJLIB_NS}#endif