/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		VersionMsg.cp *  Created:	2000-04-16 *  Authors:	MH - Max Horn <max@quendi.de> *				CB - Chris Behm <cjbehm@mail.com> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"VersionMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifconst std::string VersionMsg::msXMLNS("jabber:iq:version");VersionMsg::VersionMsg() : BaseIQMsg(){}VersionMsg::VersionMsg( const VersionMsg& iVersionMsg) : BaseIQMsg( iVersionMsg ){	mName = iVersionMsg.mName;	mVersion = iVersionMsg.mVersion;	mOS = iVersionMsg.mOS;}VersionMsg::VersionMsg( const JID &inTo ) : BaseIQMsg(){	mTo = inTo;	mType = "get";}VersionMsg::VersionMsg( const CElementNode& inIQ ) : BaseIQMsg( inIQ ){}VersionMsg::~VersionMsg(){}VersionMsg *VersionMsg::makeResult() const{	VersionMsg *versionMsg = new VersionMsg( *this );	if( versionMsg )	{		//this is a reply so swap the to and from fields		versionMsg->setType( "result" );		versionMsg->setTo( mFrom );		versionMsg->setFrom( mTo );	}		return versionMsg;}#pragma mark -Ptr VersionMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		// make sure the standard attributes are appendend		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				tag_strcat( xmlStr, "name", mName );		tag_strcat( xmlStr, "version", mVersion );		tag_strcat( xmlStr, "os", mOS );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long VersionMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>	len += tag_strlen( "name", mName );	len += tag_strlen( "version", mVersion );	len += tag_strlen( "os", mOS );		//this function returns the size of the actual data, which doesn't include the null	//byte, done on purpose		return len;}#pragma mark -void VersionMsg::setName( const std::string &iName ){	mName = iName;}const std::string &VersionMsg::getName() const{	return mName;}void VersionMsg::setVersion( const std::string &iVersion ){	mVersion = iVersion;}const std::string &VersionMsg::getVersion() const{	return mVersion;}void VersionMsg::setOS( const std::string &iOS ){	mOS = iOS;}const std::string &VersionMsg::getOS() const{	return mOS;}#pragma mark -void VersionMsg::visitQueryNode( const CElementNode& aNode ){	if( aNode.GetName() == "name" )		TagToString( aNode, mName );	else if( aNode.GetName() == "version" )		TagToString( aNode, mVersion );	else if( aNode.GetName() == "os" )		TagToString( aNode, mOS );	else		BaseIQMsg::visitQueryNode( aNode );}#if USE_MACJLIB_NS}#endif