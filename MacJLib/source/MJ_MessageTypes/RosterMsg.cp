/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		RosterMsg.cp *  Created:	2000-05-03 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"RosterMsg.h"#include	"RosterItem.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifconst std::string RosterMsg::msXMLNS("jabber:iq:roster");RosterMsg::RosterMsg() : BaseIQMsg(){}RosterMsg::RosterMsg( const RosterMsg& inRosterMsg ) : BaseIQMsg( inRosterMsg ){	mRosterItems = inRosterMsg.mRosterItems;}RosterMsg::RosterMsg( const CElementNode& inIQ ) : BaseIQMsg( inIQ ){}RosterMsg::~RosterMsg(){}#pragma mark -Ptr RosterMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				for( RosterItemList::const_iterator X = mRosterItems.begin(); X != mRosterItems.end(); ++X )			X->appendXML( xmlStr );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long RosterMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>		for( RosterItemList::const_iterator X = mRosterItems.begin(); X != mRosterItems.end(); ++X )		len += X->size();		return len;}#pragma mark -void RosterMsg::addRosterItem( const RosterItem &inRosterItem ){	//this just adds the roster item "normally"	mRosterItems.push_back( inRosterItem );}void RosterMsg::pushBackRosterItem( const RosterItem &inRosterItem ){	//this does not add the item to the back of the roster, it pushes it back onto the top	mRosterItems.push_front( inRosterItem );}#pragma mark -void RosterMsg::visitQueryNode( const CElementNode& aNode ){	if( aNode.GetName() == "item" )		mRosterItems.push_back( RosterItem( aNode ) );	else		BaseIQMsg::visitQueryNode( aNode );}#if USE_MACJLIB_NS}#endif