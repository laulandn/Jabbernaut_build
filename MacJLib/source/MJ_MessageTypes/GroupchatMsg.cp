/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		GroupchatMsg.cp *  Created:	2000-11-07 *	Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"GroupchatMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib{#endifconst std::string GroupchatMsg::msXMLNS("jabber:iq:groupchat");GroupchatMsg::GroupchatMsg() : BaseIQMsg(){}GroupchatMsg::GroupchatMsg( const JID &inJID ) : BaseIQMsg(){	mTo = inJID;}GroupchatMsg::GroupchatMsg( const CElementNode &inIQ ) : BaseIQMsg( inIQ ){}GroupchatMsg::~GroupchatMsg(){}#pragma mark -Ptr GroupchatMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				tag_strcat(xmlStr,"key",mKey);		tag_strcat(xmlStr,"secret",mSecret);		tag_strcat(xmlStr,"topic",mTopic);		for( StringList::const_iterator X = mNickList.begin(); X != mNickList.end(); ++X )			tag_strcat(xmlStr,"nick",*X);				for( GroupchatItemList::const_iterator X = mGroupchatItems.begin(); X != mGroupchatItems.end(); ++X )			X->appendXML( xmlStr );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long GroupchatMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>	len += tag_strlen("key",mKey);	len += tag_strlen("secret",mSecret);	len += tag_strlen("topic",mTopic);		for( StringList::const_iterator X = mNickList.begin(); X != mNickList.end(); ++X )		len += tag_strlen("nick",*X);		for( GroupchatItemList::const_iterator X = mGroupchatItems.begin(); X != mGroupchatItems.end(); ++X )		len += X->size();		return len;}#pragma mark -void GroupchatMsg::visitQueryNode( const CElementNode& aNode ){	if( aNode.GetName() == "key" )		TagToString( aNode, mKey );	else if( aNode.GetName() == "secret" )		TagToString( aNode, mSecret );	else if( aNode.GetName() == "mTopic" )		TagToString( aNode, mTopic );	else if( aNode.GetName() == "item" )		mGroupchatItems.push_back( GroupchatItem( aNode ) );	else		BaseIQMsg::visitQueryNode( aNode );}#if USE_MACJLIB_NS}#endif