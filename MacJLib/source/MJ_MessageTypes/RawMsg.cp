/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		RawMsg.cp *  Created:	2000-04-01 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"RawMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifRawMsg::RawMsg(){	mTxt = NULL;	mLen = 0;}RawMsg::RawMsg( const CElementNode& pNode ) : BaseMsg( pNode ){	mTxt = NULL;	mLen = 0;}RawMsg::RawMsg( const char *aStr ){	MJ_ASSERT( "aStr==NULL", aStr!=NULL )	mTxt = NULL;	mLen = 0;		setText(aStr);}RawMsg::RawMsg( ConstStr255Param aStr ){	MJ_ASSERT( "aStr==NULL", aStr!=NULL )	mTxt = NULL;	mLen = 0;		setText(aStr);}RawMsg::RawMsg( const RawMsg& inRawMsg ){	MJ_ASSERT( "Don't call this!!!", FALSE )}RawMsg::~RawMsg(){	if( mTxt )	{		FreeMem( mTxt );		mTxt = NULL;		mLen = 0;	}}#pragma mark -Ptr RawMsg::toXML() const{	Ptr		xmlStr;	long	len;		if( mTxt )	{		len = mLen + 1;			// reserve space for the trailing NULL byte!		xmlStr = AllocMemClear( len );		if( xmlStr )		{			MoveMem( mTxt, xmlStr, len );			ConvertCRs( xmlStr, false );		}	}		return xmlStr;}long RawMsg::size() const{	if( mTxt )		return mLen;	else		return 0;}#pragma mark -void RawMsg::setText( const char *aStr ){		MJ_ASSERT( "aStr==NULL", aStr!=NULL )	if( mTxt )	{		FreeMem( mTxt );		mTxt = NULL;		mLen = 0;	}		if( aStr )	{		mLen = strlen(aStr);		if( mLen )		{			mTxt = AllocMem(mLen + 1);			if( mTxt )			{				MoveMem( aStr, mTxt, mLen );				mTxt[mLen] = 0;			}		}	}}void RawMsg::setText( ConstStr255Param aStr ){	MJ_ASSERT( "aStr==NULL", aStr!=NULL )	if( mTxt )	{		FreeMem( mTxt );		mTxt = NULL;		mLen = 0;	}	if( aStr )	{		mLen = aStr[0];		if( mLen )		{			mTxt = AllocMem(mLen + 1);			if( mTxt )			{				MoveMem( &(aStr[1]), mTxt, mLen );				mTxt[mLen] = 0;			}		}	}	}const char *RawMsg::getText(){	return (const char *)mTxt;}#if USE_MACJLIB_NS}#endif