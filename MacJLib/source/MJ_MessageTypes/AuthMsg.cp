/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		AuthMsg.cp *  Created:	2000-??-?? *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"AuthMsg.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifconst std::string AuthMsg::msXMLNS("jabber:iq:auth");AuthMsg::AuthMsg() : BaseIQMsg(){	mType = "set";}AuthMsg::AuthMsg( const AuthMsg& pAuth) : BaseIQMsg( pAuth ){	mUsername = pAuth.mUsername;	mPassword = pAuth.mPassword;	mResource = pAuth.mResource;		mType = "set";}AuthMsg::AuthMsg( const AuthMsgHeader *pAuthHeader ) : BaseIQMsg( pAuthHeader ){	MJ_ASSERT( "pAuthHeader==NULL", pAuthHeader!=NULL )	mUsername = pAuthHeader->username;	mPassword = pAuthHeader->password;	mResource = pAuthHeader->resource;		mType = "set";}AuthMsg::~AuthMsg(){}#pragma mark -Ptr AuthMsg::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		strcat(xmlStr,"<iq");		stdAttribsAppend( xmlStr );		strcat(xmlStr,"><query xmlns=\"");		strcat(xmlStr,msXMLNS.c_str());		strcat(xmlStr,"\">");				tag_strcat( xmlStr, "username", mUsername );		tag_strcat( xmlStr, "password", mPassword );		tag_strcat( xmlStr, "resource", mResource );				strcat(xmlStr,"</query></iq>");		ConvertCRs( xmlStr, false );	}		return xmlStr;}long AuthMsg::size() const{	long len = 3;			//"<iq"	len += stdAttribsSize();	len += 17;				//><query xmlns="">	len += msXMLNS.size();	len += 13;				//</query></iq>		len += tag_strlen( "username", mUsername );	len += tag_strlen( "password", mPassword );	len += tag_strlen( "resource", mResource );		//this function returns the size of the actual data, which doesn't include the null	//byte, done on purpose		return len;}#pragma mark -void AuthMsg::setUsername( const std::string &iUsername ){	mUsername = iUsername;}const std::string &AuthMsg::getUsername() const{	return mUsername;}void AuthMsg::setPassword( const std::string &iPassword ){	mPassword = iPassword;}const std::string &AuthMsg::getPassword() const{	return mPassword;}void AuthMsg::setResource( const std::string &iResource ){	mResource = iResource;}const std::string &AuthMsg::getResource() const{	return mResource;}#if USE_MACJLIB_NS}#endif