/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		JID.cp *  Created:	2000-05-10 *  Authors:	MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"JID.h"#include	"MemoryOps.h"#include	<cctype>#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib{#endif// this global constant is used as a shortcut to check for empty JIDsconst JID	emptyJID;// some helper functions that allow us to do case insensitive comparesbool	nocase_compare_char( char c1, char c2 );bool	nocase_compare( const std::string s1, const std::string s2 );bool	nocase_compare_char( char c1, char c2 ){	return tolower(c1) == tolower(c2);}bool	nocase_compare( const std::string s1, const std::string s2 ){	return ((s1.size() == s2.size()) && equal( s1.begin(), s1.end(), s2.begin(), nocase_compare_char ));}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JID::JID(){}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JID::JID( const JID &aJID ){	mUsername = aJID.mUsername;	mServer = aJID.mServer;	mResource = aJID.mResource;	buildFull();}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JID::JID( const char * full ){	parseFull( full );}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JID::JID( const std::string &full ){	parseFull( full );}///--------------------------------------------------------------------------------------//	¥ Constructor:///--------------------------------------------------------------------------------------JID::JID( const std::string &username, const std::string &server, const std::string &res ){	setUsername( username );	setServer( server );	setResource( res );}#pragma mark -///--------------------------------------------------------------------------------------//	getUsername://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------const std::string&	JID::getUsername() const{	return mUsername;}///--------------------------------------------------------------------------------------//	setUsername://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------void			JID::setUsername( const std::string& iUsername ){	std::string	newUsername = iUsername;		// maximum length for a username is 64 chars; cut off if longer.	if( newUsername.size() > kUsernameMaxLen )		newUsername.resize(kUsernameMaxLen);		// check for low and invalid ascii characters in the username	for(std::string::iterator X = newUsername.begin();X != newUsername.end();++X)	{		if(*X <= 32 || *X == ':' || *X == '@' || *X == '<' || *X == '>' || *X == '\'' || *X == '"' || *X == '&')			return;	// should throw!	}	mUsername = newUsername;	buildFull();}///--------------------------------------------------------------------------------------//	getServer://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------const std::string&	JID::getServer() const{	return mServer;}///--------------------------------------------------------------------------------------//	setServer://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------void			JID::setServer( const std::string& iServer ){	std::string	newServer = iServer;		if( newServer.empty() || ( newServer.size() > kServernameMaxLen ) )		return;	// should throw!		// lowercase the hostname, make sure it's valid characters	for(std::string::iterator X = newServer.begin();X != newServer.end();++X)	{		*X = tolower(*X);		if(!(isalnum(*X) || *X == '-' || *X == '.'))			return;	// should throw!	}		mServer = newServer;	buildFull();}///--------------------------------------------------------------------------------------//	getResource://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------const std::string&	JID::getResource() const{	return mResource;}///--------------------------------------------------------------------------------------//	setResource://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------void			JID::setResource( const std::string& iResource ){	mResource = iResource;	buildFull();}///--------------------------------------------------------------------------------------//	hasResource://		check whether a resource is specified for this JID//		//	Changes://		2000-05-15	MH		Created///--------------------------------------------------------------------------------------bool			JID::hasResource() const{	return !mResource.empty();}#pragma mark -///--------------------------------------------------------------------------------------//	empty://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------bool			JID::empty() const{	return mFull.empty();}///--------------------------------------------------------------------------------------//	size://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------size_t			JID::size() const{	return mFull.size();}///--------------------------------------------------------------------------------------//	c_str://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------const char		*JID::c_str() const{	return mFull.c_str();}#pragma mark -///--------------------------------------------------------------------------------------//	operator=://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------const JID&		JID::operator=( const JID& aJID ){	mUsername = aJID.mUsername;	mServer = aJID.mServer;	mResource = aJID.mResource;	buildFull();	return *this;}///--------------------------------------------------------------------------------------//	operator=://		put your description here//		//	Changes://		2000-05-12	MH		Created///--------------------------------------------------------------------------------------const JID&		JID::operator=( const char * full ){	parseFull( full );	return *this;}///--------------------------------------------------------------------------------------//	operator=://		put your description here//		//	Changes://		2000-05-12	MH		Created///--------------------------------------------------------------------------------------const JID&		JID::operator=( const std::string &full ){	parseFull( full );	return *this;}///--------------------------------------------------------------------------------------//	operator==://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------int	JID::operator==( const JID& aJID ) const{	return compare( aJID );}///--------------------------------------------------------------------------------------//	operator!=://		put your description here//		//	Changes://		2000-05-11	MH		Created///--------------------------------------------------------------------------------------int	JID::operator!=( const JID& aJID ) const{	return !compare( aJID );}///--------------------------------------------------------------------------------------//	compare://		put your description here//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------int JID::compare( const JID& aJID ) const{	return nocase_compare(mUsername, aJID.mUsername)		&& nocase_compare(mServer, aJID.mServer);}///--------------------------------------------------------------------------------------//	strictCompare://		put your description here//		//	Changes://		2000-05-18	MH		Created///--------------------------------------------------------------------------------------int JID::strictCompare( const JID& aJID ) const{	return nocase_compare(mUsername, aJID.mUsername)		&& nocase_compare(mServer, aJID.mServer)		&& nocase_compare(mResource, aJID.mResource);}#pragma mark -///--------------------------------------------------------------------------------------//	parseFull://		put your description here//		//	Changes://		2000-05-10	MH		Created///--------------------------------------------------------------------------------------void			JID::parseFull( const std::string&full ){	std::string		dummy = full;	size_t	pos;		pos = dummy.find( '/' );	if( pos != std::string::npos )	{		mResource = dummy.substr(pos+1, dummy.size() - pos);		dummy.resize( pos );	}	else		mResource.clear();		pos = dummy.find( ':' );	if( pos != std::string::npos )		dummy.erase(0, pos+1);		pos = dummy.find( '@' );	if( pos != std::string::npos )	{		setUsername( (dummy.substr(0, pos)) );		setServer( (dummy.substr(pos+1, dummy.size() - pos)) );	}	else	{		mUsername.clear();		setServer( dummy );	}		buildFull();}///--------------------------------------------------------------------------------------//	buildFull://		put your description here//		//	Changes://		2000-05-12	MH		Created///--------------------------------------------------------------------------------------void		JID::buildFull(){	mFull.clear();		// if no server is specified -> not a legal JID!	if( !mServer.empty() )	{		if( !mUsername.empty() )		{			mFull = mUsername;			mFull += "@";		}				mFull += mServer;				if( !mResource.empty() )		{			mFull += "/";			mFull += mResource;		}	}}#if USE_MACJLIB_NS}#endif