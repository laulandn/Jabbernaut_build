/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		RosterItem.cp *  Created:	2000-05-03 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ */#include	"RosterItem.h"#include	"MemoryOps.h"#include	<string.h>#if USE_MACJLIB_NSnamespace MacJLib {#endifRosterItem::RosterItem(){}RosterItem::RosterItem( const RosterItem& inRosterItem ){	mJID = inRosterItem.mJID;	mName = inRosterItem.mName;	mSubscription = inRosterItem.mSubscription;	mAsk = inRosterItem.mAsk;	mGroupList = inRosterItem.mGroupList;}RosterItem::RosterItem( const CElementNode& inTagNode ){	CElementNode	*curNode;	std::string tmp;		mJID = inTagNode.AttribVal( "jid" );	mName = inTagNode.AttribVal( "name" );	mAsk = inTagNode.AttribVal( "ask" );	mSubscription = inTagNode.AttribVal( "subscription" );		for( CNodeList::const_iterator X = inTagNode.ChildNodes().begin();X != inTagNode.ChildNodes().end();++X)	{		curNode = dynamic_cast<CElementNode *>(*X);		if( curNode )		{			if( curNode->GetName() == "group" )			{										TagToString( *curNode, tmp );				mGroupList.push_back( tmp );			}		}	}}RosterItem::~RosterItem(){}#pragma mark -const JID &RosterItem::getJID() const{	return mJID;}void RosterItem::setJID( const JID &inJID ){	mJID = inJID;}const std::string &RosterItem::getName() const{	return mName;}void RosterItem::setName( const std::string &inName ){	mName = inName;}const std::string &RosterItem::getSubscription() const{	return mSubscription;}void RosterItem::setSubscription( const std::string &inSub ){	mSubscription = inSub;}const std::string &RosterItem::getAsk() const{	return mAsk;}void RosterItem::setAsk( const std::string &inAsk ){	mAsk = inAsk;}const GroupList &RosterItem::getGroupList() const{	return mGroupList;}void RosterItem::setGroupList( const GroupList &inGroupList ){	mGroupList = inGroupList;}void RosterItem::addGroup( const std::string &inGroup ){	mGroupList.push_back( inGroup );}#pragma mark -void RosterItem::appendXML( Ptr xmlStr ) const{	if( xmlStr )	{		strcat(xmlStr,"<item");		attrib_strcat(xmlStr,"jid",mJID.getFull());		attrib_strcat(xmlStr,"name",mName);		attrib_strcat(xmlStr,"ask",mAsk);		attrib_strcat(xmlStr,"subscription",mSubscription);		if( mGroupList.empty() )			strcat(xmlStr,"/>");		else		{			strcat( xmlStr, ">");			for( GroupList::const_iterator X = mGroupList.begin(); X != mGroupList.end(); ++X )				tag_strcat(xmlStr,"group",*X);			strcat( xmlStr, "</item>" );		}	}}Ptr RosterItem::toXML() const{	Ptr		xmlStr;	long	len;		len = size() + 1;		xmlStr = AllocMemClear( len );	if( xmlStr )	{		appendXML( xmlStr );		ConvertCRs( xmlStr, false );	}		return xmlStr;}long RosterItem::size() const{	long	len = 5;//<item		len += attrib_strlen("jid",mJID.getFull());	len += attrib_strlen("name",mName);	len += attrib_strlen("ask",mAsk);	len += attrib_strlen("subscription",mSubscription);	if( mGroupList.empty() )		len += 2;///>	else	{		len += 1;//>		for( GroupList::const_iterator X = mGroupList.begin(); X != mGroupList.end(); ++X )			len += tag_strlen("group",*X);		len += 7;//</item>	}	return len;}#if USE_MACJLIB_NS}#endif