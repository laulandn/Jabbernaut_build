/* *  This library is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public *  License as published by the Free Software Foundation; either *  version 2.1 of the License, or (at your option) any later version. * *  This library is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU *  Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public *  License along with this library; if not, write to the Free Software *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * *  Project:	MacJLib *  File:		NodeBuildingHandler.cp *  Created:	2000-04-01 *  Authors:	CB - Chris Behm <cjbehm@mail.com> *				MH - Max Horn <max@quendi.de> * *  Copyright:	(C) 2000 The MacJLib Team http://macjlib.sourceforge.net/ * *	Based on code by Jonathan Wight <JWight@bigfoot.com>. Thank you, Jonathan! */#include "MacJLibUtils.h"#include "NodeBuildingHandler.h"#if USE_MACJLIB_NSnamespace MacJLib{#endifCNodeBuildingHandler::CNodeBuildingHandler()	:	CAbstractHandler(),		mRootNode(NULL){}CNodeBuildingHandler::~CNodeBuildingHandler(){	delete mRootNode;}void CNodeBuildingHandler::HandleStartElement(const std::string &inName, const CAttributeMap &inAttributeMap){	CElementNode *theNode;	theNode = new CElementNode(inName, inAttributeMap);		if (mRootNode == NULL)		mRootNode = theNode;	else	{		CElementNode *theTopNode = dynamic_cast<CElementNode*>(mNodeStack.top());		if (theTopNode)			theTopNode->AppendChild(theNode);	}	mNodeStack.push(theNode);}void CNodeBuildingHandler::HandleEndElement(const std::string &inName){#pragma unused( inName )	MJ_ASSERT( "start element != end element", mNodeStack.top()->GetName() == inName )	mNodeStack.pop();}void CNodeBuildingHandler::HandleCharacterData(const std::string &inData){	CElementNode *theTopNode = dynamic_cast<CElementNode*>(mNodeStack.top());	if (theTopNode)		theTopNode->AppendChild(new CTextNode(inData));}CElementNode *CNodeBuildingHandler::DetachRootNode(void){	CElementNode *theNode = mRootNode;	mRootNode = NULL;	return theNode;}#if USE_MACJLIB_NS}#endif