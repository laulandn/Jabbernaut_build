/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZClassRegistry.h		-- registry of classes used for persistent objects******			© 1998, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZCLASSREGISTRY__#define	__ZCLASSREGISTRY__#include	"ZArray.h"#include	"ZObject.h"class	ZStream;// data in registry is stored in records like this:typedef struct{	OSType					classid;	ConstructorFunction		newfunc;	long					refCon;	char*					classname;}Object_Info;DEFINECLASSID( ZClassRegistry, 'zreg' );// the class:class	ZClassRegistry	: public ZArray{public:	ZClassRegistry();	virtual ~ZClassRegistry();	virtual void		RegisterClass( const OSType aType, ConstructorFunction aFunc, Str255 aName, const long refCon = 0 );	virtual void		RegisterClass( ZObject& exampleClass, ConstructorFunction aFunc );	virtual void		GetNameOfClass( const OSType aType, Str255 aName );	virtual ZObject*	InstantiateClass( const OSType aType );	virtual ZObject*	InstantiateClass( const Str255 aName );	virtual long		FindClass( const OSType aType );	virtual long		FindClass( const Str255 aName );	// for simplicity and convenience, the object reanimator method is put here- we don't need// another class for it. This returns the root object built from the stream, and any other// objects it creates along the way as data members or globals.	virtual ZObject*	InstantiateFromStream( ZStream* aStream );		virtual void		ReportFields();		private:	ZClassRegistry*			fNext;	static ZClassRegistry*	sRegistryHead;};// errors:enum{	kClassTypeUnknownErr			= 601,	kClassNameUnknownErr,	kBadConstructorFuncErr,	kClassHasNonUniqueIDErr};// handy macro for hiding nasty details of registering a class#define		REGISTERCLASS( x )	gClasses->RegisterClass( CLASSID( x ), CONSTRUCTORFUNCTION( x ), CLASSNAME( x ))#endif