/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZPStrArray.h			-- efficient string storage******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZSTRINGARRAY__#define	__ZSTRINGARRAY__#include	"ZArray.h"DEFINECLASSID( ZPStrArray, 'zpsa' );class	ZPStrArray	: public ZArray{public:	ZPStrArray();	virtual ~ZPStrArray() {};		virtual void	GetArrayItem( void* item, const long index );	virtual void	SetArrayItem( void* item, const long index );	virtual void	AppendItem( void* item );	virtual void	InsertItem( void* item, const long index );	virtual void	DeleteItem( const long index );	virtual short	Compare( void* itema, void* itemb, const long ref );	virtual long	GetStringLength( const long index );	virtual long	CountItems();	virtual void	DeleteAll();protected:	virtual long	FindOffset( const long index );	virtual void	InsertData( void* data, const long dataLength, const long offset );	virtual void	DeleteData( const long offset, const long dataLength );	virtual long	GetDataLength( const long offset );};/*This is a simple array class for storing pascal strings. Since ZArray has a fixedelement size, it's poor for this type of data, because there is so much wasted space.This class stores the data compactly to avoid this.The usual ZArray features such as sorting work correctly, and a supplied comparisonproc makes this easy. Sorting operations are quite a bit slower than ZArray though,because the variable length and amount of data copying needed make it so.Strings stored and returned are Str255 types in this version.This class may be seamlessly used with ZArrayBrowser, etc.WARNING: Do not use the MoveItem method with this class. (Swap is OK)*/#endif