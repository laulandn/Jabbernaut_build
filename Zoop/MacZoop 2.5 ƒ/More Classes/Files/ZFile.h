/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZFile.h	-- a generic file object******			© 1996, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZFILE__#define	__ZFILE__#ifndef __ZCOMRADE__#include	"ZComrade.h"#endif#include	<Files.h>#include	<QuickDraw.h>#include	<StandardFile.h>#include	<Folders.h>class	ZGWorld;enum{	CLASS_ZFile		= 'zfil'};class	ZFile : public ZComrade{protected:	short	refNum;			// data fork ref num when open	short	resRefNum;		// resource fork ref num when open	Boolean	isSafeSave;		// TRUE if this was a safe-save Write	OSType	itsType;		// file type	OSType	itsCreator;		// file creator- initialised to application creator type	FSSpec	itsSpec;		// file spec (name and location)	FSSpec	ssFSpec;		// temp file spec for safe-save	long	tempFID;		// temp folder ID	short	tempFVolID;		// temp folder volume	public:	ZFile( const FSSpec& aSpec );	ZFile( Str255 fName );	ZFile();	virtual ~ZFile();// file opening and closing	virtual void	Open( SInt8 permission = fsCurPerm );	virtual void	Close();	virtual void	OpenSafe( Boolean copyResourceFork = FALSE );// creating/destroying a new file on disk		virtual void	Create();	virtual void	Discard();// accessing the resource fork		virtual void	OpenResFork( SInt8 permission = fsCurPerm );	virtual void	CloseResFork();	virtual void	CreateResFork();	virtual void	SetResFork( short* curRes );// reading and writing file data		virtual void	Read( Ptr inBuffer, long* howMuch );	virtual void	Write( Ptr outBuffer, long* howMuch );	virtual void	Read( Handle aHandle );	virtual void	Write( Handle aHandle );// copying a complete file on disk		virtual void    Copy( ZFile* srcFile );// file positioning and info		virtual long	GetMark();	virtual void	SetMark( const long aMark );		virtual OSType	GetType();	virtual void	SetType( const OSType aType );	virtual OSType  GetCreator() { return itsCreator; };	virtual void	SetCreator( const OSType aCreator );	virtual long	GetLength();	virtual void	SetLength( const long aLength );	virtual void	GetFSSpec( FSSpec* aSpec );	virtual void	GetInfo( FInfo* fi );	virtual void	SetInfo( FInfo* fi );	virtual void	GetName( Str31 aName );		unsigned long	GetModificationDate();	unsigned long	GetCreationDate();	// fork info		virtual Boolean	HasResFork();	virtual Boolean	HasDataFork();// disk file info		virtual Boolean	IsReal();	virtual Boolean	IsLocked();	virtual Boolean	IsOpen();		inline	short	GetRefNumber() { return refNum; };	inline	short	GetResourceRefNumber() { return resRefNum; };		// making custom icons for the file:	virtual void	MakeCustomIcon( PicHandle srcImage );	virtual void	MakeCustomIcon( ZGWorld* srcImage );		virtual void	GetDebugInfoString( Str255 s );	virtual void	ReportFields();protected:	virtual void	InitFile();	virtual Handle	ConstructCustomIconSuite( PicHandle srcPic );	virtual void	SaveCustomIconSuite( Handle icnSuite );	virtual void    CopyResourceFork( FSSpec* srcFile, FSSpec* destFile );	void			GetTempFolderID(); 		static FSSpec	sDummySpec;};enum{	_NOT_OPEN		    	= -1,	krfBufferSize       	= 4096,     // copy 4K resources at a time 	kCopyBufferSize     	= 4096,		// copy 4K data at a time	msgFileCopyProgress		= 'fcpy'};#endif