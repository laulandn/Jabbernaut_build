/*************************************************************************************************		Name:  			PatternMenu.h*		Description:	A MDEF for displaying patterns, B & W or colour.**		Date Created:		December 20th, 1995*		Author:				Graham Cox*		*		Revision History:	****		Notes:*	************************************************************************************************/#pragma once#ifndef	__PATTERNMENUMDEF__#define __PATTERNMENUMDEF__#include	<Menus.h>#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// resource structure for colour pattern liststypedef struct{	short	numPatterns;	short	patID[1];}CPatList, *CPatListPtr, **CPatListHdl;enum{	kCPatListResType	= 'PPT#'};// prototype for MDEFpascal void	CPatMDEFFunction( short message, MenuHandle theMenu,								Rect *menuRect, Point hitPt, short *whichItem );								// pat list type codes:enum{	patListSysList,	patListBW,	patListColour,	patListBWColourised};typedef unsigned short  PatternType;// the menu handle record is altered thus:typedef struct{#if TARGET_API_MAC_CARBON    MenuHandle      theMenu;#else	MenuInfo		menuRecord;#endif	PatternType		patListType;	short			patListID;	CPatListHdl		patListHdl;	long			menuRefCon;	short			initIndex;	RGBColor		patFore;	RGBColor		patBack;}CPatMenuRecord, *CPatMenuPtr, **CPatMenuHandle;// user API to make life just one big bowl of cherries...long	PopUpCPatternMenu( Point globalLoc, short patListID, short initialItem );long	PopUpBWPatternMenu( Point globalLoc, short patListID, short initialItem );long	PopUpBWColourisedMenu( Point globalLoc, short patListID, short initialItem, RGBColor* fClr, RGBColor* bClr );// note that these routines create and destroy the menu on the fly and cope with the// menu manager inadequacies for you- thus you cannot pass a specific menu nor do you// ever need to. Simply create the pattern list resources and away you go!PixPatHandle	GetIndCPattern(short patListID, short index);// standard pop-up items:void    DrawStandardPatternSelector( Rect* bounds, Pattern* thePat, const RGBColor* fg, const RGBColor* bk );void    DrawStandardCPatternSelector( Rect* bounds, PixPatHandle cPat );// private internal utilities- but you can use them if you want.CPatMenuHandle  NewPatMenu( const short menuID, PatternType theType, short patListID, short initItem );void            DisposePatMenu( CPatMenuHandle theMenu );CPatListHdl		GetCPatternList(short patListID);void            SetPatForeColour( CPatMenuHandle theMenu, RGBColor* fore );void            SetPatBackColour( CPatMenuHandle theMenu, RGBColor* back );enum{	kPatternMenuID	= 1067};#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif