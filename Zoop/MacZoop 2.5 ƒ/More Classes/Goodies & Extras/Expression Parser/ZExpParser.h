/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZExpParser.h			-- MacZoop expression parser****			© 2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZEXPPARSER__#define __ZEXPPARSER__#include <fp.h>#if defined(__MWERKS__)#define bcopy BlockMoveData#endif// for MPW only (need to check for this here really):#ifndef bcopy#include	<string.h>#define bcopy(src, dest, count) memcpy((dest), (src), (count))#endif// other funcs:#ifdef __cplusplusextern "C" {#endif	double_t	degtorad( double_t d );	double_t	radtodeg( double_t r );	// this structure used to form elements of a simple symbol table	typedef struct symbol	{		char* 	name;		int		type;		union		{			double_t	var;			double_t	(*func)( double_t arg );		}		value;		symbol*	next;	}	symbol;#ifdef __cplusplus}#endif// the parser class:class	ZExpParser{private:	symbol*		st;	double_t	result;	char*		expStr;	public:	ZExpParser(){ Init(); };	virtual ~ZExpParser();		void	Init();// the only methods you need (as a user!):	virtual double_t	Evaluate( char* expression );	virtual void		SetSymbolValue( char* aName, double_t aValue );// these called internally:	symbol*				Get( char* aName );	symbol*				Put( char* aName, int aType );	void				SetResult( double_t v );	char*				GetExpStr(){ return expStr; };				};	struct init{	char 		*fname;	double_t 	(*fnct)( double_t arg );};enum{	kExpParseErr		= 3001};#ifndef PI#define PI	pi#endif	#endif