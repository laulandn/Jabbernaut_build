/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ***			TextStyleUtils.c	- utilties for dealing with styled TextEdit***			© 1998, Graham Cox****************************************************************************************************/#include	"TextStyleUtils.h"#include	"ZDefines.h"/*---------------------------------***  FontInRun  ***----------------------------------*//*access:			global	overrides:description: 	check if a font already exists in the run info recordins: 			<aFont> font to query				<runInfo> pointer to valid runInfo record				<index> receives index position of the font in the record's arrayouts: 			TRUE if font exists in the run, FALSE otherwisenotes:----------------------------------------------------------------------------------------*/Boolean	FontInRun( short aFont, TEStyleRunInfo* runInfo, short* index ){	// check whether the given font is in the run or not		short	i;		if ( runInfo->numFonts >= MAX_FONTS )		return TRUE;		for ( i = 0; i < runInfo->numFonts; i++ )	{		if ( runInfo->fonts[i] == aFont )		{			*index = i;			return TRUE;		}	}		*index = runInfo->numFonts;	return FALSE;}/*---------------------------------***  SizeInRun  ***----------------------------------*//*access:			global	overrides:description: 	check if a size already exists in the run info recordins: 			<aSize> size to query				<runInfo> pointer to valid runInfo record				<index> receives index position of the size in the record's arrayouts: 			TRUE if size exists in the run, FALSE otherwisenotes:----------------------------------------------------------------------------------------*/Boolean	SizeInRun( short aSize, TEStyleRunInfo* runInfo, short* index ){	// check whether the given size is in the run or not		short	i;		if ( runInfo->numSizes >= MAX_SIZES )		return TRUE;		for ( i = 0; i < runInfo->numSizes; i++ )	{		if ( runInfo->sizes[i] == aSize )		{			*index = i;			return TRUE;		}	}		*index = runInfo->numSizes;	return FALSE;}/*-----------------------------***  TEGetStyleRunInfo  ***------------------------------*//*access:			global	overrides:description: 	obtain font and style information from a styled TextEdit recordins: 			<runInfo> pointer to valid record (caller must allocate)				<te> TextEdit handle to examineouts: 			nonenotes:			This function provides information about the current selection. Unlike				the toolbox TEContinuousStyle, this provides more info such that mixed				and discontinuous styles can be detected and used to set up menus more				intelligently.----------------------------------------------------------------------------------------*/void	TEGetStyleRunInfo( TEStyleRunInfo* runInfo, TEHandle te ){	if ( te == NULL || runInfo == NULL )		return;			// initialise fields of record:		runInfo->fr = 0;	runInfo->runStyles = 0;	runInfo->contStyles = 0xFF;	runInfo->numSizes = 0;	runInfo->numFonts = 0;		if ((*te)->txSize != -1 )		return;			// get the run start and finish:		short			st, en, i, tFont, tSize, as;	Style			tFace;	TEStyleHandle	tsH;	STHandle		stH;		st = (*te)->selStart;	en = (*te)->selEnd;	tsH = TEGetStyleHandle( te );		if ( tsH )	{		// if the selection is empty, we can use the toolbox to get the info -		// this will take into account the null style record				if ( st == en )		{			short		mode = doFace + doFont + doSize;			TextStyle	styleR;						TEContinuousStyle( &mode, &styleR, te );						runInfo->fonts[ runInfo->numFonts++ ] = styleR.tsFont;			runInfo->sizes[ runInfo->numSizes++ ] = styleR.tsSize;			runInfo->runStyles = runInfo->contStyles = styleR.tsFace;		}		else		{			stH = (*tsH)->styleTab;						// we wish to search the style run list, until we reach entries pertaining to			// the range of characters between st and en.						for ( i = 0; i < (*tsH)->nRuns; i++ )			{				if ((*tsH)->runs[i+1].startChar > st  &&				    (*tsH)->runs[i].startChar < en )				{					// this run is within our range, so get the style info and increment					// the relevant info structures										tFont = (*stH)[(*tsH)->runs[i].styleIndex].stFont;					tSize = (*stH)[(*tsH)->runs[i].styleIndex].stSize;					tFace = (*stH)[(*tsH)->runs[i].styleIndex].stFace & 0xFF;										if ( ! FontInRun( tFont, runInfo, &as ))						runInfo->fonts[ runInfo->numFonts++ ] = tFont;										if ( ! SizeInRun( tSize, runInfo, &as ))						runInfo->sizes[ runInfo->numSizes++ ] = tSize;										if ( tFace == 0 )						tFace = kPlainStyle;										// for the face, we just need to OR what we got with what we already have.					// to set the continuity flag, just clear it if the face bit is 0.										runInfo->runStyles |= tFace;					runInfo->contStyles &= tFace;				}			}		}			// finally set the flags for continous font and size. These are true if the		// corresponding count is 0 or 1.				if ( runInfo->numFonts < 2 )			runInfo->fr |= kFontIsContinuous;					if ( runInfo->numSizes < 2 )			runInfo->fr |= kSizeIsContinuous;	}}