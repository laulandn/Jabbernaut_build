/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZEditFieldView.h		-- view that allows text input******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZEDITFIELDVIEW__#define	__ZEDITFIELDVIEW__#include	"ZItemView.h"#include	"MZDialogTypes.h"DEFINECLASSID( ZEditFieldView, 'zefv' );// option flags for filtering:enum{	kEFBorderless			= ( 1 << 0 ),			// edit field has no border	kEFSignedInteger		= ( 1 << 1 ),			// edit field only accepts numbers and - sign	kEFSignedFloat			= ( 1 << 2 ),			// as above plus decimal point character	kEFUnsignedInteger		= ( 1 << 3 ),			// accepts only numbers but not - sign	kEFUnsignedFloat		= ( 1 << 4 ),			// as above plus decimal point character	kEFHasMinValue			= ( 1 << 5 ),			// if int field, has an acceptable minimum val	kEFHasMaxValue			= ( 1 << 6 ),			// if int field, has an acceptable maximum val	kEFAlphabeticOnly		= ( 1 << 7 ),			// only accepts letters, not numbers	kEFHiddenChars			= ( 1 << 8 ),			// "password" style field hides input when typing	kEFCharCountLimit		= ( 1 << 9 ),			// only x characters may be typed in the field	kEFCantBeEmpty			= ( 1 << 10 ),			// something must be entered to validate	kEFNoBeep				= ( 1 << 11 ),			// if set, don't beep on bad keys, etc	kEFWrapTextToFrame		= ( 1 << 12 ),			// if set, destrect RHS same as view	kEFAllowDragSend		= ( 1 << 13 ),			// can drag text from field if set	kEFAllowDragReceive		= ( 1 << 14 ),			// can drag text into field if set	kEFSignedLimitType		= kEFSignedInteger + kEFHasMinValue + kEFHasMaxValue,	kEFUnsignedLimitType	= kEFUnsignedInteger + kEFHasMinValue + kEFHasMaxValue};// the class:class	ZEditFieldView	: public ZItemView{protected:	TEHandle			fMacTE;			// the te record for the field	TEHandle			fMacPWTE;		// alternative te record for password field	unsigned short		fFlags;			// filtering flags	short				fJustify;		// text justification	short				fDecimals;		// number of decimal places for float conversions	public:	ZEditFieldView( ZView* aParent, Rect* aFrame = NULL, const unsigned short flags = 0 );	ZEditFieldView( ZView* aParent, const short viewResourceID );	virtual ~ZEditFieldView();		virtual void		DrawContent();	virtual void		ClickContent( const Point mouse, const short modifiers );	virtual void		SetViewCursor( const Point mouse, const short modifiers );	virtual void		SetFontInfo( const short fontID, const short size, const Style );	virtual void		SetSize( const short aWidth, const short aHeight );	virtual Boolean		FocusForContent();		virtual void        Activate();	virtual void        Deactivate();	virtual void		Enable();	virtual void		Disable();		virtual void		Type( const char theKey, const short modifiers );	virtual void		UpdateMenus();	virtual void		BecomeHandler( Boolean isBecoming );	virtual void		DoSelectionUpdate( Boolean state );	virtual void		Idle();		virtual Boolean		CanPasteType();	virtual void		DoCut();	virtual void		DoCopy();	virtual void		DoPaste();	virtual void		DoClear();	virtual void		DoSelectAll();	virtual void		SetValue( const long aValue );	virtual void		SetValue( const double_t aValue );	virtual void		SetValue( const Str255 aValue );		virtual long		GetValue();	virtual double_t	GetValueAsFloat();	virtual void		GetValueAsText( Str255 aStr );	void				SetDecimalPlaces( const short dec ) { fDecimals = dec; };		virtual Boolean		Validate( Boolean showAlert = FALSE );	virtual Boolean		CheckKey( char* theKey );	virtual Boolean		CheckPasteData();		virtual Boolean		EmptySelection();	virtual void        SetFontAlignment( short aJust );	// D+D:	virtual Boolean		ShouldDrag( const Point mouse, const short modifiers );	virtual void		MakeDragRegion( RgnHandle aRgn );	virtual void		MakeDragData( const DragReference theDrag, const short modifiers );	virtual Boolean		AcceptsFlavour( const OSType aFlavour );	virtual void		Drop( const OSType flavour, const Ptr data, const long dataSize, const DragReference theDrag );	// RAD tool support:	virtual void		InitViewFromResource( Handle theRes );	virtual void		CreateViewResource( Handle resHandle );	TEHandle			GetMacTextEdit() { return fMacTE; };	virtual Handle		GetNewTextHandle();	virtual void		ReportFields();	protected:	virtual void		EFInit();	virtual void		ValidationAlert( const Boolean showAlert, const short reason );	virtual void		ExtractEFParamsFromString( Str255 efText );};// string indices for validation alert:enum{	kEditFieldValidationStringsID		= 128,	kEditFieldIsGreaterThan				= 12,	kEditFieldIsLessThan				= 13,	kEditFieldIsBetween					= 14,	kEditFieldAnd						= 15,	kEditFieldRangeAlertID				= 137,	kEditFieldEmptyAlertID				= 139,	kEFDefaultDecimalPlaces				= 3};// reason codes for ValidationAlertenum{	kEFOutOfRange		= 1,	kEFIsEmpty};// modifier messages:enum{	kModifierEFValidate					= 'vldi',	kModifierEFCheckKey					= 'ckdi',	kMsgEditFieldClicked				= 'efkk',	kMsgRequireSelectionForValidation	= 'efvs'	};// used to pass info to modifierstypedef struct{	Boolean legal;	char	key;}EFKeyInfo;		#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// 'View' resource for ZEditFieldView:typedef struct{	ItemViewTemplate	ivt;		// item view parameters	short				decimals;	// # decimal places for converting floats	short				justify;	// text justification	Boolean				noBorder;	// flags...	Boolean				sIntField;	Boolean				sFloatField;	Boolean				uIntField;	Boolean				uFloatField;	Boolean				hasMin;	Boolean				hasMax;	Boolean				alphabetic;	Boolean				passwordField;	Boolean				charCount;	Boolean				noEmpty;	Boolean				noBeep;	Boolean				wrapText;}EditFieldTemplate, *EditFieldTemplatePtr, **EditFieldTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif/*This class implements a single text entry field view. For most purposes, thiswill be better than using the edit text control with ZControlView - I promise!This class provides a rich API for setting up and reading the field contents,as well as providing automatic filtering and validation.*/DICONSTRUCTORPROTOTYPE( ZEditFieldView );#endif