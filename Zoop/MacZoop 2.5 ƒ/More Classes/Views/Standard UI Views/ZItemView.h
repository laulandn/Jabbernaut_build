/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZItemView.h		-- common API for "item" views. Basis for dialog items*								but can be used in any window or other view.******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZITEMVIEW__#define	__ZITEMVIEW__#include	"ZView.h"#include	"ZErrors.h"#include	<fp.h>#include	<NumberFormatting.h>#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZItemView:typedef struct{	ViewTemplate		vt;	short				groupID;	long				max;	long				min;}ItemViewTemplate, *ItemViewTemplatePtr, **ItemViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endifDEFINECLASSID( ZItemView, 'zimv' );// the class:class	ZItemView	: public ZView{protected:	short	fGroupID;	long	fMax;	long	fMin;public:	ZItemView( ZView* aParent, Rect* aFrame ) : ZView( aParent, aFrame ) { fGroupID = fMax = fMin = 0; };	ZItemView( ZView* aParent ) : ZView( aParent ) { fGroupID = fMax = fMin = 0; }	ZItemView() : ZView() { fGroupID = 0; };// value		virtual void		SetValue( const long aValue ) {};	virtual void		SetValue( const short aValue ) { SetValue((long) aValue ); };	virtual void		SetValue( const int aValue ) { SetValue((long) aValue ); };	virtual void		SetValue( const Str255 aValStr ) {};	virtual void		SetValue( const double_t aValue ) {};	virtual long		GetValue() { return 0; };	virtual void		GetValueAsText( Str255 aStr ) { NumToString( GetValue(), aStr ); };	virtual double_t	GetValueAsFloat() { return 0.0; };// grouping		virtual void		SetGroupID( const short groupID ) { fGroupID = groupID; };	virtual short		GetGroupID() { return fGroupID; };// limits		virtual void		SetMaximum( const long aMax ){ fMax = aMax; };	virtual void		SetMinimum( const long aMin ){ fMin = aMin; };	virtual long		GetMaximum(){ return fMax; };	virtual long		GetMinimum(){ return fMin; };// title		virtual void		SetTitle( const Str255 aTitle ) {};	virtual void		GetTitle( Str255 aTitle ) {};		virtual void		InitViewFromResource( Handle theRes )						{							ZView::InitViewFromResource( theRes );														ItemViewTemplateHdl		ivH = (ItemViewTemplateHdl) theRes;														fGroupID = (*ivH)->groupID;							fMax 	 = (*ivH)->max;							fMin 	 = (*ivH)->min;						}							virtual void		CreateViewResource( Handle resHandle )						{							FailNILParam( resHandle );														if ( GetHandleSize( resHandle ) < sizeof( ItemViewTemplate ))								FailOSErr( kViewTemplateHandleSizeTooSmallErr );															ItemViewTemplateHdl		ivH = (ItemViewTemplateHdl) resHandle;														(*ivH)->groupID = GetGroupID();							(*ivH)->max		= GetMaximum();							(*ivH)->min		= GetMinimum();														ZView::CreateViewResource( resHandle );						}	virtual void		ReportFields() { ZView::ReportFields();											XSHOWFIELD( fGroupID, ft_signedshort );											XSHOWFIELD( fMax, ft_signedlong );											XSHOWFIELD( fMin, ft_signedlong ); }};/*This class provides a common abstract basis for many types of view, typically thoseused as simple items in a dialog-like interface. Because this provides a common API,a set of view based on this can be accessed in a generic manner, which will becomea very important ability in a dialog box.Other kinds of views don't need to base themselves on this, and they can still bedeployed in dialogs. However, such views will not be able to take advantage of a commonaccess API at the dialog level.Views inheriting from this receive a group ID. All controls, edit fields, text box views,and other dialogitem-like views inherit from this.*/#endif