/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZControlView.cpp		-- a view with a Mac control******			©2000, Graham Cox*****************************************************************************************************/#include	"ZControlView.h"#include	"MacZoop.h"DIALOGITEMCONSTRUCTOR( ZControlView );extern		ZCommander*		gCurHandler;// statics, globals:ControlActionUPP		ZControlView::sZControlViewProc = NewControlActionUPP( ZControlView::ControlViewActionProc );/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZControlView::ZControlView( ZView* aParent, const short CNTLid )	: ZItemView( aParent, NULL ){	classID = CLASS_ZControlView;		Rect	cr;	Str255	title;		CNTLHdl		cth;	fMacControl = NULL;	FailNILRes( cth = (CNTLHdl) GetResource( 'CNTL', CNTLid ));	fProcID = (*cth)->procID & ~kControlUsesOwningWindowsFontVariant;			cr = (*cth)->bounds;	SetFrame( &cr );	OffsetRect( &cr, -cr.left, -cr.top );	CopyPString((*cth)->title, title );			Focus();	PrepareForDrawing();	FocusForContent();	FailNIL( fMacControl = NewControl( GetRootWindowMacWindow(), &cr,										title, TRUE,										(*cth)->initialValue,										(*cth)->minValue,										(*cth)->maxValue,										fProcID | kControlUsesOwningWindowsFontVariant, (long) this ));			fCommand = kNoCmd;	fMenuID = 0;	fAutoIdle = FALSE;	CalcControlTrueRect();			// automatically parse title for group ID		GetTitle( title );	SetGroupIDFromTitle( title );	SetNoBackgroundErase( TRUE );		fIsPopUp = (( fProcID / 16 ) == 63 ) || (( fProcID / 16 ) == 25 );		if ( !fIsPopUp )		SetActionProc( sZControlViewProc );	else		fMenuID = (*cth)->minValue;	ReleaseResource((Handle) cth );		fMin = GetMinimum();	fMax = GetMaximum();}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZControlView::ZControlView( ZView* aParent, Rect* aFrame,							const short controlProcID,							const long value, const long min, const long max )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZControlView;		Rect	cr = fFrame;		OffsetRect( &cr, -cr.left, -cr.top );	fMacControl = NULL;		Focus();	PrepareForDrawing();	FocusForContent();	FailNIL( fMacControl = NewControl( GetRootWindowMacWindow(), &cr, NULL, TRUE, value, min, max, controlProcID | kControlUsesOwningWindowsFontVariant, (long) this ));		fProcID = controlProcID & ~kControlUsesOwningWindowsFontVariant;	fCommand = kNoCmd;	fMenuID = 0;	fAutoIdle = FALSE;	SetNoBackgroundErase( TRUE );	CalcControlTrueRect();			fIsPopUp = (( fProcID / 16 ) == 63 ) || (( fProcID / 16 ) == 25 );		if ( !fIsPopUp )		SetActionProc( sZControlViewProc );	else		fMenuID = min;			fMin = GetMinimum();	fMax = GetMaximum();}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZControlView::ZControlView( const short viewResourceID, ZView* aParent )	: ZItemView( aParent ){	classID = CLASS_ZControlView;	fMacControl = NULL;	fAutoIdle = FALSE;	SetNoBackgroundErase( TRUE );		ViewResInit( viewResourceID );	fIsPopUp = (( fProcID / 16 ) == 63 ) || (( fProcID / 16 ) == 25 );		if ( !fIsPopUp )		SetActionProc( sZControlViewProc );		fMin = GetMinimum();	fMax = GetMaximum();}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZControlView::ZControlView()	: ZItemView(){	classID = CLASS_ZControlView;	fMacControl = NULL;	fCommand = kNoCmd;	fIsPopUp = FALSE;	fAutoIdle = FALSE;	SetNoBackgroundErase( TRUE );}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZControlView::~ZControlView(){	if ( GetMacControl())		DisposeControl( GetMacControl());		}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the content of this viewins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::DrawContent(){	if ( IsEnabled() && IsActive())		HiliteControl( GetMacControl(), 0 );	else		HiliteControl( GetMacControl(), 255 );#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		DrawControlInCurrentPort( GetMacControl());	else	{#endif		Rect		r;				GETCONTROLRECT( GetMacControl(), &r );		Draw1Control( GetMacControl());		DrawNonThemeFocusRing( &r );#if APPEARANCE_MGR_AWARE	}#endif}/*------------------------------***  FocusForContent  ***-------------------------------*//*access:			publicoverrides:		description: 	set up port foxus for drawing and clicking controlins: 			noneouts: 			TRUE if something to drawnotes:			this override needed to ensure controls drawn with origin of 0,0 and that				true structure region clipping is allowed for under Carbon----------------------------------------------------------------------------------------*/Boolean			ZControlView::FocusForContent(){	Boolean		result = FALSE;		if ( fMacControl )	{		CalcControlTrueRect();				if ( GetParent())		{			ZView*	par = GetParent();						par->Focus();			par->PrepareForDrawing();			par->FocusForContent();		}				RgnHandle	clip, temp;		short		oh, ov;		Rect		rCont;				oh = PORTPORTRECT( GetMacPort())->left;		ov = PORTPORTRECT( GetMacPort())->top;				SetOrigin( 0, 0 );		GETCONTROLRECT( GetMacControl(), &rCont );				FailNIL( clip = NewRgn());		GetClip( clip );		OffsetRgn( clip, -oh, -ov );				FailNIL( temp = NewRgn());				// clip region now aligned to control, but has existing shape. Sect this		// with structure of control itself.			#if APPEARANCE_MGR_AWARE		if ( gMacInfo.hasAppearanceMgr )			GetControlRegion( GetMacControl(), kControlStructureMetaPart, temp );		else		{		#endif					RectRgn( temp, &rCont );			if ( IsDefaultItem())				InsetRgn( temp, -4, -4 );	#if APPEARANCE_MGR_AWARE		}	#endif			SectRgn( temp, clip, temp );		SetClip( temp );		result = ! EmptyRgn( temp );		DisposeRgn( temp );		DisposeRgn( clip );				// prepare for drawing again in case control has its own environment				PrepareForDrawing();	}		return result;		}/*----------------------------***  AdjustPointToOrigin  ***-----------------------------*//*access:			publicoverrides:		description: 	modifies a point in bounds coordinates to port origin of 0,0ins: 			<mouse> bounds point to modifyouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void			ZControlView::AdjustPointToOrigin( Point* mouse ){	Rect		cr;	GETCONTROLRECT( GetMacControl(), &cr );	mouse->h += cr.left;	mouse->v += cr.top;}/*--------------------------------***  ClickContent  ***--------------------------------*//*access:			publicoverrides:		description: 	respond to a click in the viewins: 			<mouse> the mouse coordinates local to view				<modifiers> modifier flagsouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::ClickContent( const Point mouse, const short modifiers ){	short	pc;	Point	cm;	cm = mouse;	AdjustPointToOrigin( &cm );	pc = MZTrackControl( GetMacControl(), cm, modifiers, (ControlActionUPP) -1L );		if ( pc != kControlNoPart )		DoControlClick( pc );}	/*------------------------------------***  Hide  ***------------------------------------*//*access:			publicoverrides:		description: 	make the view non-visible.ins: 			noneouts: 			nonenotes:		----------------------------------------------------------------------------------------*/void		ZControlView::Hide(){	Focus();	PrepareForDrawing();	FocusForContent();	HideControl( GetMacControl());		ZView::Hide();}/*------------------------------------***  Show  ***------------------------------------*//*access:			publicoverrides:		description: 	make the view visible.ins: 			noneouts: 			nonenotes:		----------------------------------------------------------------------------------------*/void		ZControlView::Show(){	ZView::Show();	Focus();	PrepareForDrawing();	FocusForContent();	ShowControl( GetMacControl());}/*-------------------------------***  SetDefaultItem  ***-------------------------------*//*access:			publicoverrides:		ZViewdescription: 	set default status of controlins: 			<isDEfault> TRUE if default itemouts: 			nonenotes:		----------------------------------------------------------------------------------------*/void		ZControlView::SetDefaultItem( Boolean isDefault ){	ZView::SetDefaultItem( isDefault );	#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		SetControlData( GetMacControl(), kControlNoPart, kControlPushButtonDefaultTag, sizeof( Boolean), &isDefault );#endif}/*--------------------------------***  ControlIdle  ***---------------------------------*//*access:			publicoverrides:		description: 	sends an idle message to the control.ins: 			noneouts: 			nonenotes:			if non-appearance, does nothing----------------------------------------------------------------------------------------*/void		ZControlView::ControlIdle(){#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		Focus();		PrepareForDrawing();		FocusForContent();			SendControlMessage( fMacControl, kControlMsgIdle, 0 );	}#endif}/*--------------------------------***  SetAutoIdle  ***---------------------------------*//*access:			publicoverrides:		description: 	sets up automatic idling for the controlins: 			<autoIdle> TRUE to enable auto idling, FALSE to disableouts: 			nonenotes:			installs timer to callback idle----------------------------------------------------------------------------------------*/void		ZControlView::SetAutoIdle( const Boolean autoIdle ){	if ( autoIdle != fAutoIdle )	{		fAutoIdle = autoIdle;				if ( fAutoIdle )			SetTimer( this, kAutoIdleTimerID, 2, FALSE );		else			KillTimer( this, kAutoIdleTimerID, FALSE );	}}/*----------------------------------***  DoTimer  ***-----------------------------------*//*access:			publicoverrides:		description: 	idles control if aut0 idle timer callbackins: 			<timerID> ID of timerouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::DoTimer( const long timerID ){	if (( timerID == kAutoIdleTimerID ) && fAutoIdle )		ControlIdle();	else		ZItemView::DoTimer( timerID );}/*-----------------------------------***  SetSize  ***----------------------------------*//*access:			publicoverrides:		description: 	set the height and width of the view.ins: 			<aWidth> - new width of view				<aHeight> - new height of viewouts: 			nonenotes:			position is not affected----------------------------------------------------------------------------------------*/void		ZControlView::SetSize( const short aWidth, const short aHeight ){	Rect	fr;		GetFrame( &fr );		if ( aWidth != ( fr.right - fr.left ) ||		 aHeight != ( fr.bottom - fr.top ))	{		ZView::SetSize( aWidth, aHeight );		Focus();		PrepareForDrawing();		FocusForContent();		SizeControl( GetMacControl(), aWidth, aHeight );	}}/*----------------------------------***  SetValue  ***----------------------------------*//*access:			publicoverrides:		description: 	set the value of the controlins: 			<aValue> - new value of the controlouts: 			nonenotes:			control immediately redrawn to reflect new value----------------------------------------------------------------------------------------*/void		ZControlView::SetValue( const long aValue ){	Focus();	PrepareForDrawing();	FocusForContent();	SetControlValue( GetMacControl(), aValue );}/*----------------------------------***  SetValue  ***----------------------------------*//*access:			publicoverrides:		description: 	set the value of the controlins: 			<aValue> - new value of the control as a stringouts: 			nonenotes:			control immediately redrawn to reflect new value----------------------------------------------------------------------------------------*/void		ZControlView::SetValue( const Str255 aValStr ){	long	num;		if ( aValStr[0] > 0 )	{		if ( fIsPopUp )			SetTitle( aValStr );		else		{			StringToNum( aValStr, &num );			SetValue( num );		}	}}/*----------------------------------***  SetValue  ***----------------------------------*//*access:			publicoverrides:		description: 	set the value of the controlins: 			<aValue> - new value of the control as a doubleouts: 			nonenotes:			control immediately redrawn to reflect new value----------------------------------------------------------------------------------------*/void		ZControlView::SetValue( const double_t aValue ){	SetValue( rinttol( aValue ));}/*----------------------------------***  GetValue  ***----------------------------------*//*access:			publicoverrides:		description: 	return the value of the controlins: 			noneouts: 			its valuenotes:			----------------------------------------------------------------------------------------*/long		ZControlView::GetValue(){	return GetControlValue( GetMacControl());}/*-------------------------------***  GetValueAsText  ***-------------------------------*//*access:			publicoverrides:		description: 	return the value of the control as a stringins: 			<aStr> receives the string resultouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::GetValueAsText( Str255 aStr ){	long	num = GetValue();		if ( fIsPopUp )	{		// if a pop-up, get the actual item string for the selected menu item				MenuHandle		mH = NULL;	#if TARGET_API_MAC_CARBON		FailNIL( mH = GetControlPopupMenuHandle( GetMacControl()));	#else		FailNIL( mH = (*(PopupPrivateDataHandle)(*GetMacControl())->contrlData)->mHandle );	#endif		GetMenuItemText( mH, num, aStr );	}	else	{		NumToString( num, aStr );	}}/*------------------------------***  GetValueAsFloat  ***-------------------------------*//*access:			publicoverrides:		description: 	return the value of the control as a floating point numberins: 			noneouts: 			its valuenotes:			----------------------------------------------------------------------------------------*/double_t	ZControlView::GetValueAsFloat(){	return (double_t) GetValue();}/*---------------------------------***  Highlight  ***----------------------------------*//*access:			publicoverrides:		description: 	set the hilighting for the controlins: 			<value> highlight valueouts: 			nonenotes:			may be used to briefly "flash" the control if needed----------------------------------------------------------------------------------------*/void		ZControlView::Highlight( const short value ){	Focus();	PrepareForDrawing();	FocusForContent();	HiliteControl( GetMacControl(), value );}/*----------------------------***  GetControlPopupMenu  ***-----------------------------*//*access:			publicoverrides:		description: 	for a pop-up control, return the control's menuins: 			noneouts: 			Handle of menu if a popup, else NULLnotes:			----------------------------------------------------------------------------------------*/MenuHandle		ZControlView::GetControlPopupMenu(){	if ( fIsPopUp )	{	#if TARGET_API_MAC_CARBON			return GetControlPopupMenuHandle( GetMacControl());	#else				PopupPrivateDataHandle		ppd;				ppd = (PopupPrivateDataHandle) (*fMacControl)->contrlData;				return (*ppd)->mHandle;	#endif	}	else		return NULL;}/*---------------------------------***  SetMaximum  ***---------------------------------*//*access:			publicoverrides:		description: 	set the maximumlimit for the controlins: 			<aMax> the maximum for the controlouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::SetMaximum( const long aMax ){	Focus();	PrepareForDrawing();	FocusForContent();	SetControlMaximum( GetMacControl(), aMax );}/*---------------------------------***  SetMinimum  ***---------------------------------*//*access:			publicoverrides:		description: 	set the minimum limit for the controlins: 			<aMin> the minimum for the controlouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::SetMinimum( const long aMin ){	Focus();	PrepareForDrawing();	FocusForContent();	SetControlMinimum( GetMacControl(), aMin );}/*------------------------------***  GetMaximum  ***-------------------------------*//*access:			publicoverrides:		description: 	get the maximum limit for the controlins: 			noneouts: 			the maximum of the controlnotes:			----------------------------------------------------------------------------------------*/long		ZControlView::GetMaximum(){	return GetControlMaximum( GetMacControl());}/*------------------------------***  GetMinimum  ***-------------------------------*//*access:			publicoverrides:		description: 	get the minimum limit for the controlins: 			noneouts: 			the minimum of the controlnotes:			----------------------------------------------------------------------------------------*/long		ZControlView::GetMinimum(){	return GetControlMinimum( GetMacControl());}/*---------------------------------***  SetTitle  ***-----------------------------------*//*access:			publicoverrides:		description: 	set the control's titleins: 			<aTitle> the title stringouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::SetTitle( const Str255 aTitle ){	Focus();	PrepareForDrawing();	FocusForContent();	SetGroupIDFromTitle( aTitle );}/*---------------------------------***  GetTitle  ***-----------------------------------*//*access:			publicoverrides:		description: 	get the control's titleins: 			<aTitle> the title stringouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::GetTitle( Str255 aTitle ){	GetControlTitle( GetMacControl(), aTitle );}/*-------------------------------***  SetActionProc  ***--------------------------------*//*access:			publicoverrides:		description: 	set the control's action proc.ins: 			<aProc> action proc UPPouts: 			nonenotes:			in general you're advised not to bother with this but instead override				ActionCallback or respond to kMsgControlCallBack messages.----------------------------------------------------------------------------------------*/void		ZControlView::SetActionProc( ControlActionUPP aProc ){	SetControlAction( GetMacControl(), aProc );}/*------------------------------***  DoControlClick  ***--------------------------------*//*access:			publicoverrides:		description: 	respond to a positive click on the controlins: 			<partCode> the part of the control clickedouts: 			nonenotes:			default action is to transmit its command to the command chain----------------------------------------------------------------------------------------*/void		ZControlView::DoControlClick( const short partCode ){	long	val;		// checkboxes toggle automatically		if ( fProcID == checkBoxProc ||		 fProcID == kControlCheckBoxProc )	{				val = GetValue()? 0 : 1;		SetValue( val );		SendMessage( kMsgCheckboxToggled, &val );	}		// radio buttons are generally fully automatic. When they are clicked, a message is sent	// to the parent view, which responds by turning off all others with the same group ID.	// When the message returns, this button is turned on.		if ( fProcID == radioButProc ||		 fProcID == kControlRadioButtonProc )	{		if ( GetValue() == 0 )		{			short grpID = GetGroupID();						SendMessage( kMsgRadioControlTurningOn, &grpID );			SetValue( 1L );		}	}		// pushbuttons & pop-ups set the local zoom source to themselves in case they spawn a window		if (( fProcID == pushButProc ) ||		(( fProcID / 16 ) == 23 )  ||		fIsPopUp )	{		Rect	r;				Focus();		FocusForContent();		GetBounds( &r );		SetLocalZoomSource( &r );	}		// send message for general click, with current value:		val = GetValue();	SendMessage( kMsgControlViewClicked, &val );	// send control's command (if any) to the command chain. Mainly useful for simple buttons		if ( fCommand != kNoCmd )		gCurHandler->HandleCommand( fCommand );}/*------------------------------***  ActionCallback  ***--------------------------------*//*access:			publicoverrides:		description: 	called repeatedly as long as the mouse is downins: 			<theCtl> the ControlHandle of the control				<partCode> which bit is being trackedouts: 			nonenotes:			default method sends message with ControlCallBackInfo structure----------------------------------------------------------------------------------------*/void		ZControlView::ActionCallback( ControlHandle theCtl, const short partCode ){	ControlCallBackInfo		cbi;		cbi.partCode = partCode;	cbi.value = GetControlValue( theCtl );		SendMessage( kMsgControlCallBack, &cbi );		Focus();	PrepareForDrawing();	FocusForContent();}/*---------------------------***  InitViewFromResource  ***----------------------------*//*access:			publicoverrides:		description: 	initialise view from View resourceins: 			<theRes> a handle to a 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZItemView::InitViewFromResource( theRes );		ControlViewTemplateHdl		cvH = (ControlViewTemplateHdl) theRes;		fProcID = (*cvH)->procID & ~kControlUsesOwningWindowsFontVariant;	fCommand = (*cvH)->command;		Rect	cr = fFrame;		OffsetRect( &cr, -cr.left, -cr.top );		Focus();	PrepareForDrawing();	FocusForContent();		char	hs = HGetState( theRes );	HLock( theRes );	FailNIL( fMacControl = NewControl( GetRootWindowMacWindow(), &cr, (*cvH)->title, TRUE, (*cvH)->value, fMin, fMax,											fProcID | kControlUsesOwningWindowsFontVariant, (long) this ));		HSetState( theRes, hs );		if ((*cvH)->flags & kFlagControlWantsAutoIdle )		SetAutoIdle( TRUE );}/*----------------------------***  CreateViewResource  ***------------------------------*//*access:			publicoverrides:		description: 	write view template data to resourceins: 			<resHandle> a handleouts: 			nonenotes:			not for app use - RAD tool use only.----------------------------------------------------------------------------------------*/void		ZControlView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );		if ( GetHandleSize( resHandle ) < sizeof( ControlViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			ControlViewTemplateHdl		cvH = (ControlViewTemplateHdl) resHandle;		(*cvH)->procID = fProcID;	(*cvH)->value = GetValue();	(*cvH)->menuID = fMenuID;	(*cvH)->command = GetCommand();	(*cvH)->refCon = 0;	(*cvH)->flags = 0;		if ( fAutoIdle )		(*cvH)->flags |= kFlagControlWantsAutoIdle;		char hs = HGetState( resHandle );	HLock( resHandle );		GetTitle((*cvH)->title );		HSetState( resHandle, hs );		ZItemView::CreateViewResource( resHandle );}/*-------------------------------***  ReportFields  ***---------------------------------*//*access:			publicoverrides:		description: 	provide debug info on demandins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZControlView::ReportFields(){	ZItemView::ReportFields();		XSHOWFIELD( fCommand, ft_signedlong );	XSHOWFIELD( fProcID, ft_signedshort );	XSHOWFIELD( fMenuID, ft_signedshort );	XSHOWFIELD( fIsPopUp, ft_boolean );	XSHOWFIELD( fAutoIdle, ft_boolean );	XSHOWFIELD( fMacControl, ft_Handle );		Str255	tt;	GetTitle( tt );		SHOWFIELD( "->GetTitle()", tt, ft_str255 );}/*----------------------------***  SetGroupIDFromTitle  ***-----------------------------*//*access:			protectedoverrides:		description: 	set up the group ID based on group info in titleins: 			noneouts: 			nonenotes:			group ID is appended to title thus: "title//<id>"----------------------------------------------------------------------------------------*/void		ZControlView::SetGroupIDFromTitle( const Str255 buttonTitle ){	register char	cc = 1;	long			gID = 0;	Boolean			isDefault = FALSE;	Str255			title;	Str15			subStr;		CopyPString( buttonTitle, title );		if ( title[0] > 0 )	{		// scan the string looking for two consecutive forward slashes:				do		{			if ((title[cc] == '/') && (title[cc + 1] == '/'))			{				// found two consecutive slashes- now copy the rest of the string into				// subStr.									subStr[0] = title[0] - cc - 1;	// length of remainder of string				if (subStr[0])				{						BlockMoveData( &title[cc + 2], &subStr[1], subStr[0]);					// look to see if this is the default button in the group. This is indicated					// by the ID number being followed by a '*' character.										if ( subStr[subStr[0]] == '*' )					{						isDefault = TRUE;												// remove char from string												subStr[0]--;					}					else						isDefault = FALSE;									// convert substring to a number. Note that results are unpredictable if					// the string does not have a pure number following the two slashes.					// e.g. "My Button//hello" will certainly not work!										StringToNum( subStr, &gID );										// shorten original string by the amount needed to remove extra										title[0] = cc - 1;					SetGroupID( gID );										break;				}				}		}		while( ++cc <= title[0] );	}		SetControlTitle( GetMacControl(), title );		if ( isDefault )		SetValue( 1L );}/*---------------------------***  DrawNonThemeFocusRing  ***----------------------------*//*access:			protectedoverrides:		description: 	draws the old-fashioned focus ring if we don't have appearanceins: 			<aroundRect> button's frameouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZControlView::DrawNonThemeFocusRing( const Rect* aroundRect ){	Rect	r = *aroundRect;		InsetRect( &r, -4, -4 );	if (IsActive() && IsEnabled())		RGBForeColor( &gBlack );	else		RGBForeColor( &gMidGray );			PenNormal();	PenSize( 3, 3 );	FrameRoundRect( &r, 16, 16 );}void	ZControlView::CalcControlTrueRect(){	Rect	fr;	short	h, v;		Focus();	GetContentRect( &fr );		h = PORTPORTRECT( GetMacPort())->left;	v = PORTPORTRECT( GetMacPort())->top;		OffsetRect( &fr, -h, -v );		SETCONTROLRECT( fMacControl, &fr );	}#pragma mark -pascal void			ZControlView::ControlViewActionProc( ControlHandle theControl, short partCode ){	ZControlView*	cv;		try	{		cv = (ZControlView*) GetControlReference( theControl );				if ( cv )			cv->ActionCallback( theControl, partCode );	}	catch( ... )	{		// no propagation	}}/*-------------------------***  CreateNewResourceControl  ***---------------------------*//*access:			globaloverrides:		description: 	build control from CNTL, but override resource's frame settingins: 			<aParent> parent view				<aFrame> view's frame				<CNTLid> the ID of a CNTL resource to useouts: 			the viewnotes:			may be used as the constructor function for suitable dialog items----------------------------------------------------------------------------------------*/ZView*	CreateNewResourceControl( ZView* aParent, Rect* aFrame, short CNTLid ){	ZControlView*	cv;		FailNIL( cv = new ZControlView( aParent, CNTLid ));		cv->PlaceAt( aFrame->left, aFrame->top );		return cv;}/*-----------------------***  CreateNewControlWithParams  ***---------------------------*//*access:			globaloverrides:		description: 	build control from parameters passed in a CTRL magic stringins: 			<aParent> parent view				<aFrame> view's frame				<paramCount> count of parametersouts: 			the viewnotes:			param[0] is the procID				param[1] is control's value				param[2] is the control's minimum value				param[3] is the control's max value----------------------------------------------------------------------------------------*/ZView*	CreateNewControlWithParams( ZView* aParent, Rect* aFrame, short paramCount, long params[] ){	ZControlView*	cv;		FailNIL( cv = new ZControlView( aParent, aFrame, params[0], params[1], params[2], params[3] ));	return cv;}