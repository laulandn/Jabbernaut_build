/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZPictureView.cpp		-- a view that can display a picture******			©2000, Graham Cox*****************************************************************************************************/#include	"ZPictureView.h"#include	"MacZoop.h"DIALOGITEMCONSTRUCTOR( ZPictureView );/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZPictureView::ZPictureView( ZView* aParent, Rect* aFrame, const short picResID )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZPictureView;		fPict = NULL;	fPicID = 0;	fOwnsPict = FALSE;		if ( picResID )		SetPicture( picResID );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZPictureView::ZPictureView( ZView* aParent, const short viewResourceID )	: ZItemView( aParent ){	ViewResInit( viewResourceID ); 	}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZPictureView::ZPictureView( ZView* aParent, PicHandle aPicture )	: ZItemView( aParent, NULL ){	classID = CLASS_ZPictureView;	fPict = NULL;	fOwnsPict = FALSE;		SetPicture( aPicture );}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZPictureView::~ZPictureView(){	if ( fOwnsPict && fPict )		KillPicture( fPict );}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the content of this viewins: 			noneouts: 			nonenotes:			draws the view's picture. Whether it scales or not depends on how it was				set up.----------------------------------------------------------------------------------------*/void	ZPictureView::DrawContent(){	Rect	r;		if ( fPict )	{		GetBounds( &r );		DrawPicture( fPict, &r );	}}/*----------------------------------***  SetPicture  ***--------------------------------*//*access:			publicoverrides:		description: 	set the picture from a resourceins: 			<resID> the resource ID of a PICT resourceouts: 			nonenotes:			detaches the resources and becomes owner of picture----------------------------------------------------------------------------------------*/void	ZPictureView::SetPicture( const short resID ){	if ( resID )	{		PicHandle	p = GetPicture( resID );			FailNILRes( p );				DetachResource((Handle) p );		HNoPurge((Handle) p );				fOwnsPict = TRUE;		fPicID = resID;				SetPicture( p );	}}/*----------------------------------***  SetPicture  ***--------------------------------*//*access:			publicoverrides:		description: 	set the picture from an existing handleins: 			<aPicture> the pictureouts: 			nonenotes:			does not become owner by default----------------------------------------------------------------------------------------*/void	ZPictureView::SetPicture( PicHandle aPicture ){	Rect	r;		if ( aPicture )	{		GetFrame( &r );			// if the frame not yet set, set it from picture				if ( EmptyRect( &r ))			fFrame = (*aPicture)->picFrame;					// if already a picture here, remove it				if ( fPict && ( fPict != aPicture ) && fOwnsPict )			KillPicture( fPict );					fPict = aPicture;		fPicID = 0;				PostRefresh();	}}/*------------------------------***  InitViewFromResource  ***--------------------------*//*access:			publicoverrides:		description: 	initialise the view from data in a 'View' resource handleins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZPictureView::InitViewFromResource( Handle theRes ){	ZItemView::InitViewFromResource( theRes );		PictureViewTemplateHdl		pvH = (PictureViewTemplateHdl) theRes;	SetPicture((*pvH)->pictID );	}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	create 'View' resource for this objectins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			Not for application use - used by the RAD tool.----------------------------------------------------------------------------------------*/void	ZPictureView::CreateViewResource( Handle theRes ){	FailNILParam( theRes );		if ( GetHandleSize( theRes ) < sizeof( PictureViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );		PictureViewTemplateHdl		pvH = (PictureViewTemplateHdl) theRes;	(*pvH)->pictID = fPicID;			// if the view contains a picture that is not already a resource, the caller must	// take steps as necessary to handle the actual PICT resource as well.		ZItemView::CreateViewResource( theRes );}