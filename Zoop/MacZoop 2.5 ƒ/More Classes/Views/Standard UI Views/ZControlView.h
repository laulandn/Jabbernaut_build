/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZControlView.h		-- a view with a Mac control******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZCONTROLVIEW__#define	__ZCONTROLVIEW__#include	"ZItemView.h"#include	"MZDialogTypes.h"#include	<Controls.h>#include	<fp.h>DEFINECLASSID( ZControlView, 'zctv' );// the class:class	ZControlView	: public ZItemView{public:	ZControlView( ZView* aParent, const short CNTLid );	ZControlView( ZView* aParent, Rect* aFrame,					const short controlProcID, const long value = 0,					const long min = 0, const long max = 1 );	ZControlView( const short viewResourceID, ZView* aParent );	ZControlView();		virtual ~ZControlView();// drawing		virtual void			DrawContent();	virtual Boolean			FocusForContent();	// clicking	virtual void			ClickContent( const Point mouse, const short modifiers );	virtual void			AdjustPointToOrigin( Point* mouse );// state		virtual void			Hide();	virtual void			Show();	virtual void			SetDefaultItem( Boolean isDefault );// idling:	virtual void			ControlIdle();	virtual void			SetAutoIdle( const Boolean autoIdle );	virtual void			DoTimer( const long timerID );		// sizing and positioning	virtual void			SetSize( const short aWidth, const short aHeight );// get and set command for button		virtual void			SetCommand( ZoopCommand aCmd ) { fCommand = aCmd; };	virtual ZoopCommand		GetCommand() { return fCommand; };// get and set value of control		virtual void			SetValue( const long aValue );	virtual void			SetValue( const Str255 aValStr );	virtual void			SetValue( const double_t aValue );	virtual long			GetValue();	virtual void			GetValueAsText( Str255 aStr );	virtual double_t		GetValueAsFloat();	virtual void			Highlight( const short value );	virtual MenuHandle		GetControlPopupMenu();	// limits		virtual void			SetMaximum( const long aMax );	virtual void			SetMinimum( const long aMin );	virtual long			GetMaximum();	virtual long			GetMinimum();// title		virtual void			SetTitle( const Str255 aTitle );	virtual void			GetTitle( Str255 aTitle );// control actions		virtual void			SetActionProc( ControlActionUPP aProc );	virtual void			DoControlClick( const short partCode );	virtual void			ActionCallback( ControlHandle theCtl, const short partCode );// RAD support:	virtual void			InitViewFromResource( Handle theRes );	virtual void			CreateViewResource( Handle resHandle );		virtual void			ReportFields();	inline ControlHandle	GetMacControl() { return fMacControl; };protected:	virtual void			SetGroupIDFromTitle( const Str255 buttonTitle );	void					DrawNonThemeFocusRing( const Rect* aroundRect );	void					CalcControlTrueRect();		ZoopCommand				fCommand;	short					fProcID;	short					fMenuID;	Boolean					fIsPopUp;	Boolean					fAutoIdle;		static ControlActionUPP	sZControlViewProc;	static pascal void		ControlViewActionProc( ControlHandle theControl, short partCode );	private:	ControlHandle			fMacControl;};	// messages:enum{	kMsgRadioControlTurningOn	= 'cvr+',	kMsgRadioControlTurningOff	= 'cvr-',	kMsgCheckboxToggled			= 'cvxx',	kMsgControlViewClicked		= 'cvkk',	kMsgControlCallBack			= 'cvac'};enum{	kAutoIdleTimerID			= -48001};// this info structure sent with ControlCallBack message:typedef struct{	short	partCode;	short	value;}ControlCallBackInfo;// this utility function will handle the rest of the radio button grouping chore for you. Call it// from any parent view that manages groups of radio buttons. It simply sets the value of all// ZControlView items with the matching group ID to 0.void	RadioButtonChore( ZViewList* childViews, const short groupID );// constructor functions for resource based and magic string controls in dialogs:DICONSTRUCTORPROTOTYPE( ZControlView );ZView*	CreateNewResourceControl( ZView* aParent, Rect* aFrame, short CNTLid );ZView*	CreateNewControlWithParams( ZView* aParent, Rect* aFrame, short paramCount, long params[] );/*This object is a view that contains one Mac control. Since there are a large variety of controlsavailable in the toolbox, especially with appearance, this is a very compact and convenient wayto deploy user interface elements in your applications.NOTE: Do not use this object for the edit text control. A much easier to use view, ZEditFieldView,is available which does the same job for a lot less aggravation. Its API is very similar to this.*/#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of CNTL resource:typedef	struct{	Rect			bounds;	short 			initialValue;	unsigned char 	visible;	unsigned char 	unUsed;	short			maxValue;	short 			minValue;	short 			procID;	long			refCon;	unsigned char 	title[1];}CNTLRec, *CNTLPtr, **CNTLHdl;// structure of 'View' resource for ZControlView:typedef struct{	ItemViewTemplate	ivt;			// item view parameters	short				procID;			// proc ID of control	short				value;			// initial value	short				menuID;			// menu ID if a pop-up	long				command;		// button command	long				refCon;			// ref con	unsigned long		flags;			// flags	Str255				title;			// title string}ControlViewTemplate, *ControlViewTemplatePtr, **ControlViewTemplateHdl;// flags in above structure:enum{	kFlagControlWantsAutoIdle		= 1	// enable auto idling};	#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif