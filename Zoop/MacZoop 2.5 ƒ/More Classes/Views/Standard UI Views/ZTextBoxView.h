/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZTextBoxView.h		-- view that draws (static) text******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZTEXTBOXVIEW__#define	__ZTEXTBOXVIEW__#include	"ZItemView.h"#include	"MZDialogTypes.h"DEFINECLASSID( ZTextBoxView, 'ztbv' );// the class:class	ZTextBoxView	: public ZItemView{protected:	Handle		fText;	short		fJustify;	Boolean		fDrawPlacard;	public:	ZTextBoxView( ZView* aParent, Rect* aFrame = NULL, const short flags = 0 );	ZTextBoxView( ZView* aParent, const short viewResourceID );		~ZTextBoxView();		virtual void	DrawContent();		virtual void	SetValue( const long aValue );	virtual void	SetValue( const double_t aValue );	virtual void	SetValue( const Str255 aValue );	virtual void	SetTitle( const Str255 aTitle ) { SetValue( aTitle ); };		virtual void	SetText( Ptr textBuf, const long textSize );	virtual void	Substitute( Str255 subStr, char* tagStr );		virtual void    SetFontAlignment( short aJust ) { fJustify = aJust; };	virtual void	SetDrawsPlacard( Boolean doesDraw ) { fDrawPlacard = doesDraw; };// RAD tool support:	virtual void	InitViewFromResource( Handle theRes );	virtual void	CreateViewResource( Handle resHandle );protected:	virtual void	SubstituteParamText( Str255 textOut );};/*This class implements a simple textbox view. It draws text, nothing more,nothing less. Works like dialog static text items.*/DICONSTRUCTORPROTOTYPE( ZTextBoxView );// special creation functions allow you to automatically display version information// from your VERS resource or the MacZoop versionZView*	CreateNewMacZoopVersionStringView( ZView* aParent, Rect* aFrame );ZView*	CreateNewApplicationVersionStringView( ZView* aParent, Rect* aFrame );#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZTextBoxView:typedef struct{	ItemViewTemplate	ivt;	short				justify;	Str255				theString;}TextBoxViewTemplate, *TextBoxViewTemplatePtr, **TextBoxViewTemplateHdl;// structure of 'vers' resource:typedef struct{	unsigned char	primary;	unsigned char	secondary;	unsigned char	releaseStage;	unsigned char	prerelease;	short			regionCode;	char			shortString;	// record contains variable data beyond here}VersResRecord, *VersResPtr, **VersResHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif