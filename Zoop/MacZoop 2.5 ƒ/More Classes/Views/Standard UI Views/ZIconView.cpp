/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZIconView.cpp		-- view that draws icons******			©2000, Graham Cox*****************************************************************************************************/#include	"ZIconView.h"#include	"MacZoop.h"DIALOGITEMCONSTRUCTOR( ZIconView );/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZIconView::ZIconView( ZView* aParent, Rect* aFrame, const short iconID )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZIconView;		fMacIcon = NULL;	fID = iconID;		if ( aFrame == NULL )		SetSize( 32, 32 );		// find what type to use:		Handle	h = GetResource( 'ICN#', fID );		if ( h )	{		fType = IconIndexed;		ReleaseResource( h );	}	else	{		h = GetResource( 'cicn', fID );				if ( h )		{			fType = IconColour;			ReleaseResource( h );			FailNILRes( fMacIcon = (Handle) GetCIcon( fID ));						// modify frame to fit actual icon						Rect	br;						br = (*(CIconHandle) fMacIcon )->iconPMap.bounds;			SetSize( br.right - br.left, br.bottom - br.top );		}		else		{			FailNILRes( h = GetIcon( fID ));						if ( h )			{				fType = IconPlain;				fMacIcon = h;				HNoPurge( fMacIcon );			}		}	}	SetNoBackgroundErase( TRUE );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZIconView::ZIconView( ZView* aParent, IconType aType, const short resID )	: ZItemView( aParent, NULL ){	classID = CLASS_ZIconView;	fMacIcon = NULL;		SetSize( 32, 32 );	LoadMacIcon( aType, resID );	SetNoBackgroundErase( TRUE );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZIconView::ZIconView( ZView* aParent, const short viewResourceID )	: ZItemView( aParent ){	classID = CLASS_ZIconView;	fMacIcon = NULL;	SetSize( 32, 32 );	ViewResInit( viewResourceID );}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZIconView::~ZIconView(){	if( fMacIcon )	{		if ( fType == IconColour )			DisposeCIcon((CIconHandle) fMacIcon );		else			ReleaseResource( fMacIcon );	}}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the iconins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZIconView::DrawContent(){	Boolean 	state = IsEnabled() && IsActive();	Rect		ir;		GetBounds( &ir );		switch ( fType )	{		case IconIndexed:			PlotIconID( &ir, kAlignAbsoluteCenter, state? kTransformNone : kTransformDisabled, fID );			break;				case IconPlain:			if ( fMacIcon )			{				LoadResource( fMacIcon );				PlotIcon( &ir, fMacIcon );			}			break;				case IconColour:			if ( fMacIcon )			{				CIconHandle	ci = (CIconHandle) fMacIcon; 								PlotCIconHandle( &ir, kAlignNone, state? kTransformNone : kTransformDisabled, ci );			}			break;					default:			break;	}}/*-----------------------------***  InitViewFromResource  ***---------------------------*//*access:			publicoverrides:		description: 	set up view object from View resourceins: 			<theRes> handle to 'View' resource for this classouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZIconView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZItemView::InitViewFromResource( theRes );		IconViewTemplateHdl		ivH = (IconViewTemplateHdl) theRes;	LoadMacIcon((*ivH)->iType, (*ivH)->iconID );	}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	fill in view resource detailsins: 			<resHandle> a Handleouts: 			nonenotes:			not for app use - used by the RAD tool----------------------------------------------------------------------------------------*/void		ZIconView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );		if ( GetHandleSize( resHandle ) < sizeof( IconViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			IconViewTemplateHdl		ivH = (IconViewTemplateHdl) resHandle;		(*ivH)->iType = fType;	(*ivH)->iconID = fID;		ZItemView::CreateViewResource( resHandle );}/*---------------------------------***  ReportFields  ***-------------------------------*//*access:			publicoverrides:		description: 	report member states to inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZIconView::ReportFields(){	ZItemView::ReportFields();	XSHOWFIELD( fMacIcon, ft_Handle );	XSHOWFIELD( fType, ft_unsignedchar );	XSHOWFIELD( fID, ft_signedshort );}/*---------------------------------***  LoadMacIcon  ***--------------------------------*//*access:			protectedoverrides:		load icon resources, etc member states to inspectorins: 			<aType> type of icon to get				<resID> ID of icon to getouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZIconView::LoadMacIcon( IconType aType, const short resID ){	fID = resID;	fType = aType;		switch( fType )	{		default:		case IconIndexed:			break;					case IconColour:			FailNILRes( fMacIcon = (Handle) GetCIcon( fID ));						// modify frame to fit actual icon						Rect	br;						br = (*(CIconHandle) fMacIcon )->iconPMap.bounds;			SetSize( br.right - br.left, br.bottom - br.top );			break;					case IconPlain:				FailNILRes( fMacIcon = GetIcon( fID ));			HNoPurge( fMacIcon );			break;	}}