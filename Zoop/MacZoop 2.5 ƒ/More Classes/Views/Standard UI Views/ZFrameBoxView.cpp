/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZFrameBoxView.cpp		-- default user item for dialogs******			©2000, Graham Cox*****************************************************************************************************/#include	"ZFrameBoxView.h"#include	"MacZoop.h"/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZFrameBoxView::ZFrameBoxView( ZView* aParent, Rect* aFrame, const short titleID )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZFrameBoxView;		fTitle = NULL;	SetAcceptsMouseClicks( FALSE );	SetNoBackgroundErase( TRUE );	SetFontInfo( kFontIDGeneva, 9, bold );	SetForeColour( &gBlack );		if ( titleID )	{		fTitle = GetString( titleID );		HNoPurge((Handle) fTitle );		DetachResource((Handle) fTitle );	}}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZFrameBoxView::ZFrameBoxView( ZView* aParent, const short viewResourceID )	: ZItemView( aParent ){	classID = CLASS_ZFrameBoxView;		fTitle = NULL;	ViewResInit( viewResourceID );}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZFrameBoxView::~ZFrameBoxView(){	if ( fTitle )		DisposeHandle((Handle) fTitle );}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the frame and (optionally) titleins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZFrameBoxView::DrawContent(){	Rect		r;	FontInfo	fi;		GetBounds( &r );	if ( fTitle )	{		GetFontInfo( &fi );		r.top += fi.ascent - fi.descent;	}	#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		DrawThemePrimaryGroup( &r, IsActive() && IsEnabled());	else	{#endif		InsetRect( &r, 1, 1 );		if ( IsActive() && IsEnabled())			EtchGrayRect( &r );			else		{			PenNormal();			RGBForeColor( &gMidGray );			FrameRect( &r );		}		PrepareForDrawing();#if APPEARANCE_MGR_AWARE	}#endif	if ( fTitle )	{		Rect	tBox;				GetBounds( &r );				HLock((Handle) fTitle );		tBox.left = kFrameBoxTitleInset;		tBox.right = tBox.left + StringWidth( *fTitle ) + ( fi.widMax / 2 );		tBox.top = r.top;		tBox.bottom = tBox.top + fi.ascent + fi.descent + fi.leading;				if ( IsActive() && IsEnabled())			TextMode( srcOr );		else			TextMode( grayishTextOr );					TETextBox( &(*fTitle)[1], *fTitle[0], &tBox, teJustCenter );		HUnlock((Handle) fTitle );	}}/*----------------------------------***  SetValue  ***----------------------------------*//*access:			publicoverrides:		description: 	sets the title for the frame boxins: 			<aVal> the title to setouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZFrameBoxView::SetValue( const Str255 aVal ){	if ( aVal[0] > 0 )	{		if ( fTitle )			PtrToXHand((Ptr) aVal, (Handle) fTitle, aVal[0] + 1 );		else			fTitle = NewString( aVal );					PostRefresh();	}}/*------------------------------***  InitViewFromResource  ***--------------------------*//*access:			publicoverrides:		description: 	initialise the view from data in a 'View' resource handleins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZFrameBoxView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZItemView::InitViewFromResource( theRes );		FrameBoxTemplateHdl		fbH = (FrameBoxTemplateHdl) theRes;		char hs = HGetState( theRes );	HLock( theRes );	SetValue((*fbH)->title );	HSetState( theRes, hs );}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	Fills in the resource handle according to its templated structureins: 			<resHandle> valid handle of adequate sizeouts: 			nonenotes:			This method should only be used by the RAD tool to create View resources				(not for application use)----------------------------------------------------------------------------------------*/void	ZFrameBoxView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );	if ( GetHandleSize( resHandle ) < sizeof( FrameBoxTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			FrameBoxTemplateHdl		fbH = (FrameBoxTemplateHdl) resHandle;		BlockMoveData((Ptr) *fTitle, (Ptr)(*fbH)->title, GetHandleSize((Handle) fTitle ));		ZItemView::CreateViewResource( resHandle );}/*---------------------------***  CreateNewUserItemView  ***----------------------------*//*access:			globaloverrides:		description: 	dialog item constructor function for this viewins: 			<aParent> the view's parent				<aFrame> the view's frame				<param> ID of 'STR ' resource to use for titleouts: 			nonenotes:			----------------------------------------------------------------------------------------*/ZView*	CreateNewUserItemView( ZView* aParent, Rect* aFrame, short param ){	return new ZFrameBoxView( aParent, aFrame, param );}