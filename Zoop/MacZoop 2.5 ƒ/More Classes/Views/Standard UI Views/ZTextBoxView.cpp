/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZTextBoxView.cpp		-- view that draws (static) text******			©2000, Graham Cox*****************************************************************************************************/#include	"ZTextBoxView.h"#include	"MacZoop.h"#include 	<string.h>DIALOGITEMCONSTRUCTOR( ZTextBoxView );/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZTextBoxView::ZTextBoxView( ZView* aParent, Rect* aFrame, const short flags )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZTextBoxView;		FailNIL( fText = NewHandle( 0 ));	fJustify = teFlushLeft;	fDrawPlacard = FALSE;	SetAcceptsMouseClicks( FALSE );	SetForeColour( &gBlack );	SetNoBackgroundErase( TRUE );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZTextBoxView::ZTextBoxView( ZView* aParent, const short viewResourceID )	: ZItemView( aParent ){	classID = CLASS_ZTextBoxView;		FailNIL( fText = NewHandle( 0 ));	fJustify = teFlushLeft;		ViewResInit( viewResourceID );}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZTextBoxView::~ZTextBoxView(){	if ( fText )		DisposeHandle( fText );}/*---------------------------------*** DrawContent ***----------------------------------*//*access:			publicoverrides:		description: 	Update the text on demandins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::DrawContent(){	Rect		br;	Str255		txt;			GetBounds( &br );		if ( fDrawPlacard )	{		#if APPEARANCE_MGR_AWARE		if ( gMacInfo.hasAppearanceMgr )		{			DrawThemePlacard( &br, ( IsActive() && IsEnabled())? kThemeStateActive : kThemeStateInactive );		}		else		{	#endif			RGBBackColor( IsActive()? &gMediumGray: &gVeryLightGray );			EraseRect( &br );			FrameRect( &br );				#if APPEARANCE_MGR_AWARE		}	#endif		InsetRect( &br, 2, 2 );	}		if ( IsEnabled() && IsActive())		TextMode( srcOr );	else		TextMode( grayishTextOr );			SubstituteParamText( txt );	TETextBox( &txt[1], txt[0], &br, fJustify );}/*-----------------------------------*** SetValue ***-----------------------------------*//*access:			publicoverrides:		description: 	set the field to the value passedins: 			<aValue> number to set as field textouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::SetValue( const long aValue ){	Str255 	ns;		NumToString( aValue, ns );	SetValue( ns );}/*----------------------------------*** SetValue ***------------------------------------*//*access:			publicoverrides:		description: 	set the field to the floating point number passedins: 			<aValue> floating point number to set as field textouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::SetValue( const double_t aValue ){	Str255		ns;		RealToString( aValue, ns, 3 );	SetValue( ns );}/*-----------------------------------*** SetValue ***-----------------------------------*//*access:			publicoverrides:		description: 	set the field text to the string passedins: 			<aValue> string value to set as field textouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::SetValue( const Str255 aValue ){	FailOSErr( PtrToXHand( &aValue[1], fText, aValue[0] ));	PostRefresh();}/*------------------------------------*** SetText ***-----------------------------------*//*access:			publicoverrides:		description: 	set the text from an arbitrary text bufferins: 			<textBuf> pointer to text to copy				<textSize> length of text to copyouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::SetText( Ptr textBuf, const long textSize ){	FailNILParam( textBuf );	FailOSErr( PtrToXHand( textBuf, fText, textSize ));	PostRefresh();}/*-----------------------------------*** Substitute ***---------------------------------*//*access:			publicoverrides:		description: 	replace a marker tag with the string and redisplayins: 			<subStr> string to substitute				<tagStr> characters to replace in textouts: 			nonenotes:			note <tagStr> is a C string----------------------------------------------------------------------------------------*/void	ZTextBoxView::Substitute( Str255 subStr, char* tagStr ){	long tagLength = strlen( tagStr );		Munger( fText, 0, tagStr, tagLength, &subStr[1], subStr[0] );		PostRefresh();}/*------------------------------***  InitViewFromResource  ***--------------------------*//*access:			publicoverrides:		description: 	initialise the view from data in a 'View' resource handleins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZTextBoxView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZItemView::InitViewFromResource( theRes );		TextBoxViewTemplateHdl	tbH = (TextBoxViewTemplateHdl) theRes;	SetFontAlignment((*tbH)->justify );		char hs = HGetState( theRes );	HLock( theRes );	SetValue((*tbH)->theString );	HSetState( theRes, hs );}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	Fills in the resource handle according to its templated structureins: 			<resHandle> valid handle of adequate sizeouts: 			nonenotes:			This method should only be used by the RAD tool to create View resources				(not for application use)----------------------------------------------------------------------------------------*/void	ZTextBoxView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );		if ( GetHandleSize( resHandle ) < sizeof( TextBoxViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			TextBoxViewTemplateHdl	tbH = (TextBoxViewTemplateHdl) resHandle;			(*tbH)->justify = fJustify;	BlockMoveData( *fText, &(*tbH)->theString[1], MIN( 255, GetHandleSize( fText )));	(*tbH)->theString[0] = MIN( 255, GetHandleSize( fText ));		ZItemView::CreateViewResource( resHandle );	}/*-----------------------------*** SubstituteParamText ***------------------------------*//*access:			protectedoverrides:		description: 	perform paramtext substitutions as necessaryins: 			noneouts: 			nonenotes:			substitute ^0, ^1, ^2 and ^3 by default.----------------------------------------------------------------------------------------*/void	ZTextBoxView::SubstituteParamText( Str255 txtOut ){	Handle			temp;	StringHandle	pa;	Boolean			nul = FALSE;	char			fa[2];		fa[0] = '^';		// make a copy of original text:		temp = fText;	FailOSErr( HandToHand( &temp ));		for ( short i = 0; i < 4; i++ )	{		fa[1] = i + '0';			#if TARGET_API_MAC_CARBON		// this is poor- I'll make it more elegant later		Str255			a, b, c, d;		GetParamText( a, b, c, d );				switch( i )		{			case 0:				pa = NewString( a );				break;							case 1:				pa = NewString( b );				break;							case 2:				pa = NewString( c );				break;							case 3:				pa = NewString( d );				break;		}			#else		pa = LMGetDAStrings( i );	#endif		// if the string is NULL, we substitute the empty string				if ( pa == NULL )		{			FailNIL( pa = NewString( "\p" ));		// make an empty string			nul = TRUE;		}				// search and replace ^0, ^1, etc...				HLock((Handle) pa );		Munger( temp, 0, fa, 2, (Ptr)(*pa) + 1, **pa );		HUnlock((Handle) pa );				if ( nul )		{			DisposeHandle((Handle) pa );			nul = FALSE;		}	}	// copy out the modified text:		txtOut[0] = MIN( GetHandleSize( temp ), 255 );	BlockMoveData( *temp, &txtOut[1], txtOut[0] );	DisposeHandle( temp );}#pragma mark -/*---------------------*** CreateNewMacZoopVersionStringView ***------------------------*//*access:			globaloverrides:		description: 	create a textbox view containing the MacZoop version numberins: 			<aParent> view's parent				<aFrame> view's frameouts: 			the viewnotes:			----------------------------------------------------------------------------------------*/ZView*	CreateNewMacZoopVersionStringView( ZView* aParent, Rect* aFrame ){	ZTextBoxView*	tv;	Str255			s;		FailNIL( tv = new ZTextBoxView( aParent, aFrame ));		MacZoopVersionStr( s );	tv->SetValue( s );		return tv;}/*-------------------*** CreateNewApplicationVersionStringView ***----------------------*//*access:			globaloverrides:		description: 	create a textbox view containing the app's version numberins: 			<aParent> view's parent				<aFrame> view's frameouts: 			the viewnotes:			builds string from data in the VERS resource----------------------------------------------------------------------------------------*/ZView*	CreateNewApplicationVersionStringView( ZView* aParent, Rect* aFrame ){	ZTextBoxView*	tv;	VersResHdl		vH;	Str255			s;		FailNILRes( vH = (VersResHdl) GetResource( 'vers', 1 ));	FailNIL( tv = new ZTextBoxView( aParent, aFrame ));	CopyPString((ConstStr255Param) &(*vH)->shortString, s );	tv->SetValue( s );	ReleaseResource((Handle) vH );			return tv;}