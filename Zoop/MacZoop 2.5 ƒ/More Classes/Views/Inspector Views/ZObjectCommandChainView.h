/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZObjectCommandChainView.h		-- illustrates dynamic command chain graphically******			© 2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZOBJECTCOMMANDCHAINVIEW__#define	__ZOBJECTCOMMANDCHAINVIEW__#include	"ZScrollAwareView.h"DEFINECLASSID( ZObjectCommandChainView, 'zccv' );DEFINECLASSID( ZObjectCommandChainLink, 'zccl' );class	ZObjectCommandChainView : public ZScrollAwareView{protected:	ZCommander*		fChainHead;	public:	ZObjectCommandChainView( ZView* aParent, Rect* aFrame = NULL );	virtual void	DrawContent();	virtual void	SetChainHead( ZCommander* chainHead );	virtual void	CalcBounds();	virtual void	ReceiveMessage( ZComrade* aSender, ZoopMessage msg, UntypedPtr msgData );	virtual void	SetSize( const short width, const short height );	protected:	virtual void	DrawLinkArrow( Rect* fromRect, Rect* toRect );	virtual long	CountChainLinks();	virtual void	MakeChainViews();};class	ZObjectCommandChainLink	: public ZView{protected:	ZCommander*		fLinkObject;	public:	ZObjectCommandChainLink( ZView* aParent, Rect* aFrame = NULL, ZCommander* linkObject = NULL );		virtual void	DrawContent();	virtual void	ClickContent( const Point mouse, const short modifiers );};enum{	kChainLinkViewHeight		= 40,	kChainLinkViewSpacing		= 24,	kMsgChainLinkClicked		= 'CLKK'};/*This pair of objects implements the graphical command chain diagram. Ecah link in the chainis drawn using a link view, which is clickable. When the chain changes, the overall viewregenerates the views and recalculates the bounds.This is used in the Object Inspector to give a live diagram of the command chain.*/#endif