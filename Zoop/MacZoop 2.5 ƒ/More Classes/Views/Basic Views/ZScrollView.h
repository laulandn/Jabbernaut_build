/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZScrollView.h		-- a view that scrolls******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZSCROLLVIEW__#define	__ZSCROLLVIEW__#include	"ZView.h"DEFINECLASSID( ZScrollView, 'zscv' );// messages:enum{	kMsgScrollViewNotifyScroll		= 'scrl',	kMsgScrollViewAreaReveal		= 'scra',	kWidthOfScrollArrow				= 24,	kWidthOfScrollThumb				= 16};// the class:class	ZScrollView	: 	public ZView{protected:	ControlHandle		theHBar;			// the horizontal scrollbar	ControlHandle		theVBar;			// the vertical scrollbar	Rect				fBounds;			// the logical bounds rect	short				hScale;				// amount to move per click horizontally	short				vScale;				// amount to move per click vertically	short				hPage;				// horizontal page value	short				vPage;				// vertical page value	short				cInitValue;			// used for live scrolling support	short				sbWidth;			// width of scrollbars	short				fHBarInset;			// inset of H Bar	short				fVBarInset;			// inset of V Bar	short				fUseThrottle;		// if non-zero, wait this many ticks between scrolls	Boolean				fHasSizeBox;		// true if includes a sizebox areapublic:	ZScrollView( ZView* aParent, Rect* aFrame = NULL,					const Boolean makeHBar = TRUE,					const Boolean makeVBar = TRUE,					const Boolean hasSizeBox = FALSE );	ZScrollView( ZView* aParent, const short viewResourceID );	virtual ~ZScrollView();// drawing		virtual void		DrawAll();	virtual void		DrawBorder( Rect* borderFrame );	virtual void		DrawSizingBox() {};	virtual void		ClickSizingBox() {};// clicking & typing	virtual void		Click( const Point mouse, const short modifiers );	virtual void		Type( const char theKey, const short modifiers );// state	virtual void		Activate();	virtual void		Deactivate();	virtual void		Enable();	virtual void		Disable();	virtual void		Show();	virtual void		Hide();	virtual void		DoSelectionUpdate( Boolean state );// sizing	virtual void		SetSize( const short aWidth, const short aHeight );// get info about frame, bounds, etc.			virtual void		GetContentRect( Rect* aRect );	virtual void		GetBounds( Rect* aBounds ) { *aBounds = fBounds; };	virtual void		SetBounds( const Rect& aBounds );	virtual void		SetBounds( const short hSize, const short vSize );	virtual void		GetPosition( short* posH, short* posV );	virtual void		GetSizingBox( Rect* sizBox );	virtual void		SetScrollbarInset( const short hBarInset = 0, const short vBarInset = 0 );	virtual void		GetAuxiliaryPlacardRect( Rect* placRect, const Boolean horv = FALSE );// scrolling stuff		virtual void		SetScrollAmount( const short hScale, const short vScale, const Boolean autoTweak = FALSE );	virtual void		ScrollView( const short dh, const short dv );	virtual void		ScrollTo( const short hPosition, const short vPosition );	virtual void		ScrollAsNeeded( const Point toShowPt );	virtual void		ScrollCallback( ControlHandle aCtl, const short partCode );	virtual Boolean		AutoScroll( Point mousePt, const short inset = 0 );		virtual Boolean		WillScroll( Point mousePt, const short inset = 0 );	virtual void		ClickScroll( const Point mouse );	virtual void		DDInsideView( const Point mouse, const DragReference theDrag );		virtual void		SetScrollBarWidth( const short aWidth );	virtual void		TweakHeight();	virtual void		ScrollHook( const short dh, const short dv );	short				SetScrollThrottle( const short ticks ){ short t = fUseThrottle; fUseThrottle = ticks; return t; }// getters		inline Boolean		HasHBar() { return theHBar != NULL; };	inline Boolean		HasVBar() { return theVBar != NULL; };	ControlHandle		GetHBar() { return theHBar; };	ControlHandle		GetVBar() { return theVBar; };	inline short		GetScrollbarWidth(){ return sbWidth; }	// RAD support:	virtual void		InitViewFromResource( Handle theRes );	virtual void		CreateViewResource( Handle resHandle );		virtual void		ReportFields();protected:	virtual void		ScrollViewInit( Boolean h, Boolean v );	virtual void		CalcScrollParams();	virtual void		HideScrollbars();	virtual void		MoveScrollbars();	virtual void		ShowScrollbars();	virtual void		LocalScroll( Rect* r, short dH, short dV, RgnHandle updateRgn );// static callback methods for tracking		static pascal void			ScrollBarViewProc( ControlHandle theControl, short partCode );	static pascal void			LiveScrollDragProc();	static ControlActionUPP		sScrollViewProc;	static ControlHandle		sCurrentScrollbar;	static DragGrayRgnUPP		sLiveScrollProc;	static short				sLSPosition;	static long					sScrollThrottle;};// global function can be used to make a general scroll view in a dialog ('SCRL' magic item)ZView*	CreateNewScrollView( ZView* aParent, Rect* aFrame, short pCount, long params[] );// feature flags passed in params[0]:enum{	kScrollingViewHasVerticalBar	= 1,	kScrollingViewHasHorizontalBar	= 2,	kScrollingViewHasSizeBox		= 4,	kScrollingViewHasStdBorder		= 8,	kScrollingViewCanBeHandler		= 16,	kTextViewNonEditable			= 32,		// for ZTextView	kTextViewSelectable				= 64		// for ZTextView};#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZScrollView:typedef struct{	ViewTemplate		vt;	Boolean				hasHBar;	Boolean				hasVBar;	Boolean				hasSizeBox;	short				boundsWidth;	short				boundsHeight;	short				hScale;	short				vScale;}ScrollViewTemplate, *ScrollViewTemplatePtr, **ScrollViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif/*This is a view that scrolls.The view has scrollbars attached which are aligned to the right and bottom of the frame. The bounds rect is the logicaldrawing area of the view, which can be larger than the frame. If so, the scrollbars are enabled and will scroll thebounds rect. Other views can be attached as child views to this, and will scroll as expected. This can in itself beattached as a child view of any other view.Remember: the FRAME is the area this view occupies within its parent (a window, for example), and the BOUNDS isthe logical drawing area, which may be larger.*/#endif