/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZScrollAwareView.h		-- a subview of a scroller that extends ZView******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZSCROLLAWAREVIEW__#define	__ZSCROLLAWAREVIEW__#include	"ZItemView.h"#include	"ZScrollView.h"DEFINECLASSID( ZScrollAwareView, 'zsaw' );class	ZScrollAwareView	: public ZItemView{protected:	Boolean		fParentViewIsScroller;	public:		ZScrollAwareView( ZView* aParent, Rect* aFrame = NULL );		virtual void	PostRefresh( Rect* r );	virtual void	PostRefresh();	virtual void	PostContentRefresh();	virtual void	AutoScroll( const Point mouse, const short inset = 0 );	virtual void	ScrollTo( const short h, const short v);	virtual void	ScrollAsNeeded( const Point toShowPt );	virtual void	ClickScroll( const Point startPt );	virtual void	SetBounds( const Rect& aRect );	virtual void	SetBounds( const short width, const short height );	virtual void	SetScrollAmount( const short h, const short v, const Boolean autoTweak = FALSE );	virtual void	GetBounds( Rect* aBounds );	virtual void	GetContentRectInBounds( Rect* aRect );	virtual void	TweakHeight();	virtual void	DDHiliteView( const Boolean state, const DragReference theDrag, const Boolean insideFrame = TRUE );	virtual void	SetAutoSizing( Sizing aSizing );	virtual void	ReportFields();		inline Boolean	ParentIsScroller() { return fParentViewIsScroller; };};/*Any view can be used within a ZScrollView, so what's the point of this?Very often, you can maximise code reuse of a view by creating it as a subclass of ZViewand adding it as a child of a ZScrollView, rather than subclassing ZScrollView itself.However, if you do this, you lose some automatic features of ZScrollView such as auto-scrolling, setting the bounds, etc, from within the view itself.If you subclass ZScrollView so that you can get these features, you may reduce the utilityof your class because it can't then be used as a non-scrolling view.ZScrollAwareView is the solution. If you base your views on this, your view is a plain view,but also provides the usual ZScrollView convenience features by passing the call to theparent view if it's a scroll view. If not, they do nothing, so you get a class whichautomatically adapts itself to the situation it finds itself in.For general purpose view classes that you publish, basing them on this class is usuallya good idea!*/#endif