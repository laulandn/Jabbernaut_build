/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZScrollAwareView.cpp		-- a subview of a scroller that extends ZView******			©2000, Graham Cox*****************************************************************************************************/#include	"ZScrollAwareView.h"#include	"MacZoop.h"#include	"ZGrafState.h"/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZScrollAwareView::ZScrollAwareView( ZView* aParent, Rect* aFrame )	: ZItemView( aParent, aFrame ){	classID = CLASS_ZScrollAwareView;		fParentViewIsScroller = ( dynamic_cast<ZScrollView*>( aParent ) != NULL );	if ( fParentViewIsScroller )	{		// default sizing if parent is a scroller is to fit to the bottom and right edges		FitToParent();		ZItemView::SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));	}}/*--------------------------------***  PostRefresh  ***---------------------------------*//*access:			publicoverrides:		description: 	invalidates the view's frameins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::PostRefresh( Rect* r ){	ZView::PostRefresh( r );}/*--------------------------------***  PostRefresh  ***---------------------------------*//*access:			publicoverrides:		description: 	invalidates the view's frameins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::PostRefresh(){	if ( fParentViewIsScroller )		GetParent()->PostRefresh();	else		ZView::PostRefresh();}/*-----------------------------***  PostContentRefresh  ***-----------------------------*//*access:			publicoverrides:		description: 	invalidates the view's content areains: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::PostContentRefresh(){	if ( fParentViewIsScroller )		GetParent()->PostContentRefresh();	else		ZView::PostContentRefresh();}/*--------------------------------***  AutoScroll  ***----------------------------------*//*access:			publicoverrides:		description: 	automatically scroll the view based on bounds point passedins: 			<mousePt>, mouse location in bounds coordinates				<inset> pixels inside of content rect that cause autoscrollingouts: 			TRUE if view actually scrolled, otherwise FALSEnotes:			called by ZMouseTracker as required----------------------------------------------------------------------------------------*/void	ZScrollAwareView::AutoScroll( const Point mouse, const short inset ){	if ( fParentViewIsScroller )	{		((ZScrollView*) GetParent())->AutoScroll( mouse, inset );			Focus();		FocusForContent();		PrepareForDrawing();		ClipViewsAbove();	}}/*---------------------------------***  ScrollTo  ***-----------------------------------*//*access:			publicoverrides:		description: 	scroll the view to the absolute offset passedins: 			<hPosition> horizontal positon of frame relative to bounds				<vPosition> vertical position of frame relative to boundsouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::ScrollTo( const short h, const short v){	if ( fParentViewIsScroller )	{		((ZScrollView*) GetParent())->ScrollTo( h, v );		Focus();		FocusForContent();		PrepareForDrawing();		ClipViewsAbove();	}}/*------------------------------***  ScrollAsNeeded  ***--------------------------------*//*access:			publicoverrides:		description: 	given a point within the bounds, scroll the view to ensure that				the point is visible. Basic method for scrolling to selectionins: 			<toShowPt> the point to make visibleouts: 			nonenotes:			point passed should usually represent top, left of selection----------------------------------------------------------------------------------------*/void	ZScrollAwareView::ScrollAsNeeded( const Point toShowPt ){	if ( fParentViewIsScroller )	{		((ZScrollView*) GetParent())->ScrollAsNeeded( toShowPt );		Focus();		FocusForContent();		PrepareForDrawing();		ClipViewsAbove();	}}/*-------------------------------***  ClickScroll  ***----------------------------------*//*access:			publicoverrides:		description: 	scroll the view in a grabber-wise fashionins: 			<mousePt>, mouse location in bounds coordinatesouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::ClickScroll( const Point startPt ){	if ( fParentViewIsScroller )	{		ZScrollView*	par;		Point			cm;		Rect			pcr;				par = (ZScrollView*) GetParent();				// offset the point to allow for an offset content rect				par->GetContentRect( &pcr );				cm = startPt;				cm.h -= pcr.left;		cm.v -= pcr.top;				par->Focus();		par->ClickScroll( cm );	}}/*--------------------------------***  SetBounds  ***-----------------------------------*//*access:			publicoverrides:		description: 	set the logical bounds rect from the rect passedins: 			<aRect> new boundsouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::SetBounds( const Rect& aRect ){	if ( fParentViewIsScroller )		((ZScrollView*) GetParent())->SetBounds( aRect );}/*--------------------------------***  SetBounds  ***-----------------------------------*//*access:			publicoverrides:		description: 	set the logical bounds rect from the sizes passedins: 			<width> new width of bounds				<height> new height of boundsouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::SetBounds( const short width, const short height ){	if ( fParentViewIsScroller )		((ZScrollView*) GetParent())->SetBounds( width, height );}/*-----------------------------***  SetScrollAmount  ***--------------------------------*//*access:			publicoverrides:		description: 	set the number of pixels moved for each click of the scrollbarins: 			<h, v> horizontal and vertical scales for the scrolling				<autoTweak> TRUE to adjust height to whole number of linesouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::SetScrollAmount( const short h, const short v, const Boolean autoTweak ){	if ( fParentViewIsScroller )		((ZScrollView*) GetParent())->SetScrollAmount( h, v, autoTweak );}/*--------------------------------***  GetBounds  ***-----------------------------------*//*access:			publicoverrides:		description: 	get the logical bounds rect of the viewins: 			<aBounds> receives the boundsrectouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::GetBounds( Rect* aBounds ){	if ( fParentViewIsScroller )		((ZScrollView*) GetParent())->GetBounds( aBounds );	else		ZView::GetBounds( aBounds );}/*--------------------------***  GetContentRectInBounds  ***----------------------------*//*access:			publicoverrides:		description: 	get the content rect of the view relative to the boundsins: 			<aRect> receives the rectouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::GetContentRectInBounds( Rect* aRect ){	if ( fParentViewIsScroller )		GetParent()->GetContentRectInBounds( aRect );	else		ZView::GetContentRectInBounds( aRect );}/*--------------------------------***  TweakHeight  ***--------------------------------*//*access:			publicoverrides:		description: 	tweak the height of the view to encompass an exact number of linesins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::TweakHeight(){	if ( fParentViewIsScroller )		((ZScrollView*) GetParent())->TweakHeight();}/*-------------------------------***  DDHiliteView  ***--------------------------------*//*access:			publicoverrides:		description: 	handle the drag hiliting of the viewins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::DDHiliteView( const Boolean state, const DragReference theDrag, const Boolean insideFrame ){	if ( fParentViewIsScroller )	{		RgnHandle	dragHiliteRgn;		Rect		content;		ZGrafState	gs;				GetParent()->Focus();		PrepareForDrawing();				if ( state )		{			// make the hilite region						FailNIL( dragHiliteRgn = NewRgn());							GetParent()->GetContentRect( &content );			RectRgn( dragHiliteRgn, &content );			ShowDragHilite( theDrag, dragHiliteRgn, insideFrame );			DisposeRgn( dragHiliteRgn );		}		else			HideDragHilite( theDrag );	}	else		ZView::DDHiliteView( state, theDrag, insideFrame );}/*-------------------------------***  SetAutoSizing  ***--------------------------------*//*access:			publicoverrides:		description: 	set sizing of parent insteadins: 			<aSizing> sizing infoouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::SetAutoSizing( Sizing aSizing ){	if ( fParentViewIsScroller )		GetParent()->SetAutoSizing( aSizing );	else		ZItemView::SetAutoSizing( aSizing );}/*-------------------------------***  ReportFields  ***---------------------------------*//*access:			publicoverrides:		description: 	report data members to inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZScrollAwareView::ReportFields(){	ZView::ReportFields();		XSHOWFIELD( fParentViewIsScroller, ft_boolean );}