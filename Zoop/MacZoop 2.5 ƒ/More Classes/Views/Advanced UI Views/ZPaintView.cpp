/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZPaintView.cpp		-- view for editing/creating images******			©2000, Graham Cox*****************************************************************************************************/#include	"ZPaintView.h"#include	"UPaintEngine.h"#include	"ZWindow.h"#include	"MacZoop.h"ZPaintView::ZPaintView( ZView* aParent, Rect* aFrame, Rect* aBounds, const short bitDepth )	: ZScrollAwareView( aParent, aFrame ){	Rect	br;		if ( aBounds == NULL )		GetContentRect( &br );	else		br = *aBounds;			OffsetRect( &br, -br.left, -br.top );		FailNIL( fEngine = new UPaintEngine( &br, bitDepth ));		fEngine->PEInitialise( kDefaultPaintToolsID );	ListenTo( fEngine );	SetCanBeHandler( TRUE );		fEngine->PESetTool( 6 );	CalcBounds();}ZPaintView::~ZPaintView(){	if ( fEngine )		FORGETOBJECT( fEngine );}void	ZPaintView::DrawContent(){	RgnHandle	clip;		GetClip( clip = NewRgn());	fEngine->PEUpdate( clip );	DisposeRgn( clip );}void	ZPaintView::ClickContent( const Point mouse, const short modifiers ){	if ( fEngine->PEClick( mouse, modifiers ))	{		ZUndoTask* task;				task = fEngine->PEGetTask();		task->SetUndoTarget( this );		GetRootWindow()->SetTask( task );	}}void	ZPaintView::Activate(){	ZScrollAwareView::Activate();	Focus();	PrepareForDrawing();	FocusForContent();	fEngine->PEActivate();}void	ZPaintView::Deactivate(){	ZScrollAwareView::Deactivate();	Focus();	PrepareForDrawing();	FocusForContent();	fEngine->PEDeactivate();}void	ZPaintView::Idle(){	Focus();	PrepareForDrawing();	FocusForContent();		fEngine->PEIdle();}void	ZPaintView::Type( const char theKey, const short modifiers ){	Focus();	PrepareForDrawing();	FocusForContent();	fEngine->PEType( theKey, modifiers );}void	ZPaintView::SetViewCursor( const Point mouse, const short modifiers ){	UPaintTool*		curTool;	short			cursID;	curTool = fEngine->PEGetTool();		if ( curTool )	{		cursID = curTool->GetSecondaryResID() + kCursorResIDBaseOffset;				SetCursorShape( cursID );	}}void	ZPaintView::CalcBounds(){	Rect	br;	long	scale;		fEngine->PEGetBounds( &br );	scale = fEngine->PEGetScale();		OffsetRect( &br, -br.left, -br.top );	br.right = ((long) br.right * scale ) / 100;	br.bottom = ((long) br.bottom * scale ) / 100;		SetBounds( br );	SetScrollAmount( scale / 10, scale / 10 );}