/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZColourMenuView.cpp		-- colour pop-up menu view******			©2000, Graham Cox*****************************************************************************************************/#include	"ZColourMenuView.h"#include	"MacZoop.h"#include	"ColourPopUp.h"#include	"ZGWorld.h"DIALOGITEMCONSTRUCTOR( ZColourMenuView );/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZColourMenuView::ZColourMenuView( ZView* aParent, Rect* aFrame, short clutID )	: ZView( aParent, aFrame ){	classID = CLASS_ZColourMenuView;		if ( clutID == 0 )		fClut = 8;	else		fClut = clutID;		SetForeColour( &gBlack );		SetColour((RGBColor*) &gWhite );	SetNoBackgroundErase( TRUE );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZColourMenuView::ZColourMenuView( ZView* aParent, const short viewResourceID )	: ZView( aParent ){	classID = CLASS_ZColourMenuView;		ViewResInit( viewResourceID );}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the viewins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZColourMenuView::DrawContent(){	Rect	r;		GetBounds( &r );#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		DrawThemeColourPopUp( FALSE );	}	else	{#endif		DrawStandardColourSelector( &r, &fColour );#if APPEARANCE_MGR_AWARE	}#endif}/*--------------------------------***  ClickContent  ***--------------------------------*//*access:			publicoverrides:		description: 	handle mouse click in viewins: 			<mouse> local mouse point				<modifiers> modifier keysouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZColourMenuView::ClickContent( const Point mouse, const short modifiers ){	Rect	r;	long	mSelect = 0;	Point	loc;		GetBounds( &r );		loc.h = r.left + 1;	loc.v = r.bottom;	LocalToGlobal( &loc );#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		DrawThemeColourPopUp( TRUE );		mSelect = PopUpColourPalette( loc, fClut, &fColour, fIndex );		DrawThemeColourPopUp( FALSE );	}	else	{#endif			InvertStandardColourSelector( &r );		mSelect = PopUpColourPalette( loc, fClut, &fColour, fIndex );		InvertStandardColourSelector( &r );		#if APPEARANCE_MGR_AWARE	}#endif		if ( HiWord( mSelect ) != 0 )	{		fIndex = LoWord( mSelect );				SendMessage( kMsgSignalViewTyping, NULL );		if ( ! gMacInfo.hasAppearanceMgr )			PostRefresh();	}		}/*----------------------------------***  SetColour  ***---------------------------------*//*access:			publicoverrides:		description: 	set the current colourins: 			<aColour> colour to setouts: 			nonenotes:			finds best index based on current clut.----------------------------------------------------------------------------------------*/void	ZColourMenuView::SetColour( RGBColor* aColour ){	fColour = *aColour;	fIndex = FindBestIndexMatch( fClut, aColour );	PostRefresh();}/*------------------------------***  InitViewFromResource  ***--------------------------*//*access:			publicoverrides:		description: 	initialise the view from data in a 'View' resource handleins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZColourMenuView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZView::InitViewFromResource( theRes );		ColourMenuViewTemplateHdl	cmH = (ColourMenuViewTemplateHdl) theRes;		fClut = (*cmH)->clutID;	fIndex = (*cmH)->initial;		CTabHandle	ct = GetCTable( fClut );		if ( ct )	{		fColour = (*ct)->ctTable[ fIndex ].rgb;		DisposeCTable( ct );	}}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	Fills in the resource handle according to its templated structureins: 			<resHandle> valid handle of adequate sizeouts: 			nonenotes:			This method should only be used by the RAD tool to create View resources				(not for application use)----------------------------------------------------------------------------------------*/void	ZColourMenuView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );		if ( GetHandleSize( resHandle ) < sizeof( ColourMenuViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			ColourMenuViewTemplateHdl	cmH = (ColourMenuViewTemplateHdl) resHandle;		(*cmH)->clutID = fClut;	(*cmH)->initial = fIndex;		ZView::CreateViewResource( resHandle );	}/*---------------------------------***  ReportFields  ***-------------------------------*//*access:			publicoverrides:		description: 	report field info to inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZColourMenuView::ReportFields(){	ZView::ReportFields();		XSHOWFIELD( fColour, ft_RGBColor );	XSHOWFIELD( fIndex, ft_signedshort );	XSHOWFIELD( fClut, ft_signedshort );}/*-----------------------------***  DrawThemeColourPopUp  ***---------------------------*//*access:			protectedoverrides:		description: 	draw the theme-savvy version of the pop-up buttonins: 			<pressed> whether button pressed or notouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZColourMenuView::DrawThemeColourPopUp( Boolean pressed ){#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		Rect				r;		ThemeButtonDrawInfo info;				GetBounds( &r );				info.state = ( IsActive() && IsEnabled())? ( pressed? kThemeStatePressed : kThemeStateActive ) : kThemeStateInactive;		info.value = 0;		info.adornment = kThemeAdornmentNone;				DrawThemeButton( &r, kThemePopupButton, &info, NULL, NULL, NULL, 0 );					// draw a colour thingy on top. Note there are no metrics for components		// of a popup button, so I'm having to set a value empirically here. This		// might not be right in Aqua.				InsetRect( &r, 6, 6 );		r.right -= 20;				DrawThemeGenericWell( &r, info.state, TRUE );		RGBForeColor( &fColour );		PaintRect( &r );	}#endif}/*------------------------------***  FindBestIndexMatch  ***----------------------------*//*access:			protectedoverrides:		description: 	find the nearest index value for the colour passedins: 			<clutID> ID of clut to use				<matchThis> colur to find index forouts: 			closest index value for the colour in the clutnotes:			----------------------------------------------------------------------------------------*/short	ZColourMenuView::FindBestIndexMatch( const short clutID, RGBColor* matchThis ){	ZGWorld*	gw;	Rect		r = { 0, 0, 4, 4 };	CTabHandle	ct;	CGrafPtr	savePort;	GDHandle	saveDev;	long		result;		FailNIL( ct = GetCTable( clutID ));		FailNIL( gw = new ZGWorld( r, 8, ct ));		gw->SetPortToGW( &savePort, &saveDev );		result = Color2Index( matchThis );		SetGWorld( savePort, saveDev );	DisposeCTable( ct );	FORGETOBJECT( gw );		return LoWord( result ) + 1;}