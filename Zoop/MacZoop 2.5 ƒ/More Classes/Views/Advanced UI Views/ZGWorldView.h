/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZGWorldView.h		-- view for displaying an image******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZGWORLDVIEW__#define	__ZGWORLDVIEW__#include	"ZScrollAwareView.h"#include	"ZGWorld.h"DEFINECLASSID( ZGWorldView, 'zgwv' );// tool modes:enum{	kGWorldNoTool		= 0,	kGWorldZoomTool,	kGWorldGrabberTool};// the class:class	ZGWorldView	: public ZScrollAwareView{private:	ZGWorld*	fWorld;	short		fScale;	short		fToolMode;	Boolean		fFatBits;public:	ZGWorldView( ZView* aParent, Rect* aFrame, const short bitDepth, const short clutID = 0, Boolean makeDiskBased = FALSE );	ZGWorldView( ZView* aParent, const short picResID, Boolean makeDiskBased = FALSE );	ZGWorldView( ZView* aParent, PicHandle aPicture, Boolean makeDiskBased = FALSE );	ZGWorldView( ZView* aParent, ZGWorld* aGWorld, Boolean makeDiskBased = FALSE );	virtual ~ZGWorldView();		virtual void	DrawContent();	virtual void	ClickContent( const Point mouse, const short modifiers );	virtual void	SetViewCursor( const Point mouse, const short modifiers );	virtual void	HandleCommand( const ZoopCommand theCommand );	virtual void	UpdateMenus();	virtual void	DoCopy();	virtual void	DoPaste();	virtual void	DoClear();	virtual Boolean	CanPasteType();	virtual void	SetScale( const short aScale = 100 );	inline	short	GetScale() { return fScale; };	virtual void	SetFatBits( Boolean fat );	virtual void	SetToolMode( const short aMode ) { fToolMode = aMode; };		virtual void	ZoomToPoint( const Point clickPt, Boolean isZoomOut = FALSE );	virtual void	ZoomToCentre( Boolean isZoomOut = FALSE );	virtual void	InstallImage( PicHandle aPic, Boolean makeDiskBased = FALSE );	virtual void	InstallImage( const short picResourceID, Boolean makeDiskBased = FALSE );	virtual void	InstallImage( ZGWorld* aGWorld, Boolean makeDiskBased = FALSE );	virtual void	CalcBounds();		inline ZGWorld*	GetWorldObject() { return fWorld; }		virtual void	ReportFields();protected:	virtual void	MakeGWorld( Rect* size, short bitDepth, short clutID, Boolean makeDiskBased = FALSE );	virtual void	CalcSourceRect( Rect* aSrcRect );};// convenience function builds view with enclosing scroller. May be registered as a dialog// item constructor functionZView*		CreateNewScrollingGWorldView( ZView* aParent, Rect* aFrame, short pCount, long params[] );// errors:enum{	kMoreParametersExpectedErr = 126};#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZGWorldView:typedef struct{	ViewTemplate		vt;	short				pictID;	short				bitDepth;	short				clutID;}GWorldViewTemplate, *GWorldViewTemplatePtr, **GWorldViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif