/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZRulerScrollView.h		-- scrollview with rulers******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZRULERSCROLLVIEW__#define	__ZRULERSCROLLVIEW__#include	"ZScrollView.h"#include	"ZRulerView.h"class	ZArray;// type used to hold a floating-point coordinatetypedef struct{	double_t	h;	double_t	v;}FPPoint;// type used to store list of guidestypedef struct{	Boolean		isHGuide;	short		guidePos;}GuideInfo;DEFINECLASSID( ZRulerScrollView, 'zrls' );// the class:class	ZRulerScrollView	: public ZScrollView{protected:	ZRulerView*		fHRuler;	ZRulerView*		fVRuler;	short			fRulerHeight;	Boolean			fRulersVisible;	Boolean			fGridVisible;	Rect			fOrgDragHotspot;	Point			fLastMarker;public:	ZRulerScrollView( ZView* aParent, Rect* aFrame = NULL,					const Boolean makeHBar = TRUE,					const Boolean makeVBar = TRUE,					const Boolean hasSizeBox = FALSE,					const short rulerSize = kStdRulerViewHeight );	ZRulerScrollView( ZView* aParent, const short viewResourceID );	virtual ~ZRulerScrollView();	virtual void		DrawAll();	virtual void		DrawContent();	virtual void		Click( const Point mouse, const short modifiers );	virtual void		GetContentRect( Rect* aRect );	virtual void		AdjustCursor( const Point mouse, const short modifiers );		virtual void		UpdateMenus();	virtual void		HandleCommand( const ZoopCommand cmd );		virtual Boolean		AutoScroll( Point mousePt, const short inset = 0 );		virtual void		PlaceAt( const short hPos, const short vPos );	virtual void		SetSize( const short width, const short height );		virtual void		ShowHideRulers( const Boolean showOrHide );	virtual void		ShowHideGrid( const Boolean showOrHide );	virtual void		SetRulersMarker( const Point localPt );	virtual void		SetRulersUnits( const double_t numer, const double_t denom, const short divs );			virtual void		BoundsPointToRuler( const Point bPt, FPPoint* rulerPos );		virtual void		ReportFields();	protected:	virtual void		DragOrigin( const Point startPt, const short modifiers );	virtual void		ScrollHook( const short dh, const short dv );	virtual void		MakeRulers();	virtual void		DrawOriginDragBox( Boolean pressed );	virtual void		DrawGrid( Boolean vh );};enum{	kMsgReportRulerMouseLocation	= 'rlrm'};ZView*	CreateNewRulerScrollView( ZView* aParent, Rect* aFrame, short pCount, long params[] );/*This view works and acts just like any ZScrollView, but also creates and maintains a pairof rulers around the top and left edges of the view. These automatically display the cursorlocation in the view, and scroll with the view's contents.*/#endif