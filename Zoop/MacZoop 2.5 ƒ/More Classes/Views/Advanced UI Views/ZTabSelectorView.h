/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZTabSelectorView.h		-- general purpose view for handling tabbed panes******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZTABSELECTORVIEW__#define	__ZTABSELECTORVIEW__#include	"ZView.h"#include	"ProjectSettings.h"class	ZArray;class	ZPStrArray;class	ZViewDialog;DEFINECLASSID( ZTabSelectorView, 'ztb#' );class	ZTabSelectorView	: public ZView{protected:	ZArray*			fTabRects;	ZPStrArray*		fTitles;	short			fNumTabs;	short			fCurrentTab;	Boolean			fTabsDrawn;public:	ZTabSelectorView( ZView* aParent, Rect* aFrame, const short numTabs, const short tabTitleResID = 0, const Boolean drawTabs = TRUE );	ZTabSelectorView( ZView* aParent, const short viewResourceID );	virtual ~ZTabSelectorView();	virtual void	DrawContent();	virtual void	ClickContent( const Point mouse, const short modifiers );	virtual void	EraseBackground();	virtual void	ReceiveMessage( ZComrade* aSender, ZoopMessage msg, UntypedPtr msgData ); 		virtual void	SetTabTitle( const short whichTab, Str255 aTitle );	virtual void	GetTabTitle( const short whichTab, Str255 aTitle );	virtual void	SelectTab( const short whichTab );	virtual ZView*	GetParentViewForTab( const short whichTab );	virtual void	SetFontInfo( const short fontID, const short size, const Style style );		virtual void	EnableTab( const short whichTab );	virtual void	DisableTab( const short whichTab );	virtual Boolean	IsTabEnabled( const short whichTab );	virtual void	GetTabRect( const short whichTab, Rect* aRect );	virtual short	GetTabContaining( ZView* aView );		virtual void	InitViewFromResource( Handle theRes );	virtual void	CreateViewResource( Handle theRes );	virtual void	ReportFields();	protected:	virtual void	DrawTabsHeader();	virtual void	DrawOneTab( Rect* tabBounds, const short tabID, const Boolean isSelected, const Boolean pressed );	virtual void	InitTabView( const short strListID );	virtual short	FindTab( const Point mouse );	virtual void	CalcTabRects();	virtual Boolean	TrackTab( Point mouse, const short tabID );	virtual void	MakeTabRegion( Rect* tabRect, RgnHandle aRgn );	#if APPEARANCE_MGR_AWARE	static pascal void				ThemeTabCallback( const Rect *bounds,														ThemeTabStyle style,														ThemeTabDirection direction,														SInt16 depth,														Boolean isColorDev,														UInt32 userData );	static ThemeTabTitleDrawUPP		sTabUPP;#endif};// metrics:enum{	kFontExtraTabHeightAllowance		= 4,	kFontExtraTabWidthAllowance			= 28,	kFirstTabHorizontalInset			= 5,	kTabContentAreaMarginWidth			= 1,	kTabIntertabGap						= 0};// messages:enum{	kMsgTabSelectorInitialised			= 'tbs!',	kMsgTabSelectorViewSwitchingOut		= 'tbs-',	kMsgTabSelectorViewSwitchingIn		= 'tbs+',	kMsgTabSelectorViewGoodbye			= 'tbs~',	kMsgTabAutoSelectView				= 'tbvs',	kTabSelectorBaseTabID				= 'tab0'};// errors:// private data for tab info:typedef struct{	Rect		tabRect;	Boolean		tabEnabled;}TabInfo, *TabInfoPtr;// format of 'View' resource for this class:#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endiftypedef struct{	ViewTemplate	vt;	Boolean			tabsDrawn;	short			numTabs;	short			titleResID;	short			initialTab;}TabSelectorViewTemplate, *TabSelectorViewTemplatePtr, **TabSelectorViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif// convenience methods, may be registered as dialog itemZView*	CreateNewTabSelectorView( ZView* aParent, Rect* aFrame, const short pCount, long params[] );// this method allows the items in a tab view to be preloaded from a DITL resource. This is only// applicable if the tab selector view is an item in the dialog. The items so appended are numbered// with the tab ID x 100 plus their original ID. By using this ID, the usual dialog methods can be used// to operate on these items.void	LoadTabSelectorSubviewFromDITL( ZViewDialog* theDialog, ZTabSelectorView* tabSelector, const short tabViewIndex, const short ditlID );/*ABOUT ZTabSelectorView..........This class is the partial replacement for the older dialog switching mechanism. It takes adifferent approach to the problem, using tabbed panels out of the box. (If you wish toimplement switchable items based on another switching device such as an icon list, youmay hide the tabs and call the SelectTab method externally).This single view creates a series of subviews, one for each tab. The items are added aschildren of these subviews, which are shown and hidden as needed as the tabs are clicked.Note this class will work without appearance - emulating the tabs when not available.*/#endif