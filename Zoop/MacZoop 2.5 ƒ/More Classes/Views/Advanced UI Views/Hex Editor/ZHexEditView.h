/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZHexEditView.h		-- view edits a block of memory as hex******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZHEXEDITVIEW__#define	__ZHEXEDITVIEW__#include	"ZScrollAwareView.h"// Hex editor compilation options:// set this to the number of bytes per line to dump. Usually 16; 8 also common. Other sizes// should work but not exhaustively tested.#define		BYTES_PER_LINE				16// if you want a colourised dump, set this to 1:// n.b. display is noticeably slower in colour.#define		HD_USE_COLOUR				1// to display the absolute address rather than a relative one, set this to 1:#define		SHOW_ABSOLUTE_ADDRESS		0// to display only 24 bits of address, set this to 1. Otherwise 32 bits are shown#define		USE_24_BIT_ADDRESS			1// set gap between end of dump area and start of ascii area:#define		ASCII_OFFSET				20// group into columns of this many bytes (usually 4 for 16 bytes per line or// 2 for 8 bytes/line ) set equal to BYTES_PER_LINE for no grouping.#define		COLUMN_GROUP_SIZE			4// caret is normally 1 or 2 pixels wide- set your preference here:#define		CARET_WIDTH					1DEFINECLASSID( ZHexEditView, 'zxev' );class	ZHexEditView	: public ZScrollAwareView{protected:	Handle			fEditHandle;	long			fSelStart, fSelEnd;	RgnHandle		fSelectionRgn;	long			fMaxDisplayLength;	short			fHdStart, fHdEnd;	short			fLineHeight, fAscent, fEmSpace;	short			fTextMode;	Boolean			fEdited;	Boolean			fCaretPhase;	Boolean			fNibPhase;	Boolean			fHalfOff;public:	ZHexEditView( ZView* aParent, Rect* aFrame );	virtual ~ZHexEditView();// view and commander overrides:	virtual void	DrawContent();	virtual void	ClickContent( const Point mouse, const short modifiers );	virtual void	Type( const char theKey, const short modifiers );	virtual void	Activate();	virtual void	Deactivate();	virtual void	Idle();	virtual Boolean	ClickInSamePlace( const Point a, const Point b );	virtual void	SetViewCursor( const Point mouse, const short modifiers );	virtual void	DoSelectionUpdate( Boolean state );// standard commands:		virtual void	UpdateMenus();	virtual void	DoSelectAll();	virtual void	DoCopy();	virtual void	DoClear();	virtual void	DoPaste();	virtual Boolean	CanPasteType();	// setting content of the dump and selection in it:		virtual void	SetDumpMemory( Handle aHandle );	virtual void	SetDumpMemory( Ptr dumpThis, const long dumpBytes );	virtual void	GetDumpMemory( Handle aHandle );	virtual void	SetSelection( const long start, const long end );	virtual Boolean	DumpChanged();// info:		inline void		GetSelectionRange( long* start, long* end ) { *start = fSelStart; *end = fSelEnd; };	virtual long	GetLength();	// d+d:	virtual Boolean	ShouldDrag( const Point mouse, const short modifiers );	virtual void	MakeDragRegion( RgnHandle aRgn );	virtual void	MakeDragData( DragReference theDrag, const short modifiers );	virtual Boolean	AcceptsFlavour( const OSType aFlavour ){ return ( sCurTxDragSender != this ); }	virtual void	Drop( const OSType flavour, const Ptr data, const long dataSize, const DragReference theDrag );protected:// rendering:	inline 	void	DrawHexLine( Ptr lineStartAddr, char bytesInLine = BYTES_PER_LINE );// interface calculations:		virtual long	GetOffset( short hLoc, short vLoc );	virtual void	CalcSelection( long offsetStart, long offsetEnd, RgnHandle aRgn );	virtual void	DrawCaret( Boolean state );// hex edition utilities:		void			Munge( Ptr dataToInsert, long dataLength );	void			RecalcBoundsAndSelection();	void			MoveCaret( short cDirection, Boolean shifted = FALSE );	void			RedrawOnType( long offset );	virtual Boolean	TypeInData( char theKey );	void			ScrollToCaret();	void			SetSelectionRgn( RgnHandle aRgn );	virtual short	CalcCaretHOffset( long offset );	void			CalcBounds();		static char		sLineCache[ ( BYTES_PER_LINE * 3 ) + ( BYTES_PER_LINE / COLUMN_GROUP_SIZE ) + 1 ];	static char*	sHex;};// constants passed to MoveCaret():enum{	left,	right,	up,	down,	halfRight,	toEnd,	toBeginning,	toEndOfLine,	toBeginningOfLine};// misc constants, etc:enum{	kTooMuchDataToEditErr		= 391};// convenience function to make compound view of scrollable hex editorZView*	CreateNewScrollingHexEditorView( ZView* aParent, Rect* aFrame );#endif