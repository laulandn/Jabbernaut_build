/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZFileBrowser.h		-- ZArrayBrowser that can interpret FSSpec*										records******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZFILEBROWSER__#define __ZFILEBROWSER__#include	"ZArrayBrowser.h"class	ZPStrArray;DEFINECLASSID( ZFileBrowser, 'zfbw' );DEFINECLASSID( ZFileSpecViewer, 'zfsv' );// data structure caches file info otherwise it's too slow to sorttypedef struct{	FSSpec			fs;				// file spec	Boolean			fsInit : 1;		// TRUE if cached data inited	Boolean			fsFolder : 1;	// TRUE if this is a folder	unsigned long	modDate;		// file mod date	unsigned long	fSize;			// file size	OSType			fType;			// file type}FSXSpec, *FSXSpecPtr;// browser:class	ZFileBrowser	: public ZArrayBrowser{public:	ZFileBrowser( ZView* aParent, Rect* aFrame, const short columns = 4 );		virtual void		UpdateMenus();	virtual void		HandleCommand( ZoopCommand cmd );		virtual void		SetBrowseFolder( const FSSpec* aFolder );	virtual void		ReceiveMessage( ZComrade* aSender, ZoopMessage msg, UntypedPtr msgData );	virtual Boolean		FileTypeFilter( OSType aFileType ) { return TRUE; }};// viewer for dealing with lists of FileSpecs. The array data is assumed to be an FSSpec. This displays The filename// and optionally, the files (small) icon.class	ZFileSpecViewer	: public ZBrowserViewer{private:	Boolean			fShowIcon;	public:	ZFileSpecViewer() : ZBrowserViewer() { fShowIcon = TRUE; }		virtual void		DrawBrowserCell( Rect* cellRect, short row, short column, void* cellData, Boolean selected );	virtual Boolean		TestDataEqual( void* cellData, Ptr testData, long testDataLen );	virtual OSType		GetClipboardDataType() { return flavorTypeHFS; };	virtual Handle		MakeClipboardData( short row, void* cellData );	virtual void		ConvertClipboardData( short row, Handle dataIn, void* dataOut );	void				SetShowIcon( Boolean showIt ) { fShowIcon = showIt; };	};// columns in file viewer used thus:enum{	kFileViewerColumnFileName		= 1,	kFileViewerColumnFileModDate,	kFileViewerColumnFileSize,	kFileViewerColumnFileKind};enum{	kCmdPickBrowseFolder		= 31001,	kCmdFileBrowserNotifyScroll	= 'fbns'};// this class implements a standard header for a ZFileBrowser that allows the columns to be labelled and sortedDEFINECLASSID( ZFileBrowserHeader, 'zfbh' );class	ZFileBrowserHeader	: public ZView{protected:	ZArrayBrowser*		fBrowser;	ZPStrArray*			fTitles;	Boolean				fSortReversed;	short				fScrollOffset;	public:	ZFileBrowserHeader( ZView* aParent, Rect* aFrame, ZArrayBrowser* aBrowser );	~ZFileBrowserHeader();		virtual void		DrawContent();	virtual void		ClickContent( const Point mouse, const short modifiers );	virtual void		ReceiveMessage( ZComrade* aSender, ZoopMessage msg, UntypedPtr msgData );		virtual void		SetTitle( const short column, Str255 aTitle );	virtual void		GetTitle( const short column, Str255 aTitle );		virtual void		GetPosition( short* pH, short* pV ){ *pH = fScrollOffset; *pV = 0; }	void				SetPosition( const short pH ){ fScrollOffset = pH; }	void				ScrollHeader( const short dH );	protected:	virtual void		DrawHeaderButton( Rect* aRect, short column, Boolean pressed );	virtual void		GetButtonRect( Rect* aRect, short column );	virtual void		DoColumnSwitch( const short column );	virtual void		SortArrayByColumn( const short column );		static short		FileBrowserSortProc( void* a, void* b, const long ref );};#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZFileBrowser:typedef struct{	ArrayBrowserTemplate	abt;						// browser view parameters	Boolean					createHeader;				// true to create std header view as well	Str255					folderPath;					// pathname of folder to browse}FileBrowserTemplate, *FileBrowserTemplatePtr, **FileBrowserTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif