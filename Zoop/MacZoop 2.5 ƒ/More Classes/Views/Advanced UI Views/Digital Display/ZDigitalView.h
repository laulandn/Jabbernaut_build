/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZDigitalView.h		-- implements a simulated electronic digital display******			©2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZDIGITALVIEW__#define	__ZDIGITALVIEW__#include	"ZItemView.h"typedef unsigned long 	BCD_32;// flags:enum{	kDVLeadingZeroBlanking		= 1,	kDVUnblankOnExactZero		= 2,	kDVOverrangeBlinkEnable		= 4,	kDVUseHexadecimalCharset	= 8,	kDVCentreDigitsInBounds		= 16};class	ZGWorld;DEFINECLASSID( ZDigitalView, 'zddv' );// the class:class	ZDigitalView	: public ZItemView{protected:	BCD_32				fBCDBuffer;			// display buffer	long				fValue;				// the value	unsigned char		fOpFlags;			// various behaviour flags	unsigned char		fDigits;			// number of digits	unsigned char		fDecimalPos;		// position of decimal point	unsigned char		fColonExtra;		// allow this much extra space for a colon	Boolean				fIsNegative;		// true if value < 0	Boolean				fOutOfRange;		// true if value out of range	Boolean				fBlink;				// true if display is blinking	Boolean				fBlinkPhase;		// blink phasepublic:	ZDigitalView( ZView* aParent, Rect* aFrame, const short numDigits = 8, const char flags = 0 );	ZDigitalView( ZView* aParent, const short viewResourceID );	virtual ~ZDigitalView();		virtual void		DrawContent();	virtual void		InvertDisplay();		virtual void		SetValue( const long aValue );	virtual long		GetValue() { return fValue; };	virtual void		Reset();		virtual void		SetDigits( const short numDigits );	virtual void		SetDecimalPosition( const short pos );	virtual void		SetFlags( const char flags ) { fOpFlags = flags; }	virtual void		SetValueDirect( const BCD_32 aBCDValue );	virtual void		SetBlinking( Boolean blinkOnOff );	virtual short		GetDisplayWidth();		virtual void		InitViewFromResource( Handle theRes );	virtual void		CreateViewResource( Handle resHandle );	virtual void		DoTimer( long id );	virtual void		ReportFields();protected:	virtual BCD_32		LongToBCD( const long aValue );	virtual BCD_32		CalcLZBMask();	virtual void		CalcMaxAndMin();	virtual void		DrawColons( short hPosition ) {};		static ZGWorld*		sDisplayDigits;	};// display metrics, etc:enum{	kDVDigitWidth				= 10,	kDVDigitHeight				= 16,	kDVDigitSpacing				= 4,	kDVDigitVSpacing			= 3,	kDVPointSize				= 2,	kDVGraphicsResID			= 180,	kStdDigitalDisplayHeight 	= 22,	kDVBlinkTicks				= 10,	kBCDErrorValue				= 0xFFABBDBF	// pass to SetValueDirect using char set 1 to get "Error" msg};// global function can be registered as a dialog item constructor function:ZView*		CreateNewDigitalView( ZView* aParent, Rect* aFrame, short param );// global colours useful with this class// foregrounds:extern const RGBColor LED_RED;extern const RGBColor LED_LIGHTYELLOW;extern const RGBColor BLUEGREEN_FLUORESCENT;extern const RGBColor LED_GREEN;extern const RGBColor LED_BLUE;// backgrounds:extern const RGBColor LCD_GRAYBACKLIGHT;extern const RGBColor LCD_ORANGEBACKLIGHT;extern const RGBColor LCD_COLDCATHODE;extern const RGBColor LED_RED_BACKGND;extern const RGBColor LED_GREEN_BACKGND;extern const RGBColor LED_BLUE_BACKGND;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZDigitalView:typedef struct{	ItemViewTemplate	ivt;	short				numDigits;	Boolean				zeroBlanking;	Boolean				blankOnZero;	Boolean				overrangeBlink;	Boolean				useAltCharset;	Boolean				centreDigits;}DigitalViewTemplate, *DigitalViewTemplatePtr, **DigitalViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif/*This class implements a digital display view, emulating a typical electronicdisplay with up to 8 digits (plus 1 sign digit). The behaviour is faithful to an electronicdisplay, with similar behaviours and limitations. However, it is capable of some sophisticationsuch as over/under range indication, leading zero blanking, blinking, etc.The display operates on an internal Binary Coded Decimal format (BCD). This is a naturaltechnique in electronics and is duplicated here. BCD represents a number in decimal notation,but using four bits for each separate digit in the number. Each digit is represented in4-bit binary. This allows sufficient characters for the numerals 0-9 and six extracharacters. This display supports two character sets currently. In set 1, values A-F aredisplayed as:  E,r,o*,o, -,blank (where o* is actually a small 'o' character displayedin the upper half of the seven segment display). In set 2, values A-F are displayed asthe characters A-F, allowing the display to be used for hexadecimal displays.The display is intended as an output only device - it does not respond to the mouse.This display may form the basis of a digital clock. While it performs no time operationsitself, it allows some space to be inserted between alternate digits so that your classcan draw additional colons, etc. Set fColonExtra to 4 or so to set this up.*/#endif