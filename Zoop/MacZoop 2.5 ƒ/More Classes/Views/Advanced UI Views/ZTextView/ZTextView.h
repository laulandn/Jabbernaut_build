/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZTextView.h		-- view that implements text editor******			©2000-2001, Max Horn*****************************************************************************************************/#pragma once#ifndef __ZTEXTVIEW__#define __ZTEXTVIEW__#include	"ZScrollView.h"class ZUndoTextTask;class ZTextModifyTask;class ZTextTypingTask;DEFINECLASSID( ZTextView, 'ztxv' );// various flags:enum{	kTVEditable				= 1 << 0,			// is the text editable?	kTVSelectable			= 1 << 1,			// is the text selectable?	kTVFixedWidth			= 1 << 2,			// fixed width or auto adjust width?	kTVGrayInactive			= 1 << 3,			// TRUE to draw text gray in inactive state	kTVTreatReturnAsEnter	= 1 << 4,			// make "return" work like "enter" - useful in dialogs	kTVNoStyledText			= 1 << 5			// no styled text may be used};// this class uses TextEdit to display & handle textclass	ZTextView	: public ZScrollView{	friend class		ZUndoTextTask;	friend class		ZTextTypingTask;private:	TEHandle			fMacTE;					// the TextEdit record	unsigned short		fFlags;					// various flags	long				fCaretTime;				// D&D - caret blink time	Boolean				fCaretShow;				// D&D - is caret visible right now?	short				fCaretOffset;			// D&D - current position of caret	short				fLastOffset;			// D&D - last position caret was	short				fInsertPosition;		// D&D - position at which drag would be inserted	unsigned long		fAutoScrollTicks;		ZTextModifyTask*	fCurrentTask;public:	ZTextView( ZView* aParent, Rect* aFrame,				const Boolean makeHBar = FALSE,				const Boolean makeVBar = TRUE,				const Boolean hasSizeBox = FALSE );	virtual ~ZTextView();// drawing		virtual void			DrawContent();// clicking	virtual void			SetViewCursor( const Point mouse, const short modifiers );	virtual void			ClickContent( const Point mouse, const short modifiers );	virtual Boolean			ClickInSamePlace( const Point a, const Point b );// state			virtual void			Activate();	virtual void			Deactivate();// sizing & positioning	virtual void			SetSize( const short aWidth, const short aHeight );// info about frame, bounds, etc		virtual void			GetTextRect( Rect* aRect );// scrolling stuff		virtual void			ScrollTo( const short hPosition, const short vPosition );	virtual void			GetPosition( short* pH, short* pV );			virtual void			ScrollView( const short dh, const short dv );	virtual void			ClickScroll( const Point mouse );// commander methods:		virtual void			UpdateMenus();	virtual void			HandleCommand( const ZoopCommand cmd );	virtual void			HandleCommand( const short menuID, const short itemID );	virtual void			Type( const char theKey, const short modifiers );	virtual void			Idle();	virtual void			DoSelectionUpdate( Boolean state );// std edit commands	virtual Boolean			CanPasteType();	virtual void			DoCut();	virtual void			DoCopy();	virtual void			DoPaste();	virtual void			DoClear();	virtual void			DoSelectAll();	// drag and drop		virtual Boolean			ShouldDrag( const Point mouse, const short modifiers );	virtual void			MakeDragRegion( RgnHandle aRgn );	virtual void			MakeDragData( const DragReference theDrag, const short modifiers );	virtual Boolean			AcceptsFlavour( const OSType aFlavour );	virtual void			DDEnterView( const DragReference theDrag );	virtual void			DDExitView( const DragReference theDrag );	virtual void			DDInsideView( const Point mouse, const DragReference theDrag );		virtual Boolean			UnpackDrop( const DragReference theDrag );		virtual void			Drop( const OSType flavour, const Ptr data, const long dataSize, const DragReference theDrag );// setters		virtual void			SetText( Ptr textBuf, const long txLength );	virtual void			SetText( Handle textH, Handle styleH = NULL );	virtual void			SetText( short textResID );	virtual void			SetFlags( unsigned short flags );	virtual void			SetFontAlignment( const short align );	virtual void			SetForeColour( const RGBColor* rgb );	virtual void			SetFontInfo( const short fontID, const short size, const Style );// getters		virtual void			GetText( Handle* textH, Handle* styleH = NULL ); 	virtual long			GetTextLength();	virtual Boolean			HasSelection();	TEHandle				GetMacTextEdit() { return fMacTE; };// debug support		virtual void			ReportFields();	protected:	virtual void			TEViewInit();	virtual void			RecalText( Boolean scrollToCaret );	virtual void			TEClickLoop();	virtual void			DrawCaret( short textOffset );private:#if GENERATINGPOWERPC	static pascal Boolean	TEClickLoopProc( TERec* tr );#else	static pascal void		TEClickLoopProc();#endif	static TEClickLoopUPP	fClickLoopUPP;	static ZTextView*		fClickedZTextView;};// utility functions for making text views, can be registered as dialog itemsZView*		CreateNewTextView( ZView* aParent, Rect* aFrame, const short textResID );ZView*		CreateNewTextViewWithParams( ZView* aParent, Rect* aFrame, const short paramCount, long params[] );ZView*		CreateNewEnhancedTextBox( ZView* aParent, Rect* aFrame, const short pCount, long params[] );#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// structure of 'View' resource for ZTextView:typedef struct{	ScrollViewTemplate	svt;	Boolean				isEditable;	Boolean				isSelectable;	Boolean				fixedWidth;	Boolean				grayInactive;	short				textResID;	short				justify;}TextViewTemplate, *TextViewTemplatePtr, **TextViewTemplateHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif