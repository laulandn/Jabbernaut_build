/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZUndoTextTask.h		-- undo task for ZTextView*****			©2000-2001, Max Horn*****************************************************************************************************/#pragma once#ifndef __ZUndoTextTask__#define __ZUndoTextTask__#include	"ZUndoTask.h"#include	"ZTextView.h"class	ZUndoTextTask : public ZUndoTask{public:	ZUndoTextTask( Str63 taskName, ZTextView* aView )		: ZUndoTask( taskName, aView )		{ ASSERT( "boss must be ZTextView but is not!",  NULL != dynamic_cast<ZTextView*>(aView), 0 ) }protected:	TEHandle		GetTEHandle()		{ return dynamic_cast<ZTextView*>(itsTarget)->GetMacTextEdit(); }	void			ForceViewRecal()		{			ZTextView*	ztv = dynamic_cast<ZTextView*>(itsTarget);			ztv->RecalText( TRUE );			ztv->PostContentRefresh();		}};class	ZTextStyleTask : public ZUndoTextTask{protected:	short			fOldSelStart;	short			fOldSelEnd;	StScrpHandle	fOldStyle;		short			fNewMode;	TextStyle		fNewStyle;	public:	ZTextStyleTask( Str63 taskName, ZTextView* aView, short inMode, const TextStyle &inStyle );		virtual void	Do();	virtual void	Undo();};class	ZTextAlignmentTask : public ZUndoTextTask{protected:	short			fOldJust;	short			fNewJust;	public:	ZTextAlignmentTask( Str63 taskName, ZTextView* aView, short inJust );		virtual void	Do();	virtual void	Undo();};class	ZTextModifyTask : public ZUndoTextTask{protected:	// Define an internal helper type	struct TextState	{		short			selStart;		short			selEnd;		StScrpHandle	styleH;		Handle			textH;		TextState() : selStart(0), selEnd(0), styleH(NULL), textH(NULL) {}		void			Record(TEHandle inTEh);		void			Release();		Boolean			IsInited() const;	};		TextState		fOldState;	TextState		fNewState;	public:	ZTextModifyTask( Str63 taskName, ZTextView* aView );		virtual void	RecordOldState();	virtual void	RecordNewState();protected:	virtual void	ApplyState( const TextState &srcState, const TextState &dstState );	virtual void	Do();	virtual void	Undo();};class	ZTextTypingTask : public ZTextModifyTask{protected:	short			fTypingPos;	public:	ZTextTypingTask( Str63 taskName, ZTextView* aView );		virtual Boolean	Type( const char theKey, const short modifiers );};enum{		kTextTasksStrResID	= 130};enum{		kTextTask_Cut		= 1,		kTextTask_Paste		= 2,		kTextTask_Clear		= 3,		kTextTask_Drag		= 4,		kTextTask_Format	= 5,		kTextTask_Style		= 6,		kTextTask_Typing	= 7};#endif