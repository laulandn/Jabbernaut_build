/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZPatternMenuView.cpp		-- pattern pop-up menu view******			©2000, Graham Cox*****************************************************************************************************/#include	"ZPatternMenuView.h"#include	"MacZoop.h"#include	"ColourPopUp.h"#include	"PatternMenu.h"/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZPatternMenuView::ZPatternMenuView( ZView* aParent, Rect* aFrame, const short patType, const short patResID, const short patIndex )	: ZView( aParent, aFrame ){	fPatType = patType;	fPatResID = patResID;	fPatIndex = patIndex;		if ( fPatType == kFullColourPattern )		FailNILRes( fPat = (Handle) GetIndCPattern( fPatResID, fPatIndex ));	else		fPat = NULL;			SetNoBackgroundErase( TRUE );}/*--------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZPatternMenuView::ZPatternMenuView( ZView* aParent, const short viewResourceID )	: ZView( aParent ){	ViewResInit( viewResourceID );}/*---------------------------------***  DESTRUCTOR  ***----------------------------------*/ZPatternMenuView::~ZPatternMenuView(){	if ( fPat )		DisposePixPat((PixPatHandle) fPat );}/*---------------------------------***  DrawContent  ***--------------------------------*//*access:			publicoverrides:		description: 	draw the viewins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZPatternMenuView::DrawContent(){	Rect	r;		GetBounds( &r );#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		DrawThemePatternPopUp( FALSE );	}	else	{#endif		Pattern		thePat;				switch( fPatType )		{			default:			case kBlackAndWhitePattern:				GetIndPattern( &thePat, fPatResID, fPatIndex );				DrawStandardPatternSelector( &r, &thePat, &gBlack, &gWhite );				break;							case kColourised1BitPattern:				GetIndPattern( &thePat, fPatResID, fPatIndex );				//DrawStandardPatternSelector( &r, &thePat, &fFore, &fBack );				break;							case kFullColourPattern:				DrawStandardCPatternSelector( &r, (PixPatHandle) fPat );				break;		}#if APPEARANCE_MGR_AWARE	}#endif}/*--------------------------------***  ClickContent  ***--------------------------------*//*access:			publicoverrides:		description: 	handle mouse click in viewins: 			<mouse> local mouse point				<modifiers> modifier keysouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZPatternMenuView::ClickContent( const Point mouse, const short modifiers ){	Rect		r;	long		mSelect = 0;	Point		loc;	RGBColor	fore, back;		GetBounds( &r );		loc.h = r.left + 1;	loc.v = r.bottom;	LocalToGlobal( &loc );#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		DrawThemePatternPopUp( TRUE );	else#endif			InvertStandardColourSelector( &r );	switch( fPatType )	{		default:		case kBlackAndWhitePattern:			mSelect = PopUpBWPatternMenu(loc, fPatResID, fPatIndex );			break;					case kColourised1BitPattern:			ZViewEnvironment*	env = GetEnvironment();						env->GetForeColour( &fore );			env->GetBackColour( &back );			mSelect = PopUpBWColourisedMenu( loc, fPatResID, fPatIndex, &fore, &back );			break;					case kFullColourPattern:			mSelect = PopUpCPatternMenu( loc, fPatResID, fPatIndex );			break;	}	if ( HiWord( mSelect ) != 0 )		SetPattern( LoWord( mSelect ));	#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		DrawThemePatternPopUp( FALSE );	else#endif			InvertStandardColourSelector( &r );}/*-----------------------------------***  GetPattern  ***------------------------------*//*access:			publicoverrides:		description: 	obtain black and white pattern from the viewins: 			<aPat> receives the patternouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void			ZPatternMenuView::GetPattern( Pattern* aPat ){	GetIndPattern( aPat, fPatResID, fPatIndex );}/*--------------------------------***  GetColourPattern  ***---------------------------*//*access:			publicoverrides:		description: 	obtain colour pattern from the viewins: 			noneouts: 			copy of colour pattern from view (or NULL if not a colour pattern type)notes:			caller disposes of handle using DisposePixPat----------------------------------------------------------------------------------------*/PixPatHandle	ZPatternMenuView::GetColourPattern(){	if ( fPatType == kFullColourPattern && fPat )	{		PixPatHandle	pp;				FailNIL( pp = NewPixPat());		CopyPixPat((PixPatHandle) fPat, pp );		return pp;	}	else		return NULL;}/*-----------------------------------***  SetPattern  ***------------------------------*//*access:			publicoverrides:		description: 	sets pattern to the indexed pattern passedins: 			<aPatIndex. index of pattern in relevant pattern listouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void			ZPatternMenuView::SetPattern( const short aPatIndex ){	if ( aPatIndex != fPatIndex )	{		fPatIndex = aPatIndex;				if ( fPatType == kFullColourPattern )		{			if ( fPat )				DisposePixPat((PixPatHandle) fPat );							FailNILRes( fPat = (Handle) GetIndCPattern( fPatResID, fPatIndex ));			}				SendMessage( kPatternPopUpClicked, &fPatIndex );				if ( !gMacInfo.hasAppearanceMgr )			PostRefresh();	}}/*------------------------------***  InitViewFromResource  ***--------------------------*//*access:			publicoverrides:		description: 	initialise the view from data in a 'View' resource handleins: 			<theRes> handle to 'View' resourceouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZPatternMenuView::InitViewFromResource( Handle theRes ){	FailNILParam( theRes );		ZView::InitViewFromResource( theRes );		PatternMenuViewTemplateHdl	pmH = (PatternMenuViewTemplateHdl) theRes;		fPatType = (*pmH)->patType;	fPatResID = (*pmH)->patResID;	fPatIndex = (*pmH)->patIndex;	}/*-------------------------------***  CreateViewResource  ***---------------------------*//*access:			publicoverrides:		description: 	Fills in the resource handle according to its templated structureins: 			<resHandle> valid handle of adequate sizeouts: 			nonenotes:			This method should only be used by the RAD tool to create View resources				(not for application use)----------------------------------------------------------------------------------------*/void		ZPatternMenuView::CreateViewResource( Handle resHandle ){	FailNILParam( resHandle );		if ( GetHandleSize( resHandle ) < sizeof( PatternMenuViewTemplate ))		FailOSErr( kViewTemplateHandleSizeTooSmallErr );			PatternMenuViewTemplateHdl	pmH = (PatternMenuViewTemplateHdl) resHandle;		(*pmH)->patType = fPatType;	(*pmH)->patResID = fPatResID;	(*pmH)->patIndex = fPatIndex;		ZView::CreateViewResource( resHandle );	}/*---------------------------------***  ReportFields  ***-------------------------------*//*access:			publicoverrides:		description: 	report field info to inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZPatternMenuView::ReportFields(){	ZView::ReportFields();		XSHOWFIELD( fPatType, ft_signedshort );	XSHOWFIELD( fPatResID, ft_signedshort );	XSHOWFIELD( fPatIndex, ft_signedshort );	XSHOWFIELD( fPat, ft_Handle );}/*----------------------------***  DrawThemePatternPopUp  ***---------------------------*//*access:			protectedoverrides:		description: 	draw the theme-savvy version of the pop-up buttonins: 			<pressed> whether button pressed or notouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZPatternMenuView::DrawThemePatternPopUp( Boolean pressed ){#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		Rect				r;		ThemeButtonDrawInfo info;		Pattern				thePat;				GetBounds( &r );				info.state = ( IsActive() && IsEnabled())? ( pressed? kThemeStatePressed : kThemeStateActive ) : kThemeStateInactive;		info.value = 0;		info.adornment = kThemeAdornmentNone;				DrawThemeButton( &r, kThemePopupButton, &info, NULL, NULL, NULL, 0 );					// draw a colour thingy on top. Note there are no metrics for components		// of a popup button, so I'm having to set a value empirically here. This		// might not be right in Aqua.				InsetRect( &r, 6, 6 );		r.right -= 20;		DrawThemeGenericWell( &r, info.state, TRUE );				switch( fPatType )		{			default:			case kBlackAndWhitePattern:				SetPortBlackWhite();				GetIndPattern( &thePat, fPatResID, fPatIndex );				FillRect( &r, &thePat );				break;							case kColourised1BitPattern:				PrepareForDrawing();				GetIndPattern( &thePat, fPatResID, fPatIndex );				FillRect( &r, &thePat );				break;							case kFullColourPattern:				if ( fPat )					FillCRect( &r, (PixPatHandle) fPat );				break;		}	}#endif}#pragma mark -/*--------------------------***  CreateNewPatternMenuView  ***--------------------------*//*access:			globaloverrides:		description: 	create pattern menu view with parametersins: 			<aParent> parent view				<aFrame> bounding rect and position of view in parent				<pCount> count of parameters				<params> the parametersouts: 			nonenotes:			param[0] is the pattern type				param[1] is the resource ID of the pattern list				param[2] is the index of the pattern in the list----------------------------------------------------------------------------------------*/ZView*	CreateNewPatternMenuView( ZView* aParent, Rect* aFrame, const short pCount, long params[] ){	ZPatternMenuView*	pv;		FailNIL( pv = new ZPatternMenuView( aParent, aFrame, params[0], params[1], params[2] ));	return pv;}