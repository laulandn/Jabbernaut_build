/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			MZTooltips.h		-- tooltips scheme******			©2001, Graham Cox*****************************************************************************************************/#pragma once#ifndef __MZTOOLTIPS__#define __MZTOOLTIPS__#include	"ZWindow.h"class	ZTooltipHandler	: public ZCommander{public:	ZTooltipHandler();	virtual ~ZTooltipHandler();		virtual void	ShowTooltip( ZView* forView );	virtual void	HideTooltip( Boolean resetTips = FALSE );	virtual void	DoTimer( long timerID );		void			EnableTips( Boolean enable ){ fTipsEnabled = enable; }	void			SetTipDelay( const short tipTicks ){ fTipDelay = tipTicks; }	Boolean			TipsEnabled(){ return fTipsEnabled; }	ZWindow*		GetTooltipWindow(){ return fTipWindow; }		virtual void	ReportFields();protected:	virtual void	ToolTipInit();	virtual void	QueueTip();private:	ZWindow*		fTipWindow;	ZView*			fCurTipView;	short			fTipDelay;	Boolean			fTipsEnabled;};enum{	kStandardTipWindowResID		= 179,	kDefaultTooltipDelay		= 60};extern ZTooltipHandler*		gTooltips;/*Tooltips are a familiar if rather limited form of context-sensitive helpMZTooltips are based on a scheme private to the framework that will work across allsupported versions of the OS - it does not rely on the tooltip system in Carbon. Tooltipsare based on views so can only be used if you are using views as part of MacZoop 2.5 orlater.Each view can supply a single text string which is its tooltip. The code in this objectwill display that text in a pop-up window which is overlaid on the view close to the mouse.Tooltips show up after the mouse has been stationary within the view for a fixed time. Movingthe mouse out of the view or clicking will remove the tip.A view supplies the actual text - this object works out the window size needed and displays it.*/#endif