/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZGWorld.h			-- an object for managing an offscreen GWorld******			© 1996, Graham Cox*****************************************************************************************************/#pragma once#ifndef	__ZGWORLD__#define __ZGWORLD__#include	"ZObject.h"#include	<QDOffscreen.h>#include	<Quickdraw.h>#include	<Icons.h>#include	<FixMath.h>// set up streaming stuff:DEFINECLASSID( ZGWorld, 'zgwl' );// class def:class	ZGWorld	: public ZObject{protected:	GWorldPtr		gw;	GWorldFlags		pState;	short			lockLevel;	Boolean			inTempMem;public:		// constructors		ZGWorld( const Rect& aSize,			 const short aDepth,			 const CTabHandle aCTable = NULL,			 const Boolean makeTemp = FALSE);			 	ZGWorld( const PicHandle aPicture, const Boolean makeTemp = FALSE, const short depth = 0 );	ZGWorld( const short pictID, const Boolean makeTemp = FALSE, const short depth = 0 );	ZGWorld( ZGWorld* aGW, const Boolean makeTemp = FALSE );	ZGWorld();		// destructor		virtual ~ZGWorld();		// state manipulation and info		virtual void			Lock();	virtual void			Unlock();	virtual void			SetPurgeable( const Boolean aPurgeState );	virtual short			GetState();	virtual Boolean			InMemory();		// pixmap stuff		virtual PixMapHandle	GetPixMap( const Boolean lock = FALSE );	virtual void			ReallocPixMap();		// setting the size, depth and colours		virtual void			SetColours( const CTabHandle aCTable,										const Boolean reMapColours = TRUE);	virtual void			SetDepth( const short aDepth,									  const CTabHandle aCTable = NULL,									  const Boolean dither = FALSE);	virtual void			SetSize( const Rect& aSize,									 const Boolean scaleImage = TRUE);		// getting info about the size, depth, colours, mem		virtual short			GetDepth();	virtual CTabHandle		GetColours();	virtual void			GetSize( Rect* aFrame );	virtual long			GetImageMemSize();	virtual short			GetColourInfo();		long					GetRowOffset();		// copying utilities		virtual void			CopyIn(	const BitMap* srcBits, 	const Rect* src, const Rect* dest, const short mode = srcCopy, RgnHandle mask = NULL );	virtual void			CopyOut( const BitMap* destBits, const Rect* src, const Rect* dest, const short mode = srcCopy, RgnHandle mask = NULL ); 	virtual void			CopyIn(	ZGWorld* srcGW, const Rect* src, const Rect* dest, const short mode = srcCopy, RgnHandle mask = NULL );	virtual void			CopyOut( ZGWorld* destGW, const Rect* src, const Rect* dest, const short mode = srcCopy, RgnHandle mask = NULL ); 	virtual void			Copy( ZGWorld* aGW, const short mode = srcCopy );	virtual void			Clear();		virtual void			CopyOutThroughMask( ZGWorld* destGW,												ZGWorld* maskGW,												const Rect* src,												const Rect* mask,												const Rect* dest,												const short mode = srcCopy );	virtual void			CopyOutThroughMask( const BitMap* destBits,												ZGWorld* maskGW,												const Rect* src,												const Rect* mask,												const Rect* dest,												const short mode = srcCopy );																									virtual void			CopyOutToMask( ZGWorld* destGW );		// picture utilities		virtual PicHandle		MakePicture( const Rect* toFitRect = NULL, RgnHandle withMaskRgn = NULL );	virtual PicHandle		MakePicture( const Rect* srcRect, const Rect* destRect );	virtual void			CopyPicture( PicHandle aPicture, const Rect* destRect = NULL, Boolean dither = FALSE );			// graphics port set-up		virtual void			SetPortToGW( CGrafPtr* savedPort, GDHandle* savedDevice );	virtual void			SetPortColours( const RGBColor* aFore, const RGBColor* aBack );	virtual void			SetPortColours();	virtual void			GetPortColours( RGBColor* aFore, RGBColor* aBack );		// icon plotting		virtual void			CopyIcon( CIconHandle anIcon, const Rect* dest, const short align = 0, const short transform = 0 );	virtual void			CopyIcon( const short iconID, const Rect* dest, const short align = 0, const short transform = 0 );		// search procedures		virtual void			InstallSearchProc( ColorSearchUPP aSearchProc );	virtual void			RemoveSearchProc( ColorSearchUPP aSearchProc );	virtual void			SetOpColour( const RGBColor* rgb );	virtual void			SetOpColour( const short percentGray = 50 );		// inversion & other special effects:		virtual void			Invert( RgnHandle maskRgn = NULL );	virtual void			FlipHorizontal( RgnHandle maskRgn = NULL );	virtual void			FlipVertical( RgnHandle maskRgn = NULL );		inline GWorldPtr		GetMacGWorld(){ return gw; }	virtual void			SetMacGWorld( GWorldPtr aGW );		// streaming		virtual void			WriteToStream( ZStream* aStream );	virtual void			ReadFromStream( ZStream* aStream );		virtual void			GetDebugInfoString( Str255 s );	virtual void			ReportFields();protected:		virtual void			MakeMacGWorld(  const Rect& aSize,											const short aDepth,											const CTabHandle aCTable,											const Boolean makeTemp);	virtual void			MakeGWorldFromPicture( const PicHandle aPic, const Boolean makeTemp, const short depth = 0 );	virtual void			Flip( const short flipDir, RgnHandle mask );		static	ColorSearchUPP	sMaskProc;	static pascal Boolean	MaskSearchProc( RGBColor* rgb, long* pos );};// flip contants:enum{	kFlipHorizontal = 1,	kFlipVertical};// utility functions that can be used outside of this object if desiredvoid	GetPicParams(PicHandle aPic, Rect* aSize, short* aDepth, CTabHandle* aCTable);void	Scale2Rects(Rect *theRect,Rect *refRect);void	FlipRegion( RgnHandle aRgn, const short flipDir );// some errors that could get thrown. Always be prepared to handle exceptions from this class.enum{	kGWNoMemForPixels		= 343,	kGWPixelsPurgedErr		= 344,	kGWCTableUpdtFailed		= 345,	kGWChangeDepthFailed	= 346,	kGWChangeSizeFailed		= 347,	kGWBadPictureErr		= 348,	kGWBadPictureSizErr		= 349};// colour depth info valuesenum{	ctBlackAndWhite = 1,	ctFourGreys = 2,	ctSixteenGreys = 36,	ctSixteenColours = 4,	ct256Greys = 40,	ct256Colours = 8,	ctThousandsOfColours = 16,	ctMillionsOfColours = 32};#endif