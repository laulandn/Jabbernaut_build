/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZDiskGWorld.h			-- a GWorld that can keep its image in a file******			© 2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef	__ZDISKGWORLD__#define __ZDISKGWORLD__#include	"ZGWorld.h"#include    "ZFile.h"/*This is a GWorld that allows its image to be purgeable. The pixels are backed up into atemporary file that lives in the Temporary Items folder. When the image is locked, thepixels are read into memory if necessary.This object allows an application to use potentially very large GWorlds while maintaining asmaller memory footprint.It can be used anywhere a ZGWorld is used- all disk operations are transparent to the caller,but obviously performance may be hit.Note that there is no easy way to determine if the image is about to be purged, so the pixelsare written to the file whenever the GWorld is unlocked. This could cause a major performancehit, so for images that are locked and unlocked frequently, it's probably better to use astandard GWorld. This class is ideal for undo tasks and longer-term image storage.The pixels are saved to the file absolutely raw- there is no attempt to organise, compress orformat them. This is done to keep the time to read and write the image to a minimum.NOTE: operations such as SetSize() and SetDepth() are not recommended with this class. If youhave to change the image size or depth, make sure you load the pixels first by locking andunlocking the image, then setting the pixels unpurgeable.*/class   ZDiskGWorld     : public ZGWorld{protected:    ZFile*      tf;public:    ZDiskGWorld( const Rect& aSize, const short depth, const CTabHandle aCTable = NULL );	ZDiskGWorld( const PicHandle aPicture, const short depth = 0 );	ZDiskGWorld( const short pictID, const short depth = 0 );	ZDiskGWorld( ZGWorld* aGW );    ~ZDiskGWorld();    	virtual void	Lock();	virtual void	Unlock();	virtual void	SetMacGWorld( GWorldPtr aGW );protected:    virtual void    InitGWDisk();    virtual void    LoadPixelsFromDisk();    virtual void    SavePixelsToDisk();};#endif