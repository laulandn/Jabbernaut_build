/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZDiskGWorld.cpp			-- a GWorld that can keep its image in a file******			© 2000, Graham Cox*****************************************************************************************************/#include	"ZDiskGWorld.h"#include    "MacZoop.h"/*-------------------------------***  CONSTRUCTOR  ***-----------------------------------*/ZDiskGWorld::ZDiskGWorld( const Rect& aSize, const short depth, const CTabHandle aCTable )    : ZGWorld( aSize, depth, aCTable, FALSE ){    InitGWDisk();}/*-------------------------------***  CONSTRUCTOR  ***-----------------------------------*/ZDiskGWorld::ZDiskGWorld( const PicHandle aPicture, const short depth )    : ZGWorld( aPicture, FALSE, depth ){    InitGWDisk();}/*-------------------------------***  CONSTRUCTOR  ***-----------------------------------*/ZDiskGWorld::ZDiskGWorld( const short pictID, const short depth )    : ZGWorld( pictID, FALSE, depth ){    InitGWDisk();}/*-------------------------------***  CONSTRUCTOR  ***-----------------------------------*/ZDiskGWorld::ZDiskGWorld( ZGWorld* aGW )    : ZGWorld( aGW, FALSE ){    InitGWDisk();}/*--------------------------------***  DESTRUCTOR  ***-----------------------------------*/ZDiskGWorld::~ZDiskGWorld(){    if ( tf )    {         tf->Discard();         FORGETOBJECT( tf );    }}/*-----------------------------------***  Lock  ***-------------------------------------*//*access:			public	overrides:description: 	lock a GWorld ready for drawing into it or copying itins: 			noneouts: 			nonenotes:			loads image from disk if needed----------------------------------------------------------------------------------------*/void	ZDiskGWorld::Lock(){    if ( lockLevel == 0 )    {        if ( ! InMemory())            LoadPixelsFromDisk();    }        ZGWorld::Lock();}/*----------------------------------***  Unlock  ***------------------------------------*//*access:			public	overrides:description: 	unlock a GWorld after drawing into it or copying itins: 			noneouts: 			nonenotes:			copies image out to disk and sets it purgeable----------------------------------------------------------------------------------------*/void	ZDiskGWorld::Unlock(){    ZGWorld::Unlock();        if ( lockLevel <= 0 )    {        SavePixelsToDisk();        SetPurgeable( TRUE );    }}/*---------------------------------***  SetMacGWorld  ***-------------------------------*//*access:			public	overrides:description: 	use the object interface to an existing toolbox GWorldins: 			<aGW> GWorld to take overouts: 			nonenotes:			rarely used - recommended not to unless you are sure----------------------------------------------------------------------------------------*/void	ZDiskGWorld::SetMacGWorld( GWorldPtr aGW ){	ZGWorld::SetMacGWorld( aGW );	    if ( lockLevel <= 0 )    {        SavePixelsToDisk();        SetPurgeable( TRUE );    }}/*--------------------------------***  InitGWDisk  ***----------------------------------*//*access:			protected	overrides:description: 	common initialisationins: 			noneouts: 			nonenotes:			creates temporary file to store image data----------------------------------------------------------------------------------------*/void    ZDiskGWorld::InitGWDisk(){	short	fv;	long	fd, tfRand;	Str31   tfName;	FSSpec  fs;	OSErr   err;		FailOSErr( FindFolder( kOnSystemDisk, kTemporaryFolderType, kCreateFolder, &fv, &fd ));	    // make a random filename- keep going until we are sure it doesn't exist!        do    {    	tfRand = ((unsigned long) Random() << 16L ) + Random();    	    	NumToString( ABS( tfRand ), tfName );    	CopyPString( "\p$$_ZDISKGWORLD_", fs.name );    	ConcatPStrings( fs.name, tfName );    	    	err = FSMakeFSSpec( fv, fd, fs.name, &fs );    }    while( err != fnfErr );            FailNIL( tf = new ZFile( fs ));        tf->SetType( 'PIXL' );    tf->Create();    tf->Open( fsRdWrPerm );        SavePixelsToDisk();    SetPurgeable( TRUE );}/*----------------------------***  LoadPixelsFromDisk  ***------------------------------*//*access:			protected	overrides:description: 	recreate image buffer and load pixels from diskins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void    ZDiskGWorld::LoadPixelsFromDisk(){    // is called ONLY if pixels NOT in memory (important!)        PixMapHandle    pp;    long            imageSize;        ReallocPixMap();    SetPurgeable( FALSE );        tf->SetMark( 0 );        pp = GetGWorldPixMap( gw );        if ( LockPixels( pp ))    {        imageSize = GetImageMemSize();        tf->Read((*pp)->baseAddr, &imageSize );                UnlockPixels( pp );    }}/*------------------------------***  SavePixelsToDisk  ***------------------------------*//*access:			protected	overrides:description: 	write out raw image buffer to temporary fileins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void    ZDiskGWorld::SavePixelsToDisk(){    PixMapHandle    pp;    long            imageSize;    tf->SetMark( 0 );        pp = GetGWorldPixMap( gw );        if ( LockPixels( pp ))    {        imageSize = GetImageMemSize();        tf->Write((*pp)->baseAddr, &imageSize );        tf->SetLength( tf->GetMark());                UnlockPixels( pp );    }}