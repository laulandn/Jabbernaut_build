/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZListDialogItem.h			-- dialog item object that handles a list manager list**			****			© 1999, Graham Cox****************************************************************************************************/#pragma once#ifndef __ZLISTDIALOGITEM__#define	__ZLISTDIALOGITEM__#include	"ZDialogItem.h"#include	"MList.h"DEFINECLASSID( ZListDialogItem, 'zdgl' );// item class:class	ZListDialogItem	: public ZDialogItem, public MList{public:		ZListDialogItem();	ZListDialogItem( ZDialog* aBoss, const short anID );// initialisation		virtual void			InitItem( const short paramCount, const long params[] );// standard commander type stuff	virtual void			Type( const char theKey, const short modifiers );// appearance		virtual void			Enable( Boolean useHistory );	virtual void			Disable( Boolean useHistory );    virtual void            Activate();    virtual void            Deactivate();    virtual void			Hide();    virtual void			Show();    // mousing around	virtual void			Click( const Point mouse, const short modifiers );// override these to allow us to set up item colours, fonts, etc		virtual void			MLSetSelection( Cell aCell, Boolean retainExisting = FALSE );	virtual void			MLSetCell( Cell theCell, Ptr buf, short length );	virtual short			MLAppendRow();	virtual short			MLAppendCol();	virtual short			MLAppendRowInAlphaOrder( Str255 s, Boolean rejectExactMatches = FALSE );	virtual void			MLDeleteRow( short whichRow );	virtual void			MLDeleteCol( short whichCol );	virtual void			SetBounds( Rect* newBounds );	virtual void            MLScrollToSelection();	// GetValue & SetValue deal with single selection, so list of this type can mimic controls    virtual void            SetValue( const long value );    virtual long            GetValue();        virtual void			ReportFields() { ZDialogItem::ReportFields(); MList::ReportFields(); };protected:// private stuff		virtual void			DrawItem();	virtual void			MLNewCellSelected( Cell newCell );	virtual void			MLCellDoubleClicked( Cell theCell );};// message sent from list box when a new item is selectedenum{	msgNewListItemSelected = 'lstc',	msgListItemDoubleClicked = 'lsdb'};// modifier messages:enum{    kModifierTypeInDialogList   = 'dltp'};#endif