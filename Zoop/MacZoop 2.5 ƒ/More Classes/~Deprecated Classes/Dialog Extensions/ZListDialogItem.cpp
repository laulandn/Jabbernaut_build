/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZListDialogItem.cpp			-- dialog item object that handles a list manager list**			****			© 1999, Graham Cox****************************************************************************************************/#include	"ZListDialogItem.h"#include	"MacZoop.h"#include	"ZDialog.h"#include	"ZGrafState.h"#include    <lists.h>CLASSCONSTRUCTOR( ZListDialogItem ); /*-------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZListDialogItem::ZListDialogItem()	: ZDialogItem(), MList(){ 	classID = CLASS_ZListDialogItem; 	 	iType = kCustomDialogItemType; 	macItemHandle = NULL; 	canTakeFocus = TRUE;}  /*-------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZListDialogItem::ZListDialogItem( ZDialog* aBoss, const short anID )	: ZDialogItem( aBoss, anID ), MList( aBoss ){	classID = CLASS_ZListDialogItem; 	iType = kCustomDialogItemType; 	macItemHandle = NULL; 	canTakeFocus = TRUE;}  /*---------------------------------***  INITITEM  ***-----------------------------------*//*	initialise the list from templates, etc.----------------------------------------------------------------------------------------*/void		ZListDialogItem::InitItem( const short paramCount, const long params[] ){	// "magic" parameters to this object are:	// 0: resource ID of a 'LIST' resource describing features	// 1: resource ID of a 'STR#' resource used if first param is 0 or unspecified by LIST.	Point		cs = { 0, 0 };	Boolean		preLoad = TRUE;	Rect		r = bounds;		if ( paramCount > 0 && params[0] > 0 )	{		MLInit( &r, params[0] );				// need to set our font, colours, etc from the LIST resource				ListTemplateHdl		lt;				FailNILRes( lt = (ListTemplateHdl) GetResource( kListTemplateResType, params[0] ));				fontSize = (*lt)->fontSize;		GetFNum((*lt)->fontName, &font );				canTakeFocus = (*lt)->keyboardNav;		visible = (*lt)->visible;				if ((*lt)->whiteBk )			bkColour = gWhite;					if ((*lt)->stringsListID > 0 )			preLoad = FALSE;				ReleaseResource((Handle) lt );	}	else		MLInit( &r, cs, 0, 1, TRUE, FALSE );		if (( paramCount > 1 ) && ( params[1] > 0 ) && preLoad )		MLPreloadFromResource( params[1] );			// MLInit can modify the bounds, so make sure it's right		MLGetBounds( &bounds );	MLSetSelectionFlags( lOnlyOne );}/*-----------------------------------***  TYPE  ***-------------------------------------*//*	handle keyboard in list----------------------------------------------------------------------------------------*/void		ZListDialogItem::Type( const char theKey, const short modifiers ){	FocusBoss();		// this construction is correct to establish scope for ZGrafState-	// do not "optimise"!		if ( 1 )	{		KeyInfo     keyInfo;		ZGrafState	gs;			PrepareForDrawing();				keyInfo.theKey = theKey;		keyInfo.modifiers = modifiers;	    	    if ( ExecuteModifiers( kModifierTypeInDialogList, &keyInfo ))    		MLKeyNavigation( keyInfo.theKey, keyInfo.modifiers );			((ZDialog*) GetBoss())->ClickItem( id );		}		ZDialogItem::Type( theKey, modifiers );}/*----------------------------------***  ENABLE  ***------------------------------------*//*	enables the item----------------------------------------------------------------------------------------*/void		ZListDialogItem::Enable( Boolean useHistory ){	ZDialogItem::Enable( useHistory );		ZGrafState gs;	PrepareForDrawing();		MLActivate();}/*----------------------------------***  DISABLE  ***-----------------------------------*//*	disables the item----------------------------------------------------------------------------------------*/void		ZListDialogItem::Disable( Boolean useHistory ){	ZGrafState gs;	PrepareForDrawing();		MLDeactivate();	ZDialogItem::Disable( useHistory );}/*-----------------------------------***  CLICK  ***------------------------------------*//*	deal with mouse down in the list----------------------------------------------------------------------------------------*/void		ZListDialogItem::Click( const Point mouse, const short modifiers ){	if ( enabled && hilited )	{		ZDialog*	zd = (ZDialog*) itsBoss;				SelfSelect();					ZGrafState gs;				PrepareForDrawing();		MLClick( mouse, modifiers );				zd->ClickItem( id );	}}/*---------------------------------***  DRAWITEM  ***-----------------------------------*//*	update the list----------------------------------------------------------------------------------------*/void		ZListDialogItem::DrawItem(){	Rect	        r = bounds;	ControlHandle   sb, hb;		hb = GetListHorizontalScrollBar( lh );	sb = GetListVerticalScrollBar( lh );			if ( hb )		r.bottom -= kStdScrollbarWidth;			if ( sb )		r.right -= kStdScrollbarWidth;		EraseRect( &r );	MLUpdate( &r );		if ( hb )		r.bottom += kStdScrollbarWidth;			if ( sb )		r.right += kStdScrollbarWidth;	#if APPEARANCE_MGR_AWARE		if ( gMacInfo.hasAppearanceMgr )		DrawThemeListBoxFrame( &r, hilited? kThemeStateActive : kThemeStateInactive );	else	{#endif		DrawStdFrame( &r );	#if APPEARANCE_MGR_AWARE	}#endif}/*----------------------------------***  ACTIVATE  ***----------------------------------*//*	activates the item----------------------------------------------------------------------------------------*/void       ZListDialogItem::Activate(){    ZDialogItem::Activate();        ControlHandle   sb;        sb = GetListVerticalScrollBar( lh );	if ( sb )	{		HiliteControl( sb, 0 );        Draw1Control( sb );    }        sb = GetListHorizontalScrollBar( lh );    	if ( sb )  	{		HiliteControl( sb, 0 );        Draw1Control( sb );    }}/*---------------------------------***  DEACTIVATE  ***---------------------------------*//*	deactivates the item----------------------------------------------------------------------------------------*/void       ZListDialogItem::Deactivate(){    ZDialogItem::Deactivate();    ControlHandle   sb;        sb = GetListVerticalScrollBar( lh );	if ( sb )		HiliteControl( sb, 255 );    sb = GetListHorizontalScrollBar( lh );    	if ( sb )		HiliteControl( sb, 255 );}/*------------------------------------***  HIDE  ***------------------------------------*//*	hides the item----------------------------------------------------------------------------------------*/void		ZListDialogItem::Hide(){	Boolean 		wasVis = IsVisible();    ControlHandle   sb;		ZDialogItem::Hide();	    if ( wasVis )    {	    MLDisableDrawing();	    	    sb = GetListVerticalScrollBar( lh );		if ( sb )			HideControl( sb );		    sb = GetListHorizontalScrollBar( lh );		if ( sb )			HideControl( sb );		}}/*------------------------------------***  SHOW  ***------------------------------------*//*	shows the item----------------------------------------------------------------------------------------*/void		ZListDialogItem::Show(){	Boolean			wasVis = IsVisible();    ControlHandle   sb;		ZDialogItem::Show();	    if ( !wasVis )    {    	MLEnableDrawing();    	    sb = GetListVerticalScrollBar( lh );		if ( sb )			ShowControl( sb );		    sb = GetListHorizontalScrollBar( lh );		if ( sb )			ShowControl( sb );		}}/*-----------------------------***  MLNEWCELLSELECTED  ***------------------------------*//*	send a message about a new selection in this list----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLNewCellSelected( Cell newCell ){	SendMessage( msgNewListItemSelected, &newCell );}/*----------------------------***  MLCELLDOUBLECLICKED  ***-----------------------------*//*	send a message about a double-click in the list----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLCellDoubleClicked( Cell theCell ){	SendMessage( msgListItemDoubleClicked, &theCell );}/*------------------------------***  MLSETSELECTION  ***--------------------------------*//*	changes the selection, preserving drawing environment----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLSetSelection( Cell aCell, Boolean retainExisting ){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();		MList::MLSetSelection( aCell, retainExisting );}/*---------------------------------***  MLSETCELL  ***----------------------------------*//*	sets the cell, preserving drawing environment----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLSetCell( Cell theCell, Ptr buf, short length ){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();		MList::MLSetCell( theCell, buf, length );}/*-------------------------------***  MLAPPENDROW  ***----------------------------------*//*	appends a row, preserving drawing environment----------------------------------------------------------------------------------------*/short		ZListDialogItem::MLAppendRow(){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();		return MList::MLAppendRow();}/*-------------------------------***  MLAPPENDCOL  ***----------------------------------*//*	appends a column, preserving drawing environment----------------------------------------------------------------------------------------*/short		ZListDialogItem::MLAppendCol(){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();		return MList::MLAppendCol();}/*-------------------------------***  MLDELETEROW  ***----------------------------------*//*	deletes a row, preserving drawing environment----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLDeleteRow( short whichRow ){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();	MList::MLDeleteRow( whichRow );}/*-------------------------------***  MLDELETECOL  ***----------------------------------*//*	deletes a col, preserving drawing environment----------------------------------------------------------------------------------------*/void		ZListDialogItem::MLDeleteCol( short whichCol ){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();	MList::MLDeleteCol( whichCol );}/*-------------------------***  MLAPPENDROWINALPHAORDER  ***----------------------------*//*	appends a row, and inserts the string in alphabetical order----------------------------------------------------------------------------------------*/short		ZListDialogItem::MLAppendRowInAlphaOrder( Str255 s, Boolean rejectExactMatches ){	FocusBoss();		ZGrafState	gs;		PrepareForDrawing();		return MList::MLAppendRowInAlphaOrder( s, rejectExactMatches );}/*--------------------------------***  SETBOUNDS  ***-----------------------------------*//*	resize/reposition list item----------------------------------------------------------------------------------------*/void		ZListDialogItem::SetBounds( Rect* newBounds ){	ZDialogItem::SetBounds( newBounds );#if TARGET_API_MAC_CARBON	SetListViewBounds( lh, newBounds );#else    (*lh)->rView = *newBounds;#endif	Boolean	hh, hv;		hh = ( GetListHorizontalScrollBar( lh ) != NULL );	hv = ( GetListVerticalScrollBar( lh ) != NULL );		MLSetSize( 	bounds.right - bounds.left - ( hv? kStdScrollbarWidth : 0 ),				bounds.bottom - bounds.top - ( hh? kStdScrollbarWidth : 0 ));}/*---------------------------***  MLSCROLLTOSELECTION  ***------------------------------*//*	scroll to selected cell----------------------------------------------------------------------------------------*/void       ZListDialogItem::MLScrollToSelection(){    ZGrafState  gs;    PrepareForDrawing();    MList::MLScrollToSelection();}void        ZListDialogItem::SetValue( const long value ){    Cell aCell;        aCell.h = 0;    aCell.v = value - 1;       MLSetSelection( aCell );}long        ZListDialogItem::GetValue(){    Cell aCell = { 0, 0 };        MLGetSelection( &aCell );    return aCell.v + 1;}