/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZCPopDialogItem.cpp			-- dialog item object that handles a colour pop-up**			****			© 1999, Graham Cox****************************************************************************************************/#include	"ZCPopDialogItem.h"#include	"MacZoop.h"#include	"ZDialog.h"#include	"ZGrafState.h"#include	"ColourPopup.h"#include	"ZGWorld.h"#if POP_PATTERNS	#include    "PatternMenu.h"#endif#if POP_GRADIENTS    #include    "GradientPopUp.h"#endif#ifndef kGradientPopUpMenuID#define kGradientPopUpMenuID    kColourPopUpMenuID#endif#ifndef kPatternMenuID#define	kPatternMenuID			kColourPopUpMenuID#endif// defined in PalMDEF.c:#if !TARGET_API_MAC_CARBONextern Point	gTornMenuPt;#endifCLASSCONSTRUCTOR( ZCPopDialogItem );/*-------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZCPopDialogItem::ZCPopDialogItem( ZDialog* aDialog, const short item )	: ZDialogItem( aDialog, item ){ 	classID = CLASS_ZCPopDialogItem; 	 	iType = kCustomDialogItemType; 	macItemHandle = NULL;	clutID = 8;	lastIndex = -1;	backColour = gWhite;	lastColour = gBlack;	itsType = cPopColourMenu;	itsPPat = NULL;}/*-------------------------------***  CONSTRUCTOR  ***----------------------------------*/ZCPopDialogItem::ZCPopDialogItem()	: ZDialogItem(){ 	classID = CLASS_ZCPopDialogItem; 	iType = kCustomDialogItemType; 	macItemHandle = NULL;	clutID = 8;	lastIndex = -1;	backColour = gWhite;	lastColour = gBlack;	itsType = cPopColourMenu;	itsPPat = NULL;}/*-------------------------------***  DESTRUCTOR  ***----------------------------------*/ZCPopDialogItem::~ZCPopDialogItem(){    switch ( itsType )    {        default:            break;                    case cPopCPatternMenu:            if ( itsPPat )                DisposePixPat( itsPPat );            break;       #if POP_GRADIENTS                case cPopGradientMenu:            if ( itsGradient )                ForgetObject( itsGradient );            break;    #endif           }}/*----------------------------------***  INITITEM  ***----------------------------------*//*initialise the clut from the parameter list----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::InitItem( const short paramCount, const long params[] ){	// "magic" parameters to this object are:	// 0: resource ID of 'clut' resource to display colours of (or ID of PAT# or PPT# resource)    // 1: menu type: 0 = colour, 1 = pattern, 2 = colour pattern    	if ( paramCount > 0 )		clutID = params[0];	else		clutID = 8;		    if ( paramCount > 1 )        itsType = (CPMType) params[1];#if POP_GRADIENTS            if ( itsType == cPopGradientMenu )        itsGradient = new UGradient();#endif#if POP_PATTERNS    if ( itsType == cPopPatternMenu )        itsPat = *QDLIGHTGRAYPATTERN;#endif}/*----------------------------------***  DRAWITEM  ***----------------------------------*//*draw the item----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::DrawItem(){	if ( lastIndex == 0 )	{	   Rect     r;	   	   DrawStandardColourSelector( &bounds, (RGBColor*) &gWhite ); 	   r = bounds;	   InsetRect( &r, 4, 4 );	   r.right--;	   r.bottom--;	   	   PenNormal();	   MoveTo( r.left, r.top );	   LineTo( r.right, r.bottom );	   MoveTo( r.right, r.top );	   LineTo( r.left, r.bottom );	}	else	{    	switch( itsType )    	{    	    default:    	    case cPopColourMenu:    	        DrawStandardColourSelector( &bounds, &lastColour );    	        break;    	    	#if POP_PATTERNS    	    case cPopPatternMenu:    	        DrawStandardPatternSelector( &bounds, &itsPat, &lastColour, &backColour );    	        break;    	            	    case cPopCPatternMenu:    	        DrawStandardCPatternSelector( &bounds, itsPPat );    	        break;    	#endif    	            	#if POP_GRADIENTS    	    case cPopGradientMenu:    	        DrawStandardGradientSelector( &bounds, itsGradient );    	        break;    	        	#endif    	}	}	if ( ! hilited )	{		PenPat( QDGRAYPATTERN );		PenMode( patBic );				PaintRect( &bounds );	}}/*-----------------------------------***  CLICK  ***------------------------------------*//*process a mouse click in the item	----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::Click( const Point where, const short modifiers ){	long	    mSelect;	Point	    loc;	ZGrafState  gs;		PrepareForDrawing();		loc.h = bounds.left + 1;	loc.v = bounds.bottom;	LocalToGlobal( &loc );		InvertStandardColourSelector( &bounds );		switch ( itsType )	{	    default:	    case cPopColourMenu:	        mSelect = PopUpColourPalette( loc, clutID, &lastColour, lastIndex );	        break;		#if POP_PATTERNS        	    case cPopPatternMenu:	        mSelect = PopUpBWColourisedMenu( loc, clutID, lastIndex, &lastColour, &backColour );	        break;	        	    case cPopCPatternMenu:	        mSelect = PopUpCPatternMenu( loc, clutID, lastIndex );	        break;	#endif		#if POP_GRADIENTS        	    case cPopGradientMenu:	        mSelect = PopUpGradientMenu( loc, gGradientList, lastIndex );	        break;	#endif	}		InvertStandardColourSelector( &bounds );		if ( HiWord( mSelect ) == kColourPopUpMenuID ||	     HiWord( mSelect ) == kPatternMenuID ||	     HiWord( mSelect ) == kGradientPopUpMenuID )	{		lastIndex = LoWord( mSelect );				// test for tear-off (not supported in Carbon):				if ( lastIndex == -1 )		{			SetLocalZoomSource( &bounds );					#if !TARGET_API_MAC_CARBON			gApplication->ProcessMenuTearOff( HiWord( mSelect ), gTornMenuPt );		#endif		}		else		{			// if a pattern menu, need to extract the selected pattern and set the local			// data member to it						if ( itsType != cPopColourMenu )			{			#if POP_PATTERNS			    if ( itsType == cPopCPatternMenu )			    {			        if ( itsPPat )			            DisposePixPat( itsPPat );			        			        itsPPat = GetIndCPattern( clutID, lastIndex );			    }			    else			    {			#endif			    #if POP_GRADIENTS   			        if ( itsType == cPopGradientMenu )			        {			            GradientRecHdl  grt;			            			            grt = GetIndGradient( gGradientList, lastIndex - 1 );			        			            if ( grt )			            {			                itsGradient->SetGradHandle( grt );			                DisposeHandle((Handle) grt );			            }			        }			        else			    #endif			        GetIndPattern( &itsPat, clutID, lastIndex );			#if POP_PATTERNS			    }			#endif			}						Draw();						// send a message with the chosen colour						switch( itsType )			{        	    default:        	    case cPopColourMenu:			        SendMessage( msgNewColourSelected, (void*) &lastColour );        	        break;        	                	    case cPopPatternMenu:			        SendMessage( msgNewPatternSelected, (void*) &itsPat );        	        break;        	                	    case cPopCPatternMenu:			        SendMessage( msgNewCPatternSelected, (void*) itsPPat );			        break;			 			    case cPopGradientMenu:			        SendMessage( msgNewGradientSelected, itsGradient );			        break;			}									((ZDialog*) itsBoss )->ClickItem( id );		}	}}void        ZCPopDialogItem::SetValue( long value ){    CTabHandle  ct;        if ( lastIndex != value )    {        lastIndex = value;                if ( lastIndex > 0 )        {            switch ( itsType )            {                default:                case cPopColourMenu:                    ct = GetCTable( clutID );                    lastColour = (*ct)->ctTable[ lastIndex - 1 ].rgb;                    DisposeCTable( ct );                    break;           	           	#if POP_PATTERNS                         case cPopPatternMenu:                    GetIndPattern( &itsPat, clutID, lastIndex );                    break;                                    case cPopCPatternMenu:                    if ( itsPPat )                        DisposePixPat( itsPPat );                                            itsPPat = GetIndCPattern( clutID, lastIndex );                      break;            #endif                                #if POP_GRADIENTS                                case cPopGradientMenu:                    GradientRecHdl  grt;                                        grt = GetIndGradient( gGradientList, lastIndex - 1 );                                        if ( grt )                    {                        itsGradient->SetGradHandle( grt );                        DisposeHandle((Handle) grt );                    }                     break;                      #endif            }        }        InvalItem();    }}/*------------------------------***  GETCHOSENCOLOUR  ***-------------------------------*//*get the currently picked colour	----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::GetChosenColour( RGBColor* aColour ){	*aColour = lastColour;}/*---------------------------------***  SETCOLOUR  ***----------------------------------*//*set the chosen colour programmatically. If the colour doesn't exist in the clut, thenearest match is displayed	----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::SetColour( RGBColor* aColour ){	// sets the initial colour, and also determines the closest index in the clut.	lastColour = *aColour;		if ( itsType == cPopColourMenu )	    lastIndex = FindBestIndexMatch( clutID, &lastColour );		InvalItem();}/*-------------------------------***  ReportFields  ***---------------------------------*//*supply info to the inspector----------------------------------------------------------------------------------------*/void		ZCPopDialogItem::ReportFields(){	ZDialogItem::ReportFields();	XSHOWFIELD( itsType, ft_signedshort );	XSHOWFIELD( clutID, ft_signedshort );	XSHOWFIELD( lastIndex, ft_signedshort );	XSHOWFIELD( lastColour, ft_RGBColor );	XSHOWFIELD( backColour, ft_RGBColor );}/*-----------------------------***  FINDBESTINDEXMATCH  ***-----------------------------*//*determine best match in the given clut	----------------------------------------------------------------------------------------*/short	FindBestIndexMatch( short clutID, RGBColor* matchThis ){	ZGWorld*	gw;	Rect		r = { 0, 0, 4, 4 };	CTabHandle	ct;	CGrafPtr	savePort;	GDHandle	saveDev;	long		result;		FailNIL( ct = GetCTable( clutID ));		FailNIL( gw = new ZGWorld( r, 8, ct ));		gw->SetPortToGW( &savePort, &saveDev );		result = Color2Index( matchThis );		SetGWorld( savePort, saveDev );	DisposeCTable( ct );	ForgetObject( gw );		return LoWord( result ) + 1;}