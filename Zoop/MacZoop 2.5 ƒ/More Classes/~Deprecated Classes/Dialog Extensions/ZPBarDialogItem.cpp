/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZPBarDialogItem.cpp			-- dialog item for a progress bar**			****			© 1999, Graham Cox****************************************************************************************************/#include	"ZPBarDialogItem.h"#include	"ProjectSettings.h"#include	"MacZoop.h"CLASSCONSTRUCTOR( ZPBarDialogItem );/*--------------------------------***  CONSTRUCTOR  ***---------------------------------*/ZPBarDialogItem::ZPBarDialogItem( ZDialog* aDialog, const short item )	: ZDialogItem( aDialog, item ){ 	classID = CLASS_ZPBarDialogItem; 	 	iType = kCustomDialogItemType; 	macItemHandle = NULL;	SetRect( &pRect, 0, 0, 0, 0 );	value = 0;	maxLim = 100;	stripesPat = NULL;	displayMode = kProportionalProgress;	forePatID = kStdBarPattern;	backPatID = kStdBackPattern;	stripesPatID = kStdStripedPattern;}/*--------------------------------***  CONSTRUCTOR  ***---------------------------------*/ZPBarDialogItem::ZPBarDialogItem()	: ZDialogItem(){ 	classID = CLASS_ZPBarDialogItem; 	iType = kCustomDialogItemType; 	macItemHandle = NULL;	SetRect( &pRect, 0, 0, 0, 0 );	value = 0;	maxLim = 100;	stripesPat = NULL;	displayMode = kProportionalProgress;	forePatID = kStdBarPattern;	backPatID = kStdBackPattern;	stripesPatID = kStdStripedPattern;}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/ZPBarDialogItem::~ZPBarDialogItem(){	if ( stripesPat )		DisposePixPat( stripesPat );	#if APPEARANCE_MGR_AWARE		if ( gMacInfo.hasAppearanceMgr && macItemHandle)		    DisposeControl((ControlHandle) macItemHandle );    #endif}/*---------------------------------***  INITITEM  ***-----------------------------------*//*	initialise the list from parameters, etc.----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::InitItem( const short paramCount, const long params[] ){	// "magic" parameters to this object are:	// 0: mode, 0 = proportional, 1 = indeterminate	// 1: max value ( 0 = max is 100 )	// 2: background pattern resource ID (0 = use default)	// 3: foreground pattern resource ID ( -"- )	// 4: stripes pattern resource ID	 ( -"- )		displayMode = (ProgType) params[0];		if ( paramCount > 1 )		maxLim = params[1];			if ( paramCount > 2 )		backPatID = params[2];			if ( paramCount > 3 )		forePatID = params[3];			if ( paramCount > 4 )		stripesPatID = params[4];		stripesPat = GetPixPat( stripesPatID );		// if we have the appearance manager, make a progress control	#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		Rect	r = bounds;				OffsetRect( &r, 0, -1 );		InsetRect( &r, -1, 0 );		FailNIL( macItemHandle = (Handle) NewControl( DIALOGWINDOW( GetMacDialog()),											 		  &r,											          NULL,											          TRUE,											          0,											          0,											          r.right - r.left - 2,											          kControlProgressBarProc,											          (long) this ));											          		SetDisplayMode( displayMode );					// pretend we are a control (we are!) to inherit standard disabling behaviour, etc.				iType |= ctrlItem;										}#endif}/*---------------------------------***  DRAWITEM  ***-----------------------------------*//*	update this item----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::DrawItem(){	if ( ! visible )		return;#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )		Draw1Control((ControlHandle) macItemHandle );	else	{#endif	DrawStdFrame( &bounds );	DrawEmptyBar();	UpdateBar();#if APPEARANCE_MGR_AWARE	}#endif}/*---------------------------------***  SETVALUE  ***-----------------------------------*//*	override to update the bar length, or to cycle and redraw the stripey bar----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::SetValue( const long aValue ){	Rect			r = bounds, barBox;	short			barLength;		if ( displayMode == kIndeterminateProgress )	{	#if APPEARANCE_MGR_AWARE		if ( gMacInfo.hasAppearanceMgr )		{			IdleControls( DIALOGWINDOW( GetMacDialog()));			Draw1Control((ControlHandle) macItemHandle );		}		else		{	#endif		CycleStripe();		UpdateBar();		#if APPEARANCE_MGR_AWARE		}	#endif		}	else	{		value = MIN( maxLim, aValue );				barLength = (short)(((double) value / (double) maxLim) * (long)( r.right - r.left ));					barBox = r;		barBox.right = MIN( barBox.left + barLength, r.right );				// if this is different to the previously calculated bar, repaint it				if (! EqualRect( &pRect, &barBox ))		{			FocusBoss();					#if APPEARANCE_MGR_AWARE			if ( gMacInfo.hasAppearanceMgr )			{				SetControlValue((ControlHandle) macItemHandle, barLength );				pRect = barBox;			}			else			{		#endif							if ( EmptyRect( &pRect ))			{				DrawEmptyBar();				pRect = barBox;			}			if ( barBox.right < pRect.right )				DrawEmptyBar();			pRect = barBox;			UpdateBar();				#if APPEARANCE_MGR_AWARE			}		#endif				}	}}/*------------------------------***  SETDISPLAYMODE  ***--------------------------------*//*	set the mode from proportional to indeterminate, etc.----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::SetDisplayMode( ProgType aMode ){	displayMode = aMode;		SetRect( &pRect, 0, 0, 0, 0 );	InvalItem();	#if APPEARANCE_MGR_AWARE	if ( gMacInfo.hasAppearanceMgr )	{		Boolean	mode = ( displayMode == kIndeterminateProgress );				SetControlData((ControlHandle) macItemHandle,						kControlNoPart,						kControlProgressBarIndeterminateTag,						sizeof( Boolean ),						(Ptr) &mode );	}#endif}/*--------------------------------***  SETBOUNDS  ***-----------------------------------*//*	ensure stale box rect is recalculated----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::SetBounds( Rect* newBounds ){	SetRect( &pRect, 0, 0, 0, 0 );	ZDialogItem::SetBounds( newBounds );		SetValue( value );}/*-------------------------------***  CYCLESTRIPE  ***----------------------------------*//*	modify the colour pattern to animate it----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::CycleStripe(){	if ( stripesPat )		ShiftCPattern( stripesPat );}/*-------------------------------***  DRAWEMPTYBAR  ***---------------------------------*//*	draw the bar background----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::DrawEmptyBar(){	PixPatHandle	backPP;		if ( ! visible )		return;		FailNILRes( backPP = GetPixPat( backPatID ));		FillCRect( &bounds, backPP );	DisposePixPat( backPP );}/*---------------------------------***  UPDATEBAR  ***----------------------------------*//*	draw the bar at the current length----------------------------------------------------------------------------------------*/void	ZPBarDialogItem::UpdateBar(){	if ( ! visible )		return;		if ( displayMode == kIndeterminateProgress )		FillCRect( &bounds, stripesPat );	else	{		PixPatHandle	forePP;			FailNIL( forePP = GetPixPat( forePatID ));			FillCRect( &pRect, forePP );		DisposePixPat( forePP );	}}