/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZDialogItem.h			-- dialog item object**			****			© 1999, Graham Cox****************************************************************************************************/#pragma once#ifndef __ZDIALOGITEM__#define	__ZDIALOGITEM__#include	"ZCommander.h"// flags bitfield used for edit field behaviours:enum{	editFieldSignedInteger		= 2,		// edit field only accepts numbers and - sign	editFieldSignedFloat		= 4,		// as above plus decimal point character	editFieldUnsignedInteger	= 8,		// accepts only numbers but not - sign	editFieldUnsignedFloat		= 16,		// as above plus decimal point character	editFieldHasMinValue		= 32,		// if int field, has an acceptable minimum val	editFieldHasMaxValue		= 64,		// if int field, has an acceptable maximum val	editFieldAlphabeticOnly		= 128,		// only accepts letters, not numbers	editFieldHiddenChars		= 256,		// "password" style field hides input when typing	editFieldCharCountLimit		= 512,		// only x characters may be typed in the field	editFieldCantBeEmpty		= 1024,		// something must be entered to validate	efSignedLimitType			= editFieldSignedInteger + editFieldHasMinValue + editFieldHasMaxValue,	efUnsignedLimitType			= editFieldUnsignedInteger + editFieldHasMinValue + editFieldHasMaxValue};// Password Fields, please note:// To establish a password field, set the flag <editFieldHiddenChars> (256) in your resource. When the// dialog is set up, this triggers the creation of a TextEdit record to hold the characters you type while// the user sees bullet points on the screen.// You use GetValueAsText() to retrieve the true data from a password field. Pasting into such// a field is prevented, and cutting or copying from the field copies the bullet points- you can only get// the true data programmatically, which is how it should be.// used to pass info to modifierstypedef struct{	Boolean legal;	char	key;}keyInfo;		// class info:DEFINECLASSID( ZDialogItem, 'zdgi' );// item class:class	ZDialogItem	: public ZCommander{protected:	short					iType;					// item type flags	short					id;						// id number in dialog	short					groupID;				// group ID number or zero if not in a group	short                   shGroup;                // group ID of auto-switching items	unsigned short			efFilterFlags;			// edit field capability flags	unsigned long			hHistory;				// state history stack	long					maxLim;					// max value	long					minLim;					// min value	long					xType;					// extended type code	Rect					bounds;					// bounds rect	short					font;					// font for item	short					fontSize;				// font size for item	Style					fontStyle;				// font style for item	short                   fontJust;               // font justification for text items	Boolean					enabled;				// item is available for clicks	Boolean					focused;				// item has keyboard focus	Boolean					canTakeFocus;			// item eligible for keyboard focus	Boolean					hilited;				// item is not disabled	Boolean					visible;				// item is visible in window	Boolean					isDefault;				// item maps to return/enter keys	Sizing					fSizing;				// autosizing of item bounds control	Handle					macItemHandle;			// handle to dialog item or other data	TEHandle				pwMirror;				// text edit record for password fields	RGBColor				bkColour;				// background colour of item	RGBColor				fgColour;				// foreground colour of item	public:		ZDialogItem();	ZDialogItem( ZDialog* aBoss, const short anID );	~ZDialogItem();// initialisation		virtual void			InitItem( const short paramCount, const long params[] );// standard commander type stuff	virtual void			Idle();	virtual void			Type( const char theKey, const short modifiers );	virtual void			UpdateMenus();	virtual void			BecomeHandler( Boolean isBecoming );	virtual void            Activate();	virtual void            Deactivate();// appearance		virtual void			Draw();	virtual void			Enable( Boolean useHistory = FALSE );	virtual void			Disable( Boolean useHistory = FALSE );	virtual void			Show();	virtual void			Hide();	virtual void			DoHilightSelection( Boolean hiliteIt );	virtual void			DrawDefaultOutline();// mousing around	virtual void			Click( const Point mouse, const short modifiers );	virtual void			AdjustCursor( const Point mouse, const short modifiers );	virtual Boolean			GetBalloonHelp( const Point mouseIn,											Rect* rectOut,											Point* tipOut,											HMMessageRecord* hm );	virtual Boolean			ClickInSamePlace( const Point a, const Point b ) { return TRUE; };    virtual void            SelfSelect();    // edit menu handling		virtual Boolean			CanPasteType();	virtual void			DoCut();	virtual void			DoCopy();	virtual void			DoPaste();	virtual void			DoClear();	virtual void			DoSelectAll();// setting the value	virtual void			SetValue( const long aValue );	virtual void			SetValue( const int value ) 	{ SetValue((long) value); }	virtual void			SetValue( const short value )	{ SetValue((long) value); }	virtual void			SetValue( const Str255 value );	virtual void			SetValue( const double value );	virtual void			SetValue( const float value )	{ SetValue((double) value); }// getting the value		virtual long			GetValue();	virtual void			GetValueAsText( Str255 aStr );	virtual float			GetValueAsFloat();// limits and checks		virtual void			SetMaximum( const long max );	virtual void			SetMinimum( const long min );	virtual void			GetLimits( long* min, long* max );	virtual Boolean			Validate( Boolean showAlert = FALSE );	virtual Boolean			CheckKey( char* theKey );	// information		inline	Boolean			IsEnabled() { return hilited; };	inline	Boolean			IsVisible() { return visible; };	inline	Boolean			HasKeyboardFocus() { return focused; };	inline	Boolean			CanTakeKeyboardFocus() { return canTakeFocus; };	inline	void			SetCanTakeFocus( Boolean canTake ) { canTakeFocus = canTake; };	inline	Boolean			IsDefaultItem() { return isDefault; };	virtual	void			SetDefaultItem( Boolean is );	inline	short			GetID() { return id; };	inline	short			GetGroupID() { return groupID; };	inline	void			SetGroupID( const short id ) { groupID = id; };	inline	void			SetFilterFlags( const short flags ) { efFilterFlags = flags; };	inline	unsigned short	GetFilterFlags() { return efFilterFlags; };	inline	short			GetType() { return iType; };	inline	void			GetBounds( Rect* aRect ) { *aRect = bounds; };	inline	void			SetXType( long aType ) { xType = aType; };	inline	long			GetXType() { return xType; };	inline	Handle			GetMacItemHandle() { return macItemHandle; };	inline	void			SetMacItemHandle( Handle h ) { macItemHandle = h; };	inline  short           GetSwitchGroup() { return shGroup; };	inline  void            SetSwitchGroup( short aGroup ) { shGroup = aGroup; };		virtual DialogPtr		GetMacDialog();// font and colours		virtual void			SetFontInfo( const short fontID, const short size, const Style style );	virtual void			SetBackColour( RGBColor* aColour );	virtual void			SetForeColour( RGBColor* aColour );	virtual void            SetFontAlignment( short just ) { fontJust = just; };	// titling		virtual void			SetTitle( Str255 aTitle );	virtual void			GetTitle( Str255 aTitle );		virtual void			GetDebugInfoString( Str255 s );	virtual void			ReportFields();	// item sizing	virtual void			SetBounds( Rect* newBounds );	virtual void			ParentResized( Rect* oldParentBounds, Rect* newParentBounds );	virtual void			SetAutoSizing( Sizing sizeOptions );// drag + drop:	virtual void			TrackDragInItem( DragReference theDrag, Point localMouse ) {};	virtual Boolean			AcceptsFlavour( const OSType aFlavour ) { return FALSE; };	virtual void			DragHilite( Boolean state, DragReference theDrag );protected:// private stuff	virtual void			PrepareForDrawing();	virtual Boolean			PopStateHistory();	virtual void			PushStateHistory( Boolean aState );		virtual void			SubstituteParamText( Str255 aString );	virtual void			DrawStdFrame( Rect* frame );	virtual void			DrawFocusBorder( Boolean bState, Boolean forceIt = FALSE );	virtual void			ValidationAlert( const Boolean showAlert, const short reason );// drawing methods for standard item types	virtual void			DrawItem();	virtual void			DrawUserItem();	virtual void			DrawPictureItem();	virtual void			DrawIconItem();	virtual void			DrawControlItem();	virtual void			DrawTextItem();	// manipulating text as fields are selected:    virtual void            SetUpTextEdit();		void					ValidItem();	void					InvalItem();	void					FocusBoss();};enum{	kCustomDialogItemType 	= 0x8000,	kNonGroupFrameUserItem 	= 0x4000,	kStopIconChecksum 		= 0x000005AA,	kNoteIconChecksum 		= 0xFFFFF9AD,	kCautionIconChecksum 	= 0xFFFFFDC6};enum{	kModifierDialogItemValidate	= 'vldi',	kModifierDialogItemCheckKey	= 'ckdi'	};// string indices for validation alert:#define		kEditFieldValidationStringsID		128#define		kEditFieldIsGreaterThan				12#define		kEditFieldIsLessThan				13#define		kEditFieldIsBetween					14#define		kEditFieldAnd						15#define		kFieldEmptyAlertID					139// reason codes for ValidationAlertenum{	kEditFieldOutOfRange		= 1,	kEditFieldIsEmpty};#endif