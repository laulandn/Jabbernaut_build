/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZDialog.h			-- a dialog box**			****			© 1996, Graham Cox****************************************************************************************************/#pragma once#ifndef __ZDIALOG__#define	__ZDIALOG__#ifndef __ZWINDOW__#include	"ZWindow.h"#endif#include	"ZObjectArray.h"#include	"MZDialogTypes.h"class	ZDialogItem;// simple helper object to create custom dialog items:class	ZDialogItemMaker : public ZObject{public:	ZDialogItemMaker() : ZObject() {};		virtual ZDialogItem* MakeDialogItem( ZDialog* owner, short id, OSType magicType ) = 0;};// set up streaming stuff:DEFINECLASSID( ZDialog, 'zdlg' );typedef ZObjectList		ZDialogItemList;typedef ZObjectList		ZDItemMakerList;// class definitionclass	ZDialog : public ZWindow{friend class ZDialogItem;private:	DialogPtr			macDialog;		// the Mac dialog ptrprotected:	ZDialogItemList*	itsItems;		// list of item objects in ID order	ZDialogItem*		focusItem;		// current handler	ZDialogItem*		dragTarget;		// current drag target item	ZDItemMakerList*	makers;			// list of attached makers (if any)	Boolean				isModal;		// TRUE if dialog is modal	Boolean				isInline;		// Dialog being handled by RunModal()- caller deletes.	Boolean             drawReverse;    // TRUE if items drawn in reverse order	short               switchItem;     // ID of master item, or 0 if not in use	short				ditlID;			// ID of base DITL resource	short				signalDismiss;	// set to ok or cancel to close dialog safely in response to messages	short				exitItem;		// set to the item that dismissed the dialog, used by RunModal().	short				baseItems;		// count of "native" items in the dialog	short				defaultItem;	// item the return/enter maps to	short				escapeItem;		// item that escape/cmd-. maps to	WindowPlacing		autoPos;		// automatic positioning requested	Rect				oldBounds;		// bounds before resize op	public:		ZDialog( ZCommander* aBoss, const short dialogID );	ZDialog();	virtual ~ZDialog();		// window handling stuff		virtual void			InitZWindow();	virtual void			Draw();	virtual Boolean			Close(const short phase);	virtual void			AdjustCursor(const Point mouse, const short modifiers);	virtual void			Click( const Point mouse, const short modifiers );	virtual void			Activate();	virtual void			Deactivate();	virtual void			Type( const char theKey, const short modifiers );	virtual Boolean			GetBalloonHelp( const Point mouse,												  Rect* br,												  Point* tip,												  HMMessageRecord* hm );												  	virtual void			SetSize( const short width, const short height );	virtual void			Zoom( const short partCode );	virtual WindowPtr	    GetMacWindow();	virtual DialogPtr		GetMacDialog();	// command stuff		virtual void			UpdateMenus();		// std edit commands		virtual void			DoCut();	virtual void			DoCopy();	virtual void			DoPaste();	virtual void			DoClear();		// dialog handling stuff		virtual void			SetUp();	virtual void			ClickItem( const short theItem );	virtual Boolean			CloseDialog();	virtual void			DrawOneItem( const short item );	virtual void			DrawUserItem( const short item, Rect* bounds, Boolean state = TRUE );	virtual void			SetDialogBaseFont( short fontID = 0, short fontSize = 12, short fontStyle = 0 );	virtual void			Place();	virtual Boolean			ClickInSamePlace( const Point a, const Point b );		// convenience functions		virtual void			SetValue( const short item, const long value );	virtual void			SetValue( const short item, const int value ) 	{ SetValue(item, (long) value); }	virtual void			SetValue( const short item, const short value )	{ SetValue(item, (long) value); }	virtual void			SetValue( const short item, const Str255 value );	virtual void			SetValue( const short item, const double value );	virtual void			SetValue( const short item, const float value )	{ SetValue(item, (double) value); }		virtual long			GetValue( const short item );	virtual void			GetValueAsText( const short item, Str255 aStr );	virtual float			GetValueAsFloat( const short item );		virtual void            SetMaximum( const short item, const long aMax );	virtual void            SetMinimum( const short item, const long aMin );		virtual short			GetSelectedItemInGroup( const short groupID );	virtual void			SetItemGroupID( const short item, const short groupID );	virtual short			GetItemGroupID( const short item );		// info about dialog items:		virtual void			GetItemBounds( const short item, Rect* bounds );	virtual short			GetItemType( const short item );	virtual short			FindItem( const Point localMouse );	virtual void			FakeClick( const short item );	virtual Boolean			ValidateFields( Boolean showAlert = TRUE );		// manipulating items' appearance and behaviour:		virtual void			HideItem( const short item );	virtual void			ShowItem( const short item );	virtual void			EnableItem( const short item );	virtual void			DisableItem( const short item );	virtual void			SetItemTitle( const short item, Str255 title );		// changing the user's focus:		virtual void			SelectItem( const short item, Boolean andHilite = TRUE );	virtual void			SelectNextFocus();	virtual void			SelectPreviousFocus();	virtual short			CountFocusableItems();		virtual ZDialogItem*	GetItemObject( const short item );	virtual ZDialogItem*	GetDefaultItemObject() { return GetItemObject( defaultItem ); };	virtual ZCommander*		GetHandler();	// multi-part dialogs:		virtual void			AppendItemsToDialog( const short ditlID, DITLMethod apMethod = overlayDITL );	virtual void			RemoveAppendedItems();	inline	short			GetBaseItemCount() { return baseItems; };		// d+d:		virtual Boolean			AcceptsFlavour( const OSType aFlavour );	virtual void			InWindow( const DragReference theDrag);	inline	Boolean			IsModal() { return isModal; };		// convenience method for implementing "inline" modal dialogs- use with care!		virtual Boolean			RunModal();		// force modal dialog session to end. Very rarely needed or used.		virtual void			DismissModal( const short itemDismiss );		inline	short			GetDITLID() { return ditlID; };	inline	short			GetDLOGID() { return windID; };		virtual void			WindowResized();	virtual void			SetItemSizing( const short item, unsigned char sizing );	virtual void			CheckFocus();		// attaching an item maker:		virtual void			AttachItemMaker( ZDialogItemMaker* aMaker );	virtual void            AttachMakers();		virtual void			ReportFields();	virtual void			GetBackColour( RGBColor* rgb )							{								ZViewEnvironment*	grafEnv = GetEnvironment();								if( grafEnv )									grafEnv->GetBackColour(rgb);								else									rgb->red = rgb->blue = rgb->green = 0xFFFF;							}	protected:	virtual void			MakeMacWindow( const short dialogID );	virtual void			MakeMacWindow( Rect* aRect, Str255 title, Boolean visible = FALSE, short varCode = 0, Boolean hasCloseBox = FALSE, void* userData = NULL );	virtual void			ParseRButtonTitle( Str255 buttonTitle, short* groupID, Boolean* isDefault );	virtual void			HandleRButtonGroupClick( const short item );	virtual void			ClearDITLPlaceHolders( Handle ditl );		// key and paste data filtering methods, used in conjunction with edit field info:		virtual Boolean			PasteDataIsLegal( const short targetItem );		// set up method for edit fields from resources		virtual void			ParseEditFieldInfo( Str255 efText, unsigned short* efFlags, long* min, long* max );	virtual ZDialogItem*	MakeItemObject( const short item, const long magicType = 0 );	virtual void			BuildDialogObjects( short fromItemNo = 1, const short ictbID = 0 );	virtual void			ParseStatText( Str255 sText, OSType* typeParam, short* paramCount, long params[] );	virtual void			ClipOutItemsBelow( const short item );	virtual void			UserInitialise( ZDialogItem* theItem ) {};	virtual	long			DMToMagicType( short dmType );	virtual void			InitItemFromICTB( const short item, ictbHandle ictb, const short ictbIndex );    virtual void            InitItemFromDFTB( const short item, dftbHandle dftb, const short dftbIndex );	virtual void			InitItemSizingFromRes( const short resID );		virtual void            InitAutoSwitching( const short resID );	virtual void            HandleAutoSwitching( const short switchValue );};#endif