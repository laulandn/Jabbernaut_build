/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			MList.h			-- list manager object mix-in**			****			© 1999, Graham Cox****************************************************************************************************/#pragma once#ifndef __MLIST__#define	__MLIST__#include	"MZListTypes.h"#include	<lists.h>class	ZWindow;class	MList;// simple attachment class used to provide simple way to override list drawing without// having to subclass the whole darn thang:class	MListViewer{protected:	MList*		owner;	public:	MListViewer() {};		virtual void	DrawCell( Rect* bounds, Cell theCell, Boolean hilited ) {};	virtual void	HiliteCell( Rect* bounds, Cell theCell, Boolean hilited );		void			SetOwner( MList* anOwner ) { owner = anOwner; };};// class definition:class	MList{protected:	ListHandle		lh;					// list manager handle	ZWindow*		owner;				// owning window	Cell			lastSel;			// last selection	Str15			searchStr;			// for finding items in a list	long			lastKeyTime;		// time last key was typed	short			fThresh;			// reset threshold for typing	Boolean			usingCustomLDEF;	// true if custom LDEF installed	Boolean			keySearchEnable;	// true if typing first few letters selects item	Boolean			autoCellHsize;		// if TRUE, recompute cell horizontal size when list resized	MListViewer*	mlViewer;			// attached viewer object, if there is one		public:		MList();	MList( ZWindow* anOwner );	virtual ~MList();		virtual void	MLInit( Rect* bounds,							Point cellSize,							short initialRows,							short initialColumns,							Boolean vScroll,							Boolean	hScroll,							short procID = 0 );								virtual void	MLInit( Rect* bounds, const short listResID );									virtual void	MLUpdate( Rect* updateRect );	virtual void	MLClick( const Point mouse, const short modifiers );	virtual void	MLActivate();	virtual void	MLDeactivate();	virtual void	MLSetSize( const short width, const short height );	virtual void	MLScroll( const short rows, const short cols );	virtual void	MLEnableDrawing();	virtual void	MLDisableDrawing();	virtual void	MLSetSelectionFlags( const char sFlags );	virtual void    MLSetCellSize( const short width, const short height );		virtual Boolean	MLGetSelection( Cell* aCell );	virtual void	MLSetSelection( Cell aCell, Boolean retainExisting = FALSE );	virtual void	MLScrollToSelection();		virtual void	MLSetCell( Cell theCell, Ptr buf, short length );	virtual void	MLSetCell( Cell theCell, Str255 aString );	virtual void	MLGetCell( Cell theCell, Ptr buf, short* length );	virtual void	MLGetCell( Cell theCell, Str255 aString );		virtual short	MLAppendRow();	virtual short	MLAppendCol();		virtual short	MLAppendRowData( Ptr buf, short length );	virtual short	MLAppendRowData( Str255 aString );	virtual short	MLAppendColData( Ptr buf, short length );	virtual short	MLAppendColData( Str255 aString );	virtual short	MLAppendRowInAlphaOrder( Str255 s, Boolean rejectExactMatches = FALSE );		virtual void	MLSetEmptyList();	virtual void	MLClearCell( Cell theCell );		virtual void	MLDeleteRow( short whichRow );	virtual void	MLDeleteCol( short whichCol );		virtual void	MLNewCellSelected( Cell newCell ) {};	virtual void	MLCellDoubleClicked( Cell theCell ) {};		virtual void	MLPreloadFromResource( const short strListID, Boolean alphaOrder = FALSE );		virtual void	MLGetBounds( Rect* aRect );	virtual void    MLSetBounds( Rect* aRect );	virtual void	MLKeyNavigation( const char theKey, const short modifiers );		virtual void	MLDraw1Cell( Rect* bounds, Cell theCell, Boolean hilited );	virtual void	MLHilite1Cell( Rect* bounds, Cell theCell, Boolean hilited );	virtual Boolean	MLClickLoop() { return TRUE; };		void			MLInstallCallbacks( Boolean customLDEF, Boolean customClikLoop );	ListHandle		MLGetMacList() { return lh; };		void			MLAttachViewer( MListViewer* aViewer );		virtual short	MLCountRows();	virtual short	MLCountCols();		virtual void	ReportFields();	};// "no selection" definition: (cell, -1, -1)const Cell	NO_SELECTION = { -1, -1 };#define		kListTooBigErr		211#endif