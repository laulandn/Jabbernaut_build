a6Some minor cosmetic bugs that annoyingly crept into a5 at the last minute fixed and package re-released as a6.a5OpenSubDialogNew name changed to OpenDialog.ZTextView added to complete the set of views classes that were previously available as custom dialog items.ZViewDialog now implements the AppendMoreItems method (similar to old AppendItemsToDialog) but now this works much better, with the full custom item availability of any dialog in the appended DITL. RemoveAppendedItems and SizeDialogToItems methods also added. Removing items can now automatically shrink the dialog if required. See, I told you ditching the dialog manager was a good move! n.b. auto switching of dialog items via 'sitl' resource not implemented in this version. Due to the more complex parent/child relationships between views in a dialog, this feature may need a rethink.EnableGroup and DisableGroup implemented in dialogs.Dialog item registration reorganised a little better to remove interdependencies between files. A single header, MZCustomViewFunctions.h, contains prototypes for all registerable functions declared extern. Thus your app only needs to include this header and register the ones it needs rather than include all the different headers. The constructor function macros have moved from ZViewDialog.h to MZDialogTypes.h and the actual macro expansions for all dialog items have moved to the files that implement those items.ZArrayBrowser drag and drop support added, building on cut and paste feature. Find data and hence type selection is now partly handled by the viewer, making it more flexible. Added ZFileSpecViewer standard viewer object since this is likely to be a common requirement. This accepts an array of FSSpec records and mimics the Finder list view, including icons, file info, etc. If your app wants to do some file management of its own, this is a very useful class to start with!ZArrayBrowser has two new theme-aware styles.New About Box, and ZApplication default about box method changed to use a dialog rather than an alert. This will make it easier to create a more useful/ elaborate about box without requiring an override to the AboutBox method. Requires a project setting flag to enable a dialog for this, for backward compatibility. The flag is called ABOUT_BOX_IS_DIALOG.Paging key functionality moved into ZScrollView, so works in all scrolling views automatically.More drag and drop features added to ZView, some code moved from ZWindow to ZView. Redundant code removed from ZWindow.Undo mechanism altered to work correctly with views. The "target" object of an undo task is now a ZView, not a ZWindow, though obviously it can still be set as a window. Views can generate undo tasks and pass them to the root window's SetTask method. The Undo task itself is responsible for its actions, so specific tasks may need to be modified to work with the view objects that created them.Basic streaming support added to ZView.Disabled views no longer call their ClickContent method. This is natural and saves you having to check this yourself. Hiding a view also hides its border if it has one (applies only to standard border whose metrics are known - if you have a custom border you may need to do a little extra). ZControlView now better at handling its controlhilite state according to the active and enabled state.ZCalendarView class added for picking dates. This supercedes ZCalendarDialogItem.Demo updated to include most of the new classes and features.a4Dialogs! New class, ZViewDialog, replaces functionality of ZDialog. This builds views for its items and operates accordingly. Additional views classes complete the required suite of views to cover all of the existing ZDialog functionality, with the exception of ZTextView, which is still forthcoming.This is the one that hard testing and feedback is needed on, folks - there are a few features to come but the architecture is there. If this doesn't work, we'd better find out sooner rather than later! This is still not feature complete, hence still alpha, and some names and functionality may yet be changed.Dialog features still to come: Appending and removing items on the fly, and auto switching items (e.g. multi panel).ZScrollAwareView handles page up, page down and home keysZCommander provides new convenience method to create dialogs - OpenSubDialogNew().Demo includes a couple of new dialogs and all non-views based code has been removed.a3Fixed important bug of confusion between view and commander chain hierarchy. While a view hierarchy can be part of the command chain, the view "chain" stops at the root window, whereas the command chain can continue to other windows and the application.Added class ZEditFieldView, ZTextBoxView, ZIconView, ZPictureView. These share a common view class ZItemView, which provides a common API for dialog-like items. These views can nevertheless be used in any window or other view, but will be the basis of the new dialog class. ZControlView also inherits from this now.Added class ZPStrArray. This works like ZArray but is optimised for storing pascal strings without the memory wastage that ZArray will cause. Can be used with ZArrayBrowser.ZWindow now supports the generic ability to use the tab key to move among view items that can become the handler for the window, much like a dialog. In fact the new dialog will inherit this ability, but having the behaviour in ZWindow makes MacZoop very much more flexible in terms of building user interfaces.More features in ZArrayBrowser. It supports cut and paste and also auto selection by typing the first few letters of an item. Both of these are optional.a2Many more enhancements and fixes to ZView , ZScrollView, etc. ZView now has a number of additional control flags and methods to get and set them. One ability now is that it can draw a "selected view" border on demand. Also, ZWindow and ZView altered together so that views can automatically manage the command chain where a window has multiple views. This is an important consideration but so far the docs have not been updated to deal with this issue.Another fundamental change to ZView is that the separate parent and boss parameters have now been replaced by a single <parent> parameter. The parent view is also always the boss. This simplifies the understanding of the view and command hierarchy, since they are now one and the same.a2 Provides a new view class, ZArrayBrowser. Some documentation on this class has been provided but is nowhere near complete. This class is intended to become the view-based replacement for the List Manager in MacZoop applications. It is not a 1:1 replacement for the List Manager however (it's more useful in general!), so make sure you understand the differences if you intend to use it.ZControlView improved, should now work correctly even when controls are subviews of ZArrayBrowser (demo shows one use of this, to add checkboxes to list views), or other deeply embedded views.The demo project has had all dialogs removed for now. This is just to save space and to concentrate feedback on the views. ZDialog is still not yet adapted to use views in this version. Existing dialog code should work unchanged with this version of MacZoop. Some of the deprecated window classes have been removed from the demo "New" menu and replaced with view-based code. Examination of this code (ZShowOffApplication) will be useful if you want to get working with ZArrayBrowser or other views.A new window creation template is also supported for Carbon projects. This is a MacZoop resource, type 'ZWIN'. This template is far easier than the appearance 'wind' resource to create, and ResEdit templates are provided. This allows creation of appearance-savvy windows in Carbon with the full range of attributes.a1This version of MacZoop is an alpha release which introduces ZView for the first time. Views represent a big change in direction for MacZoop, but for this a1 release, most existing classes have not been updated to use views. Only ZWindow and ZDialog have been slightly tweaked so that views work correctly.Existing window and dialog classes should generally work unchanged.Dialog items are not views in this version. Eventually they will be, and code consolidated so that code can be shared between window-based views and dialog items.ZMouseTracker has been updated to work in ZScrollView. It no longer autoscrolls when used in ZScroller.Use ONLY the code supplied in this package while working with this version. Do not mix code from previous versions of MacZoop. This code represents a branch taken from the MacZoop 2.2f2 package. Some changes that are in 2.2f3 and later have generally been made in this version too, but there may be some that have not. Any discrepancies will be resolved by the time of the beta stage.Many classes have been moved to a "deprecated classes" folder. Eventually, these classes will be superceded by view-based equivalents.The demo project has reimplemented the object inspector using views. This will give you a first means of seeing and using views, and the code for the inspector can be examined to see how views are actually used. Developing this interface has, so far, been the main way that views have been designed and tested.The purpose of this release is to obtain feedback and knowledge about views. Do not use this version for "real" development projects. What is here WILL change.The APIs for ZView and its derivatives is subject to change - that's why this is alpha and not beta. The view code is reliable as far as it goes, but I need feedback about features and bugs related to views. The presence of views may cause side effects in other classes - I need to know about these as well, but where the affected class is deprecated, it will not be considered a priority bug.Some projects have been temporarily removed from this package. This is because they haven't been updated to allow for views yet, and to save space. They will be reinstated at the beta stage.A draft chapter for the manual relating to views is supplied as an AppleWorks document.