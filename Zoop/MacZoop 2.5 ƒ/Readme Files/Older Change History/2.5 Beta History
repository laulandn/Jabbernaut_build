b4Added minimal project to projects folder. This includes the smallest set of classes that will actually form a working application. It includes targets for 68K, PPC and Carbon.Added XML project export files, and removed Pro 5 project files. Pro 5 should be able to import the XML project files, though this is untested.Fixed a number of places where a project setting of OFF should be overridden for Carbon targets.ZWindow fixed so that creation of floaters is correct when compiling for Carbon. This forces the use of USE_MODERN_WINDOW_MGR to TRUE, so that for Carbon, only ZWIN resources are supported for creating windows (which was always the intention). The ZWIN resources for the demo and standard resources updated to match the equivalent WIND resources.ZView changed so that the bounds rectangle is considered as being relative to the content rect, not the frame rect. Since normally these two are coincident, it does not make any difference for the majority of views. However, if a view wants to offset its content rect to allow space for other fixed elements, scrolling in such a view works correctly. This change allows scroll views to have e.g. rulers or toolbars added to the view and things still all work properly. The documentation has been changed to explain this important conceptual change.Added ScrollHook method to ZScrollView. This allows subclasses or other objects to get notified whenever the view scrolls, even within the modal scroll loop. This will be useful to synchroniuse other views with a scroller - for example the header buttons for a browser, etc. The default hook sends a message.Factored calls to toolbox ScrollRect in ZScrollView into an overridable protected method, LocalScroll. This will allow special scrolling operations to be easily handled by subclasses of ZScrollView, for example scrolling of non-rectangular areas.Add ZRulerView class, implements general purpose ruler. Uses floating point internally so remains accurate regardless of pixel resolution.Added ZRulerScrollView class. This is a scrollview which incorporates a pair of rulers. It can be used in the same way as any scrollview, and the rulers are handled automatically. Views embedded into this will be unaware of the presence of the rulers - thanks to the changes to ZView mentioned above, it just works. This class was created because a) it was requested and b) it will be used in the RAD tool itself.Added new standard command for toggling ruler visibility. ZRulerScrollView responds to this command if present.Made methods pertaining to setting up views for printing, etc in a window protected rather than private. This is for the benefit of windows that want to handle printing in a special way - they should call SetRootPort and follow the general model of the PrintOnePage method. Values pertaining to version number and stage reverted to macros rather than enums so that code may be made conditional on them.ZTabSelectorView can be set to not draw its tabs. This allows the same basic switchable view scheme to be controlled from another type of control, such as a list or pop-up, for example. Also, the substrate views have been made larger - up to the edge of the selector's main bounds area. This leaves it up to the programmer to arrange the layout as they wish, and eases the use of this view with classes that traditionally fit right up to the edge of a frame (like ZScrollView).ZControlView improved so that it always sets the +useWFont constant in the control, even when built from a CNTL resource. It also ignores the existing state of this flag when using the proc ID to determine control behaviour.Views classes folder split into "standard" and "advanced" views classes. The advanced classes are likely to be a separate download eventually.ZHexEditView brought up to scratch - now works correctly as a view. Old ZHexEditor class moved to deprecated classes folder. The view class does not currently implement the find dialog.Fixed minor bug with clipping region when live dragging in ZScrollView.ZTextBoxView enhanced so that it can optionally draw a placard with the text in it. This allows it to be used as an info panel as well as its usual use. The placard drawing is off by default.ZWindow now sets background erasure for its view off so that it is less prone to cause flicker when resized or otherwise refreshed. (The OS always draws the window background colour anyway - no need to do it twice).ZEditFieldView now correctly sends "typing" message on cut, paste and clear.Added some additional global colours to match various gray values present in the platinum theme.b3Dialog sizing when appending and removing items improved. The SizeDialogToItems() method now takes two parameters so that vertical and horizontal sizing can be calculated separately. AppendMoreItems calls this intelligently based on how the items were appended. When removing items, the original size is put back as recorded when initial call to AppendMoreItems was made.Added ability to add "proxy" listeners to ZComrade. This allows objects to receive messages on behalf of others, providedthe inherited ReceiveMessage for ZComrade is called. This is useful in some cases where you want to get messages, but would otherwise need to subclass an object solely to do so. By adding a proxy listener to the object, you can often avoid this.ZViewDialog enhanced so that it is able to iterate over its items even when they are renumbered with gaps, or the hierarchy is not flat. New method GetNthItem ignores the item numbering and returns them according to their ordinal position in the flattened list of the view hierarchy. CountItems now takes a parameter to perform a shallow or deep count.Added CountViews method to ZView to recursively count the number of views in a hierarchy.Field validation in dialogs now operates using full hierarchy, so fields in tabbed panes (or elsewhere in a deep hierarchy) get validated as usual. Edit field views now send a message to request selection when they fail validation. This allows an object to take action to make the field visible (since it is permitted to validate invisible fields, though not disabled ones).ZTabSelectorView automatically switches panes when a field in a hidden pane fails validation. It does this by becoming a proxy listener of its own substrate views, and listening for the new "select me" message from an edit field.Erroneous zoom box removed from tabbed dialog demo.ZClassRegistry objects now form themselves into a chain, and lookups will proceed along the chain if the called registry can't find the requested class. This is so that if multiple registries are created, they all act as one single registry, which will be convenient for the programmer, allowing additional registries to be "plugged in" as needed, but which will act globally for the app. gClasses, which always exists now, even if streaming disabled, is now set to always point to the start of the chain.Added ResetMaximum method to ZProgress.Field validation alerts are now positioned directly above and centred on the field they refer to. The alerts have been modified to include a small arrow icon which points to the field. This small enhancement actually adds a lot of quality to the feel of the app without much programming effort!ZTabSelectorView drawn using DrawThemeTabPane (doh!) rather than DrawModelessDialogFrame.Rolled in Max's version of ZTextView - looks very good, especially drag and drop handling - thanks, Max!b2Fixed bugs in 68K build of ZDigitalView and ZFileBrowserHeader.Live scrolling in ZScrollView changed to use appearance support for this where available. This allows live scrolling to work much better with proportional scrollbar style enabled, as well as simplifying the code when appearance is available.Updated all older deprecated window classes that override SetSize() to eliminate the extra <redraw> boolean parameter. With views, this parameter is not needed. Window classes of your own will need to make the same change if they are overriding this method.Added some switches to ProjectSettings that allow new dialog support to be turned off. This is useful for maintaining old code that doesn't use the new dialogs at all. For simplicity for new code, this flag is negative - i.e. it has to be present and ON to switch OFF new dialog support. It is called NO_NEW_DIALOGS. By adding this switch to your older projects, you can avoid the need to include ZViewDialog and all of the views that implement standard dialog items.Added MZTrackControl utility, which calls either TrackControl or HandleControlClick according to whether appearance available or not. Used by ZScrollView and ZControlView.Added MZWaitForMouseMove utility which will return when mouse button released or mouse moves from initial position. Useful for detecting drags, this works like WaitMouseMoved, except that it makes no assumptions about coordinate spaces and therefore works in views at any focus level. Called by ZView to detect a drag.Added filtering method to ZFileBrowser to allow only some files to be listed. Default returns TRUE for all types.Enhanced ZFolderScanner to send file type information along with filespec when sending file and folder process messages to its comrades. This is backward compatible with old code because file spec is first item in new structure.Simplified activation and deactivation in views - now ZView posts a refresh if needed so most view classes no longer need to override these methods.Fixed minor bug with window zooming - no longer flashes briefly to incorrect background colour when zooming. In fact, zooming a window with views is much less flickery now since the erasure of the entire window is avoided.Floater activation altered to cope correctly with views. Now if _ALL_FLOATERS_ACTIVE is ON, floating windows will not receive deactivate calls when another floater is selected, but will if a modal dialog is put up. Previously, the window appearance followed the activation state correctly, but deselected floaters still got deactivate messages. This change could have an impact on older code if you are relying on the deactivate message in a floater for some reason.ZClassRegistry will now throw an exception (604) if an attempt is made to register two classes with the same class ID but different names. This is really a reminder to the programmer that unique class IDs for views are essential as we move to a RAD tool implementation. <className> field in registry changed to char* type to allow for more complex classnames in future, and to improve efficiency.ZEventHandler now calls MenuEvent rather than MenuKey when appearance present. This was requested some time ago - finally got around to adding it. 2.2 already had this same change, but 2.5 did not until now.Added ZPatternMenuView to complement ZColourMenuView.Added significant new view class ZTabSelectorView. This is a cool, view-savvy way to implement switching tabbed panels in any window, and containing any views you wish. It is a partial solution to the loss of the dialog panel switching mechanism, but is inherently tab-based. On non-appearance systems, the tabs are emulated directly. Fixed a few minor view bugs in other views to allow them to work when embedded in a tab selector view.Changed tab key handling so that views that are not visible are never returned as the next focus target. This means that selecting the initial focus item by faking a tab key when a dialog or window is hidden no longer works, but ZWindow's Select mechanism now deals with this when the window is first made visible.MakeDialogItems method of ZViewDialog made public and extended. This should not be used directly by apps, but there are circumstances where it will be useful. The tab selector view uses this to allow simple building of tabbed panels in dialogs.Radio button group selection behavour moved back to ZView. This allows any view to embed radio buttons and they just work.Bug fix to ZObjectArray - changed class ID broke streaming.b1First beta. This implies 2.5 is feature complete as such, into the bug fix and polishing phase nowAll views have an associated resource template structure which allows them to be initialised from a resource. The 'View' resource has a variable format but is based upon a logical hierarchy of view inheritance. This is the basis of the RAD tool for setting up views. All views now support creation from such a resource, so basic RAD support is now in place. While it is feasible to create such resources in ResEdit with a suitable template, and instantiate the views "by hand" from such a resource, it is envisaged that ultimately this will be completely automated so that the RAD tool creates the resources, and MacZoop will contain a function for building a complete view hierarchy from a set of these.ZControlView handles pop-up menus better. It honours both the classic (63) CDEF and the new (25) CDEF. The GetValueAsText method now conveniently returns the actual selected menu item string. SetValue with a string sets the pop-up title if it has one.ZFileSpecView moved to a new file, and ZArrayBrowser subclassed for this feature (ZFileBrowser) responding to complaints from users that ZArrayBrowser was becoming overloaded. Also, ZFileBrowserHeader view implements a standard header with switchable column buttons, and will sort an array of FSSpec records according to the four standard columns.RegisterDialogItem parameter changed to void* to avoid compilation errors with CW Pro 6.Magic string parsing improved. Now, the magic part of a static text item can follow on from an ordinary text string. This part of the string is then passed as a value or title to the view object according to type. This makes some kinds of items much easier to program, since no additional resources are needed for the title, etc. This is particularly helpful with ZFrameBoxView and the 'CTRL' magic type. Added simple "SelectItem" method to ZViewDialog so that programmer can preselect any eligible item as the handler. Will do nothing if the item specified is not eligible to be the handler.Most #defines for constants or other fixed values changed to enums.ZArrayBrowser made more robust when dealing with large arrays. It now calculates the maximum number of items it can actually deal with before it runs out of drawing space and only draws that many. It also takes care to avoid the selection region becoming too complex for QuickDraw to handle. This is especially critical in an inactive view with many items, since the outlined region could easily occupy >32K. To improve the appearance of inactive selections, each line in the selection is now separate (excludes the border line) and thus can grow quite complex.Added Carbon target to the demo project. There is no longer a separate Carbon version of the project. This makes it easier to keep Carbon and classic developments in step, and is generally easier to deal with anyway. For some reason this build of Carbon doesn't actually run on OS X - until I can get the tools to work properly I can't find out why.Changed use of international utilities to use Carbon savvy variants.Added view classes ZDigitalView and ZDigitalClock. I needed these classes for a specific project but since they're quite general and useful, I've added them to the MacZoop views canon.