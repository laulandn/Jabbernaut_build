What's new in 2.2?Full Carbon compatibility. Provided your own code plays by the rules, you can now use MacZoop to create Carbon apps, which will run on Mac OS 8.5 (8.1 with appropriate enabler) through to Mac OS X. Your sources should also compile UNCHANGED for System 7.0 through to 9.0, and also for Carbon if you use the provided macros and functions to hide the implementation details of the two environments from your sources. Some features are NOT available in a Carbon environment. The decision to drop certain features was based on their overall usefulness against the difficulty of implementing them in Carbon. Features no longer supported are:¥ Tear-off menusSome new functions were added to smooth the source code commonality between classic and Carbon. These are:MZInvalWindowRect, MZValidWindowRect, MZInvalWindowRgn, MZValidWindowRgn, MZNewPort, MZDisposePortAnimated cursors are now driven using the time manager, not a VBL task.All GrafPort, ControlRecord, WindowRecord and DialogRecord access is now done via macros declared in GrafMacros.h. You own code MUST do the same for Carbon.Projects now pre-include the file "Prefix.h" instead of MacHeaders. This file includes MacHeaders, but allows the various compiler flags for Carbon, etc to be set up.Other new features:ZDialog now supports automatic item switching via a 'sitl' resource. This is a resource private to MacZoop which lists which items should be shown and hidden in response to the value of a nominated "master" control. This code will be very useful for tabbed dialogs (though using a tab control for the master switch is not required- you can use an icon list, pop-up, etc).ZDialogItem now has Activate and Deactivate methods separate from DoHilightSelection. This allows edit fields to behave slightly more correctly than hitherto. ZDialog altered to correctly sequence calls to the item when activating, tabbing, etc.ZScroller header drawing improved and bug fixed when drawing without appearance.ZMenuBar methods LoadMenu and LoadCMNU made public. It's possible to register pop-ups etc via these methods so that you get the usual command extraction/handling from such menus. I may expand this ability in future so that it's better supported- at the moment it's a bit of a hack.ZFileStream no longer opens the file for you when it is created. This is because it doesn't know if you want to read or write to the file (including a possible safe save), so it leaves it up to you to open the file in the appropriate way after the object is created. This WILL affect your code if using file streams.ZoopError is now defined as an OSStatus type. If your code has already been altered to use ZoopError in your catch statements, you need do nothing, but if not, it is very important you alter any such code, because otherwise your exception handling will not work.FINALLY fixed a very long-standing bug in ZBlockFile where FindFreeBlock was doing exactly the wrong thing. You can stop working around this one now Tom! Also finally implemented the CompactMap() method. Also, there is now a default method of saving the map in a file which will vastly increase the utility of this class, since you no longer need to implement your own scheme. However, any existing schemes should continue to work unchanged.New comment style for each method adds better descriptions and paraneter listings. This shouldhelp make new (and existing) features better self-documenting.Added ZHashTable class which provides an efficient way to create symbol tables or any storage for key/value pairs.What's New in 2.1.6?Window snapping! This is cool- it allows windows to gently "snap" to other windows as they are dragged which is a neat way to keep windows tidy. By default this is off, but a slew of additional methods allow you to control this:ZWindow now has a SetSnap() and GetSnap() method to support snapping.ZWindowManager actually implements the snapping via DragWindowOutline. This calls a number of newly factored methods- DragRegion(), DragGrayRgnSnap() and GetMouseSnap(). ZEventManager modified to get snap flags from window to pass to the drag methods. See ZWindowManager.h for a full description of how to use snapping.ZWindowManager also factors the creation of the screen port for dragging to OpenScreenPort(), which your app may also use if need be. This is recommended if you wish to draw directly to the screen- since under Carbon the means of doing this may change, using this method to obtain the port will ease the transition.ZFile enhanced. OpenSafe can now optionally copy the resource fork from the original to the temporary copy as part of the set-up for safe-save. This solves the "lost resource fork" problem that we all know and loathe in the File Manager.ZFile includes a method for doing a complete file copy/duplicate operation- Copy(). Duh!ZFile now tries harder when generating the temp file name during a safe-save to ensure the name is unique. Previously, if it generated a non-unique name, the method would fail. This was a very rare event but would show up occasionally, and completely randomly.Bug fixed in ZDialog with the new 'dftb' support.ZApplication SetFrontSleep and SetBackSleep now take effect immediately rather than wait for the next suspend or resume event.Added Acquire and Release methods to ZObject which allow reference counting by other objects. Release() can optionally dispose the object but only once the ref count is zero (i.e. nothing using the object). This expects the object to be a heap object- do not use with stack objects.Fixed bug in ZWindowManager where sending a newly created window behind all others didn't work properly.All region accessors for ports and windows changed to use new macros/functions that copy the region. This will permit smoother migration to Carbon. It is recommended that you revise all similar code in your applications if you intend to move to Carbon. The old direct accessors will disappear soon. Also, where accessors have been defined in Universal Headers, these are used rather than the GrafMacros, and GrafMacros also call them where possible. Again this all helps smooth the move. (n.b. if you get compiler errors for the direct accessors, go to GrafMacros.h and turn ON the DIRECT_REGION_ACCESSORS switch. These errors will show you where in the code you need to make modifications for Carbon).The old ZComrade methods that took a ZMessage object parameter have been removed. This reduces unnecessary clutter, and makes the messaging based on a single type. If your app was using this technique (which I doubt) then you may need to think again. This change is not gratuitous- it's part of a forward migration to MacZoop 3.0, in which commands and comrade messages will be consolidated and link in with Carbon Events.Likewise, comrade messages and commands now have a declared type. At the moment this is a simple typedef of signed long, so existing code is unaffected. Using the new types in future will mean that whan these eventually become data objects, all will still work without breaking your source code.In a similar way, a new type, ZoopError is defines as the native error type. At present this is just an OSErr, but by adjusting your code to pass around the new type, you'll be ready for the day this becomes a data object. It's also important to reiterate that the error functions in ZErrors should be used rather than calling throw directly, otherwise it will be more work to be compatible with MacZoop 3.xFixes to ZTextWindow (thanks, Max!) to sort out problems with scrolling , etc in certain circumstances.Demo enhanced to demonstrate snapping (floaters to floaters in this case) and the file copy operation.What's new in 2.1.5?OK, so what happened to 2.1.4? Nothing- it doesn't exist. The .5 is there to point up the fact that this release represents quite a bit of change. Existing code should not require any changes however.ZDialog includes support for 'dlgx' and 'dftb' resources to colour the dialog and its items. If present, these are used instead of the 'dctb' and 'ictb' resources.ZDialogItem can now be the target of a drag/drop. ZDialog includes some basic support for this.ZDialogItems that contain text can now accept a left, right or centre justification parameter. This can be set up by the 'dftb' or by programming.The menu hilite when operating command-key equivalents now has a small delay to make the hilite more visible.Added a few more macros to GrafMacros.hUndo architecture completely changed. Now Undo has potentially unlimited levels and is associated with the original window, not with the application. This introduces a new required class, MTaskStack, which is now multiply inherited by ZWindow. For compatibility, the default stack size is 1.Added new standard command- kCmdRedo (#37)ZCPopDialogItem can now pop-up menus containing patterns, colour patterns or gradients (this latter requires UGradient.h, from the paint classes). By default these new features are suppressed for compatibility.New class, ZDiskGWorld, builds on ZGWorld to provide automatic backing store of pixels for the GWorld. This allows bigger images or long term storage of images (e.g. in an Undo task- hint, hint) to occupy far less runtime memory. The backing files are placed in the Temporary Items folder.ZDialog now uses a ZDialogItemMaker object to handle the custom items. This makes the ZDialog code a bit cleaner and unaware of the exact nature of the items it's making, reducing interdependencies between files.ProjectSettings now include flags to selectively turn on and off particular custom dialog item types, thus avoiding the need to include the code for all the items even if your app just needs one.The SetPortBlackWhite utility now clears the BackPat, as per Appearance recommendations.Added DrawSICN utility to ZoopUtilities.What's new in 2.1.3?To ease the transition to Carbon in future, all direct access to GrafPort, WindowRecords, etc, etc. have been moved to a set of macros in GrafMacros.h. Existing code will continue to work, but you're advised to start using the macros where possible so that access to opaque structures under Carbon is isolated to the GrafMacros.h file. While this adds a further level of indirection to these new accessors (which will probably change again to some extent in further MacZoop updates) by isolating the changes to one file it will make it much easier to keep MacZoop working throughout the implementation of Carbon.Added methods to ZFile- GetName(), GetCreationDate(), GetModificationDate().Added Randomise() method to ZArray.Added concept of "user ID" to ZWindow. This is a field that is unused by the framework, but you can use it to store an identifier for the window. You can then locate the window by this ID using the new ZWindowManager method FindWindowByUserID(). This may simplify tracking of multiple windows in some kinds of apps.ZComrade now saves and restores the current port when SendMessage() is called. This prevents a sender from accidentally losing the focus if a receiver responds by drawing. Apps may have inadvertently been relying on this effect- you are advised to check your code.ZDialog supports a helper object- ZDialogItemMaker. This is something that can be attached to a dialog to build an item based on a magic type without having to subclass the whole dialog. The maker object must be attached BEFORE calling the dialog's InitZWindow() method, or it won't be called.Added MakeBitMap() and DisposeBitMap() functions to PixMapUtils. These create classic 1-bit BitMaps with 2-byte aligned rowBytes. Needed for some toolbox calls, such as SeedCFill.ZCommander::OpenSubDialog() now calls the dialog's Place() method, as it should.Fixed bug in ZWindowManager where floaters were not showing inactive state when a modal dialog was up. A recent change caused this bug.ZWindow now separates the "Save Changes" check into a new method, CheckForSave(). This is useful if you only have one window, but want to open different files into it. This change should be transparent to existing code.In addition, the CheckForSave() code now interprets the phase parameter more usefully. Rather than be restricted to the two framework phases kRunning and kQuitting, this parameter can take on other values (for this one method only), where it is interpreted as the index into the STR# resource ID=128 that supplies the phase description- "closing the window", "quitting", etc. This allows you to have other reasons displayed in the Save Changes alert.What's new in 2.1.2?Bug fixes to bug fixes ;-) ClickItem now called once again for pop-up menu controls in dialogs. Radio button change in 2.1.1 broke pop-ups.ZDialog explicitly focused in Activate and Deactivate methods. Changes to the activation in 2.1.1 allowed the port to be incorrect for these events in certain circumstances.Added OpenNew() method to ZWindow. This allows a window to take action when it was created from the application's New command rather than the Open command. Default method only sets the macFType member to the default type for the app.What's new in 2.1.1?2.1.1 is a bug-fix release. It also adds a number of minor convenience features. The main changes are:Problem with enabling and disabling of edit fields in dialogs fixed where every field is involved. The situation where no item is available to take the focus is now correctly handled.Problem with coloured backgrounds other than grey or white in edit fields fixed.Problem with correct sequencing of activation and deactivation events sent to dialogs that are floating fixed. In addition, dialogs are now aware of whether they float and the state of the _ALL_FLOATERS_ACTIVE directive, which modifies the activation behaviour such that dialog items are no longer disabled when they are not in the frontmost window.Clicks on already selected radio buttons no longer report to ClickItem(), nor broadcast a message. This should simplify code that enables or disables items according to radio button state. Application code that relied on the earlier behaviour will no longer work.Added convenience methods to ZDialog to allow items to have group ID set programmatically. Also added CheckFocus() method for dealing with re-establishing focus when entire dialog re-enabled. Application code can call this if necessary, but is called in most usual situations anyway.ZGWorld now allows a depth parameter when creating a GWorld from an existing PicHandle.Added SetOpColour method to ZGWorld to make it easier to set up blending and other special effects.ZCommander and ZComrade no longer stream anything by default. This may have major impact on application code and invalidate streamed files. However, the benefit is that the object tree that is streamed is much more predictable and within the control of the programmer. The downside is that the command chain and comrade relationship between streamed objects must be explicitly re-established after reading the set of objects from the stream.GetRandom() can now optionally use the third-party URandomLib library to obtain random numbers where better randomness is critical. A new project setting directive has been added to control this. URandomLib is not supplied.MList has been improved- you can now attach a new MListViewer object to an existing list. This allows the actual content of the list cells to be handled without having to subclass the whole list or ZListDialogItem. This makes it much easier to create custom list views in dialogs etc. All older code for doing this will still work as normal however. To take advantage of this, simply subclass MListViewer to implement the cell drawing code, then pass it to the list in question using the new MLAttachViewer() method.MList also extends the LIST template resource so that the cellwidth and height can be specified. An error in the construction of the LIST template was also rectified. Neither of these changes should affect existing code or resources. The ability to specify the cell width and height via the LIST resource is very convenient, especially in conjunction with the new viewer mechanism.Added GetName() method to ZFile, returns just the file name.What's new in MacZoop 2.1?MacZoop 2.1 extends the features of MacZoop 2.0 and addresses a number of issues and requests from users. Code written for MacZoop 2.0 should compile with no changes when using the 2.1 sources. This is not such a huge change as MacZoop 2.0, as its '.1' release version should indicate.Main changesZDialog enhanced even more. There are two new item types- ZScrollerDialogItem and ZGWorldDialogItem.Dialog Items are resizeable, and will resize automatically if the parent dialog is resized. This can be set up via resources and requires no coding.Window, Dialog and Dialog Item sizing controlled by new resource types ('WLIM", 'DLIM' and 'ILIM').More appearance support. Dialogs and Dialog items are now fully Appearance savvy.Edit field enhanced, can now limit number of characters entered. Also, fixes to password handling when manipulating the field with the mouse.ZApplication has new methods for getting process information, and setting the sleep time programmatically.Built-in object chaining to support debugging and inspectors, etc.ZFile now uses HGetVol instead of GetVol, and in addition allows permissions to be set for both data and resource fork opening.ZModifier class can attach to ZCommanders. This is equivalent to Powerplant's "attachments" classes.More utility functions.Numerous minor bug fixes.What's new in MacZoop 2.0?MacZoop 2.0 is a major new release of this popular C++ framework for Macintosh. While code written for earlier 1.x.x versions of MacZoop will work with varying degrees of compatibility, the programmer should expect to have to make some changes. Whilst considerable effort was put in to keep the source code as compatible as possible, inevitably a major update like this (which involves a number of architectural improvements) will require some changes. In many cases it will be possible to simplify 1.x.x sources and use MacZoop 2.0 features instead.Summary of main changesThe old classes ZAdvancedDialog and ZAMDialog are obsolete and no longer supplied. The functionality of these classes is now an integral part of a much-improved ZDialog class.A new ZDialogItem class (plus derivatives) manages individual dialog items, both standard and custom items.Custom items are fully supported, with an enhanced structure for parameterised items. This is fully backward compatible with ZAdvancedDialog. New custom items added, such as a progress bar item (PBAR).There is now much greater support for appearance throughout MacZoop.Floating dialogs are now supported automatically.ZApplication is simpler yet more powerful. There are more hooks for you to implement custom behaviours.There is a new way to specify and launch your application object- no longer is it necessary to create a new StartUp file for every project.There is a new way to specify your main window type, avoiding the need to subclass ZApplication for simpler application designs.Hundreds of bugs were fixed, making this the most solid and reliable MacZoop ever released. Functionality of numerous high level classes was improved.The code size and memory footprint of a MacZoop application is now smaller than the same app would be with MacZoop 1.x.xBalloon Help is fully supported and very easy to implement with MacZoop 2.0List Manager handling is completely rewritten and code shared between ZLMListWindow and list dialog items. The API has changed, which is one area that may require changes to 1.x.x source code.All compiler warnings have been expunged from the code, no matter how trivial. This should give a greater degree of confidence in the correctness of the sources.ZTimer enhanced to allow an automatic "one-shot" mode.Mac OS 8.5 features, such as proportional scrollbars, are supported.