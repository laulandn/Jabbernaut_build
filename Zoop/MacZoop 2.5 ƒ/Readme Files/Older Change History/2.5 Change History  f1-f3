f3Fixed bug in inspector where stale references to deleted objects still sometimes showed up. Revised column spacing in Object Inspector list viewRemoved auxiliary item info stuff from ZViewDialog for now, since it's not used (will be in the future though). This just saves a little bit of memory for each dialog.Added IsChildView method to ZViewZScrollView now handles the case better where it is asked to AutoScroll by a child view during a drag. It properly unhilites the drag during the scroll, and rehilites it afterwards.ZScrollAwareView now uses its parent content rect to perform drag highlighting.Fixed bug in FindView method of ZView - was not taking into account offset top, left of content rect.Put in place Carbon event stuff to run timers and chores under X. This is untested as yet.Fixed bug in ZWindow where cancelling NavPutFile incorrectly threw an exception.Fixed bug in ZCalendarView where changes due to new theme view stuff caused calendar text style info to be ignored except on a Sunday (:-o bizarre but true!)ZScrollView now allows an inset value to be specified for the scrollbars to allow space for placards, etc. It also draws delimiting lines to mark off the scrollbar areas in case an inset is used.Added simple utility function to ZScrollView - GetAuxiliaryPlacardRect takes the hassle out of calculating the bounds rect of a placard for use with a scroll view.ZWindow no longer draws its views in PerformUpdate if the update region is empty (optimisation). It also no longer bothers to deactivate everything when it is being closed - this just wastes time.Icons, progress bars and text boxes no longer bother to erase their backgrounds (optimisation).Fixed bug where 68k alignment was not being reset after parsing ZEditFieldView's header.Appearance backgrounds for alert boxes now set correctly as distinct from dialog backgrounds.Added flag to ZView to optionally switch on the refresh that used to happen when SetSize was called. Mostly this isn't needed, but there are cases where it might be, so now you can just set this flag using SetRefreshOnResize(). ZScrollView modified to erase its border if this flag is set. n.b. setting this ON may cause unwanted flicker.Fixed memory leak in ZArrayBrowser when used with the icon viewer. The icons were not being disposed, so would leak a number of handles per icon. This is fixed by adding the ZBrowserViewer::PerformArrayCleanUp method to the viewer, which is called at destruction time to perform custom cleanup on the array.Fixed memory leak with Dpos and Wpos resources not being flushed to the file after saving them.ZScrollView no longer calls ClickScroll itself. This didn't usually work anyway because embedded views got the click first. Therefore it's now up to a view to call up to ClickScroll if it wants to, and also to set the cursor appropriately. This is more flexible since you can just call this when needed without worrying about setting up a command key mask in ZScrollView.Dialog messaging improved so that most items will generate a kMsgDialogItemClicked message from the dialog. This involved moving some message constants around and adding extra message calls to ZArrayBrowser and ZCalendarView.Added minor changes and additional header includes so that MPW should compile MacZoop out of the box.Callback functions that are passed to Carbon UPP creators are now const correct. Unfortunately, UH 3.3.2 is not const correct for some QuickDraw UPPs. So that we can compile with either CarbonLib 1.0.4 OR 1.1+, I've added fixed typecasts to all places where this discrepancy arises.Added ability to optionally turn off object linking when debugging. The idea was to allow the inspector to not show objects that are part of the inspector itself, but it currently doesn't work that well. If you open the inspector with the option key down, it disables linking for inspector objects, but some still sneak through and some hyperlinks will be dead because the object they refer to is not linked into the debug list.Added Flip Horizontal and Flip Vertical as standard commands - ZGWorldView now supports these. ZGWorldView updated to call ClickScroll for command-drags. Added ZGWorldView to demo. ZGWorldView now makes a drop-shadow border for itself instead of a "standard" border which looked wrong. Added GetWorldObject method to return the view's GWorld.ZScrollView::ClickScroll updated to deal with possibility of top, left of content rect not being 0,0. ZScrollAwareView::ClickScroll also changed to allow this possibility.f2ZHexEditView now hides the caret when it loses keyboard focus.Fix to bug fix for appearance... TextEdit rects close to edge of QD space no longer overflow and become empty.ZEditFieldView causes less flicker when activated and deactivated because it no longer draws the border twice.Overall flicker of activate and deactivate of views in windows reduced considerably because ZWindow now immediately processes the update after iterating through the views rather than waiting for the next update event. Even Carbon executables don't flicker noticeably any more unless the window is very large and complicated. (on my slow G4 at least). The only way to reduce this further will be to use offscreen buffering - may consider that.ZViewEnvironment now presets grayishTextOr mode if the active parameter passed is false.ZArrayBrowser now uses theme list background for both active and inactive views. In f1 the inactive view adopted the window background.ZViewDialog now draws a modeless dialog frame in suitable dialogs if appearance available.Fixed some minor bugs with new stuff in inspector. (Link views were not being activated correctly).EtchGrayRect utility calls GetGray so that it adopts the correct look on a coloured background. ZFrameBoxView calls this when appearance not present.Fix to PrepareForDrawing so that complete drawing state is established - bug in f1 meant that only partial state was sometimes invoked.ZViewDialog now listens to all views it creates that it is not the immediate parent of. Previously, such items were not generating kMsgDialogItemClicked messages because the dialog wasn't picking up the primary message. It now also ensures that radio button processing is not performed twice in this situation.ZControlView no longer overrides Enable and Disable - the default methods do the job more cleanly.Renamed UglyBugFix files and functions within to BottleneckFix - maybe "ugly" was a bit strong ;-)f1Alpha information removed from this file due to space limitations. Can be found in "2.5 Alpha History" doc.Eliminated flicker when resizing a window by not calling PostRefresh in ZView::SetSize. For some situations, this will create unwanted side effects which may require additional calls to PostRefresh() to deal with. ZScrollView updated to deal with this change.Added DrawSelfBorder method to ZView to provide a convenient way for a view to update its own borders if it needs to. ZEditFieldView & ZScrollView modified to call DrawSelfBorder instead of their own methods to do the same thing, which are now not required and have been removed.ZControlView modified to send more information with kMsgControlCallBack message. msgData is now pointer to ControlCallBackInfo structure which includes part code and value presently. This makes it easier to handle looped control actions, particularly for live controls such as sliders and what-not.Hiding a view now immediately causes its parent to erase the view. This properly hides views even if the parent view is set to not erase its background.Fixed minor hiliting bug in ZArrayBrowser - a deactivation and reactivation no longer incorrectly modifies the stored update region.Fixed bug with hilite activation in ZHexEditView - hilite was drawn in wrong place within view.Added automatic idling mechanism to ZControlView - uses appearance message call to send idle message to control. On non-appearance, does nothing but only appearance controls implement the message anyway. SetAutoIdle turns on automatic idling by installing a timer.Added GetControlPopupMenu method to ZControlView. This is convenient for populating menus dynamically. Don't forget to adjust a control's max value if you do this.Fixed minor bug with command chain management in ZViewDialog - caused hilite problem when RemoveAppendedItems was called.Bugs in Object Inspector fixed where initial info pane shown was incorrectly drawn and spurious output appeared in the upper pane. Also modified inspector classes to deal with view changes made since inspector written. ZObjectInfoView now based on ZScrollAwareView, not ZView. Enhanced inspector to have a third pane which displays the current command chain graphically. Clicking any box in this pane selects the object in the other parts of the inspector.RadioButtonChore function changed to operate on ZItemView object rather than ZControlView. This avoids ZControlView having to be a required class, since ZItemView's code is fully contained in the header. This also allows slightly greater generality of the button selecting code, should this be useful to anybody.Added ability to enable and disable individual tabs in ZTabSelectorView. All tabs enabled by default and whenever tab rects recalculated (beware if changing titles dynamically). Disabled tabs are drawn greyed out and cannot be selected. No special effort is made to prevent you disabling the current tab. Fixed a bug where tabs would sometimes show disabled text.ZCalendarView now abbreviates day names to three letters rather than two.Added SetReturnItem and SetCancelItem methods to ZViewDialog.Fixed bug in ZScrollView when determining when to shift the contents on resize - previously if scrollbar became disabled, content could sometimes be left in the wrong position.Added drop-shadow border class as standard part of ZView. Draws a 1-pixel border plus a 1-pixel "classic" drop shadow. Can be attached as a border to any view.Radically altered the way views set up the grafPort's drawing environment. While this change is mostly transparent to user's code, it was needed to cope correctly with complex appearance themes that may define some types of brush as a colour pattern. All existing views affected by this change have been updated to work correctly. Any code that accesses fFore, fBack , fFont, fFontSize, fStyle will need to be changed - mostly you can just call PrepareForDrawing to set up the port. This involves a new object class, ZViewEnvironment, which is a small helper object that can be attached to a view. It contains font, colour and theme information for setting up the port.ZGrafState modified to use appearance methods where available to save and restore drawing state.ZArrayBrowser made more theme-aware, especially with regard to the sorted column background colour, etc. Note that if a theme implements the list background as a pattern, highlighting doesn't show, Consider this a bug in the theme, since they're not supposed to do this. Platinum and Aqua are fine. I may seek a workaround later anyway, time permitting.Windows and dialogs now always adopt the correct theme background for the theme. If an application is appearance aware, any 'dctb' resource for a dialog is ignored in favour of the theme background. A 'dlgx' resource isn't required. Only if you build a non-appearance app will a 'dctb' be used.Due to a bug in the Appearance Manager, a rather ugly hack has to be made where a set of bottleneck procedures for doing erase operations are installed into every window and dialog. These bottlenecks manipulate SetOrigin in order to keep the Appearance Manager happy when drawing with background pattern themes, such as Aqua. If your own code uses QuickDraw bottlenecks, it may need to be revised in some way. Otherwise this "hack" is transparent to your code.ZControlView also modified so that at draw time, the window thinks the port origin is 0, 0 and the control is drawn normally. This is also needed to workaround the Appearance Manager problems mentioned.Added flag to ZView which controls whether the "standard" border adopts the edit field look (the default) or the list view look. ZArrayBrowser sets this new flag for scrollers it creates. This is needed because the borders can be different in different themes. Standard border now drawn with themes exclusively if available.ZView::SetDefaultItem now virtual - ZControlView overrides this to set up the default status of a control in a more theme-friendly manner. ZView no longer handles the drawing of the default button - the control manager is relied on for this,or ZControlView if not appearance aware. Note that this means that only a button can be the default item, but this is expected anyway.When enabling Stack, Tile and Cycle commands, only visible windows are taken into account.ZWindowManager::CountWindows can now take an optional boolean parameter that only considers visible windows when true.ZViewDialogs can now be resized by a RestoreWindowPosition operation if this feature is enabled.