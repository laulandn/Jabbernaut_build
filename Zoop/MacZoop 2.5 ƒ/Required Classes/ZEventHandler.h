/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZEventHandler.h		-- the event handler object******			© 1996, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZEVENTHANDLER__#define __ZEVENTHANDLER__#include	"MacZoop.h"#include	<AppleEvents.h>class	ZWindow;class	ZCommander;DEFINECLASSID( ZEventHandler, 'zevh' );class	ZEventHandler	: public ZComrade{protected:	short			clicks;				// number of mouse-clicks in a series	EventRecord		lastEvent;			// the event recovered from queue	Boolean			inBackground;		// TRUE if app in background	char			epPPCYokeDown;		// how many loops between WaitNextEvent() on PowerMac?	ZCommander*		fSavedHandler;		// true handler when temorarily switching to floater chain	public:	ZEventHandler();	virtual ~ZEventHandler() {};		virtual void	EstablishCurrentHandler();	virtual void	GetAnEvent( EventRecord* theEvent, const short mask = everyEvent );	virtual void	DispatchAnEvent( EventRecord* theEvent );	virtual void	InstallApplescriptHandlers();	virtual void	InstallAppleEventHandler( const AEEventClass pClass, const AEEventID pID );	virtual void	HandleWindowUpdate( const WindowPtr theWindow );	virtual void	HandleWindowActivate( const WindowPtr theWindow, const Boolean state );		virtual void	ReceiveMessage( ZComrade* aSender, ZoopMessage msg, UntypedPtr msgData );	virtual void	ReportFields();	inline short	GetClicks(){ return clicks;};	inline Boolean	InBackground(){ return inBackground;};	inline void		GetLatestEvent( EventRecord* anEvent ) { *anEvent = lastEvent; };	inline short	GetLatestModifiers() { return lastEvent.modifiers; };	protected:	virtual void	CountClicks(const WindowPtr target, const long clickTicks, const Point globalMouse );	virtual void	HandleMouseEvent( const EventRecord& theEvent );	virtual void	HandleKeyEvent( const char theKey, const Boolean isAutoKey, EventRecord* theEvent );	virtual void	PassIdle();	virtual void	HandleOSEvent( const EventRecord& theEvent);	virtual void	DoBalloons( ZWindow* aWindow, const Point globMouse );		virtual void	SetTemporaryFloatChain( ZCommander* toThis );	virtual void	ClearTemporaryFloatChain();			static pascal OSErr			AEHandler( const AppleEvent* aeEvt, AppleEvent* reply, long refCon );	static AEEventHandlerUPP	sAEUPP;};extern		short			gSleep;extern		ZCommander*		gCurHandler;#if TARGET_API_MAC_CARBON#define		FRONTSLEEP		1#else#define		FRONTSLEEP		( GetCaretTime() >> 1 )#endif#define		BACKSLEEP		( GetCaretTime() << 1 )// number of loops between calls to WaitNextEvent() on PowerPC:enum{	kPowerPCWNEYokeDown		= 16};#endif