/****************************************************************************************************			MacZoop - "the framework for the rest of us"	 ****			ZComrade.cpp	-- an object that can maintain loose links between objects******			© 1996, Graham Cox*****************************************************************************************************/#include	"ZComrade.h"#include	"MacZoop.h"// this is a fudge to get around a limitation of the language- ZComrade requires ZObjectArray// for its lists, but ZObjectArray IS a ZComrade. Thus, since we are not allowed forward/// circular cross-dependencies like this, this struct is used to "pull" the declaration forward// so that everything compiles correctly.class ZComradeList : public ZObjectList{};CLASSCONSTRUCTOR( ZComrade );/*---------------------------------***  CONSTRUCTOR  ***--------------------------------*/ZComrade::ZComrade(){	classID = CLASS_ZComrade;	talkers = listeners = proxyListeners = NULL;}/*---------------------------------***  DESTRUCTOR  ***---------------------------------*/ZComrade::~ZComrade(){	// when we are destroyed, we need to make sure that we remove ourselves	// from any talker's list that we are part of, and make sure that any listeners	// that are listening to us no longer do so.		long		n;	ZComrade*	aComrade;		if ( listeners )	{		n = listeners->CountItems();				do		{			aComrade = (ZComrade*) listeners->GetObject( n );						if( aComrade )				aComrade->RemoveTalker( this );		}		while( --n );				FORGETOBJECT( listeners );	}		if ( talkers )	{		n = talkers->CountItems();				do		{			aComrade = (ZComrade*) talkers->GetObject( n );						if( aComrade )				aComrade->RemoveListener( this );		}		while( --n );			FORGETOBJECT( talkers );	}		if ( proxyListeners )		FORGETOBJECT( proxyListeners );}/*--------------------------------***  SendMessage  ***---------------------------------*//*access:			publicoverrides:		description: 	send messages to all listener objects linked to this oneins: 			<aMessage> the message identifier				<msgData> data sent along with the message, if anyouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZComrade::SendMessage( ZoopMessage aMessage, UntypedPtr msgData ){	// send the message to all of the listeners of this object	long		n;	ZComrade*	aListener;	GrafPtr		curPort;		if( listeners )	{		GetPort( &curPort );				n = listeners->CountItems();				do		{			aListener = (ZComrade*) listeners->GetObject( n );							if( aListener )				aListener->ReceiveMessage( this, aMessage, msgData );		}		while( --n );				SetPort( curPort );		}}/*------------------------------***  ReceiveMessage  ***--------------------------------*//*access:			publicoverrides:		description: 	receive messages from any sender objects linked to this oneins: 			<aSender> object sending the message				<theMessage> the message identifier				<msgData> data sent along with the message, if anyouts: 			nonenotes:			default method does nothing, but will pass message along to any proxy				listeners attached.----------------------------------------------------------------------------------------*/void		ZComrade::ReceiveMessage( ZComrade* aSender, ZoopMessage theMessage, UntypedPtr msgData ){	long		n;	ZComrade*	aListener;	GrafPtr		curPort;		if ( proxyListeners )	{		GetPort( &curPort );				n = proxyListeners->CountItems();				do		{			aListener = (ZComrade*) proxyListeners->GetObject( n );							if ( aListener )				aListener->ReceiveMessage( aSender, theMessage, msgData );		}		while( --n );				SetPort( curPort );		}}/*---------------------------------***  ListenTo  ***----------------------------------*//*access:			public	overrides:description: 	make this comrade listen to messages from the one passedins: 			<aSender> comrade object to listen toouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZComrade::ListenTo( ZComrade* aSender ){	// add this to the sender's list of listeners, and the sender to our list of talkers		FailNILParam( aSender );		// make sure we are not already listening to this one- references must be	// included exactly once		if(( talkers == NULL ) || !talkers->Contains( aSender ))	{		aSender->AddListener( this );		AddTalker( aSender );	}}/*------------------------------***  StopListeningTo  ***-------------------------------*//*access:			public	overrides:description: 	no longer respond to messages from the senderins: 			<aSender> comrade object to no longer respond toouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZComrade::StopListeningTo( ZComrade* aSender ){	// remove this from the sender's list of listeners, and remove it from our list of talkers		FailNILParam( aSender );		// make sure we are really listening to it		if (talkers && talkers->Contains( aSender ))	{		RemoveTalker( aSender );		aSender->RemoveListener( this );	}}/*--------------------------------***  IsAComradeOf  ***--------------------------------*//*access:			public	overrides:description: 	query whether an object is a comrade of this one (talker or listener)ins: 			<another> another comrade object that may or may not be a comrade of this oneouts: 			TRUE if the object is known to this one, else FALSEnotes:			note this does not tell you who is listening to whom.----------------------------------------------------------------------------------------*/Boolean		ZComrade::IsAComradeOf( ZComrade* another ){	Boolean is;		is = ( talkers && talkers->Contains( another )) || ( listeners && listeners->Contains( another ));		return is;}/*------------------------------***  AddProxyListener  ***------------------------------*//*access:			publicoverrides:		description: 	add a proxy listener to this comrade objectins: 			<aProxy> comrade object to add as a proxyouts: 			nonenotes:			A proxy is an object that receives the message on behalf of this one. It				is a more limited connection than a normal comrade link, but useful in				some situations where you need to get a message without subclassing an				object in order to do so. WARNING: this mechanism has no protection				from dangling pointers unlike the usual comrade link. If you know you				are a proxy listener, you must remove yourself before you are deleted.----------------------------------------------------------------------------------------*/void		ZComrade::AddProxyListener( ZComrade* aProxy ){	FailNILParam( aProxy );		if ( proxyListeners == NULL )		FailNIL( proxyListeners = new ZComradeList());	proxyListeners->AppendItem( aProxy );}/*----------------------------***  RemoveProxyListener  ***-----------------------------*//*access:			publicoverrides:		description: 	remove a proxy listener from this comrade objectins: 			<aProxy> comrade object to remove from proxy listouts: 			nonenotes:			it is your responsibility to call this if needed before you are deleted----------------------------------------------------------------------------------------*/void		ZComrade::RemoveProxyListener( ZComrade* aProxy ){	FailNILParam( aProxy );		if ( proxyListeners )	{		if ( proxyListeners->Contains( aProxy ))			proxyListeners->DeleteObject( aProxy );			if ( proxyListeners->CountItems() < 1 )			FORGETOBJECT( proxyListeners );	}}/*---------------------------------***  AddTalker  ***----------------------------------*//*access:			privateoverrides:		description: 	add a talker to the list of talkersins: 			<aTalker> object to add to list of talkersouts: 			nonenotes:			private internal maintenance method----------------------------------------------------------------------------------------*/void		ZComrade::AddTalker( ZComrade* aTalker ){	// add the talker to the list of talkers		if (talkers == NULL)		FailNIL( talkers = new ZComradeList());			talkers->AppendItem( aTalker );}/*-------------------------------***  AddListener  ***----------------------------------*//*access:			privateoverrides:		description: 	add a listener to the list of listenersins: 			<aListener> object to add to list of listenersouts: 			nonenotes:			private internal maintenance method----------------------------------------------------------------------------------------*/void		ZComrade::AddListener( ZComrade* aListener ){	// add the listener to the list of listeners		if (listeners == NULL)		FailNIL( listeners = new ZComradeList());			listeners->AppendItem( aListener );}/*------------------------------***  RemoveTalker  ***----------------------------------*//*access:			privateoverrides:		description: 	remove a talker from the list of talkersins: 			<aTalker> object to removeouts: 			nonenotes:			private internal maintenance method----------------------------------------------------------------------------------------*/void		ZComrade::RemoveTalker( ZComrade* aTalker ){	// remove this talker from the list of talkers		if( talkers )	{		talkers->DeleteObject( aTalker );				if( talkers->CountItems() < 1 )			FORGETOBJECT( talkers );	}}/*------------------------------***  RemoveListener  ***--------------------------------*//*access:			privateoverrides:		description: 	remove a listener from the list of listenersins: 			<aListener> object to removeouts: 			nonenotes:			private internal maintenance method----------------------------------------------------------------------------------------*/void		ZComrade::RemoveListener( ZComrade* aListener ){	// remove this listener from the list of listeners		if( listeners )	{		listeners->DeleteObject( aListener );				if( listeners->CountItems() < 1 )			FORGETOBJECT( listeners );	}}/*-------------------------------***  ReportFields  ***---------------------------------*//*access:			publicoverrides:		description: 	report data memeber info to inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		ZComrade::ReportFields(){	ZObject::ReportFields();		XSHOWFIELD( talkers, ft_objectref );	XSHOWFIELD( listeners, ft_objectref );	XSHOWFIELD( proxyListeners, ft_objectref );}