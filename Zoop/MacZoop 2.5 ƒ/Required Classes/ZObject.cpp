/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZObject.cpp			-- the root object (abstract class)******			© 1998, Graham Cox*****************************************************************************************************/#include	"ZObject.h"#include	"ZObjectArray.cpp"#include	"MacZoop.h"CLASSCONSTRUCTOR( ZObjectList );// statics, globals:long	ZObject::sInstanceSeed = 0;long	ZObject::sObjectRefCount = 0;ZClassRegistry*		gClasses = NULL;/*----------------------------***  CONSTRUCTOR  ***-------------------------------*/ZObject::ZObject(){	classID = CLASS_ZObject;	instanceID = sInstanceSeed++;	refCount = 0;	#if __OBJECT_DEBUG	// link into list. New objects are added to the tail. Note that this is a very	// low overhead- the list is a chain of already existing objects, and occupies	// just 8 bytes + 8 bytes per object in the list. Since the list is self	// organising and doubly linked, it is very, very fast to insert and delete	// items, so the presence of this code should not adversely affect you.		next = prev = NULL;		if ( !sDisableObjectLink )	{		if ( sObjectDebugListTail )		{			sObjectDebugListTail->next = this;			prev = sObjectDebugListTail;		}				sObjectDebugListTail = this;					if ( sObjectDebugListHead == NULL )			sObjectDebugListHead = this;				sObjectRefCount++;				if ( gApplication && ( this != gApplication ))				gApplication->SendMessage( kMsgDebugObjectAdded, this );	}			#endif}/*-----------------------------***  DESTRUCTOR  ***-------------------------------*/ZObject::~ZObject(){#if __OBJECT_DEBUG	// unlink from the list		if ( next && prev )		--sObjectRefCount;		if ( next )		next->prev = prev;			if ( prev )		prev->next = next;			// deal with end points		if ( sObjectDebugListHead == this )		sObjectDebugListHead = next;			if ( sObjectDebugListTail == this )		sObjectDebugListTail = prev;			next = prev = NULL;#endif}/*----------------------------------***  Release  ***-----------------------------------*//*access:			public	overrides:description: 	decrement the retain count of the object, optionally deleting itins: 			<autoDelete> if TRUE, object deleted when retain count is 0outs: 			nonenotes:----------------------------------------------------------------------------------------*/void    ZObject::Release( Boolean autoDelete ){    refCount--;        if ( autoDelete && ( refCount <= 0 ))        FORGETTHIS();}/*--------------------------------***  GetClassName  ***--------------------------------*//*access:			public	overrides:description: 	return the class name of the object as registeredins: 			<aName> receives the object's class nameouts: 			nonenotes:----------------------------------------------------------------------------------------*/#if _MACZOOP_STREAMSvoid	ZObject::GetClassName( Str255 aName ){	gClasses->GetNameOfClass( classID, aName );}#elsevoid	ZObject::GetClassName( Str255 aName ) {}#endif/*--------------------------------***  ReportFields  ***--------------------------------*//*access:			public	overrides:description: 	report data members to the inspectorins: 			noneouts: 			nonenotes:----------------------------------------------------------------------------------------*/void	ZObject::ReportFields(){#if __OBJECT_DEBUG	XSHOWFIELD( refCount, ft_signedlong );	XSHOWFIELD( classID, ft_fourcharcode );	XSHOWFIELD( instanceID, ft_signedlong );	XSHOWFIELD( next, ft_objectref );	XSHOWFIELD( prev, ft_objectref );#endif}#if __OBJECT_DEBUG// static members used for debugging:ZObject*	ZObject::sObjectDebugListHead = NULL;ZObject*	ZObject::sObjectDebugListTail = NULL;Boolean		ZObject::sDisableObjectLink = FALSE;/*-------------------------------***  CountInstances  ***-------------------------------*//*access:			public	overrides:description: 	count number of current objects of a given classins: 			<ofClass> class ID to count, or 0 to count all objectsouts: 			nonenotes:			debugging method only----------------------------------------------------------------------------------------*/long	ZObject::CountInstances( OSType ofClass ){	long		c = 0;	ZObject*	n;		n = sObjectDebugListHead;		while( n )	{		if ( ofClass == kAllClasses ||			 ofClass == n->GetClassRef())			c++;		n = n->next;	}	return c;}/*------------------------------***  GetDebugInfoString  ***----------------------------*//*access:			public	overrides:description: 	return basic debugging infoins: 			<s> receives debugging infoouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZObject::GetDebugInfoString( Str255 s ){	CopyPString( "\p-", s );}/*----------------------------------***  ShowField  ***---------------------------------*//*access:			global	overrides:description: 	report a data memberins: 			<fName> the name of the field				<field> pointer to the actual field				<fieldType> description of field (usually C++ type)				<obj> the object that the field belongs toouts: 			nonenotes:			Use the SHOWFIELD or XSHOWFIELD macros rather than this directly----------------------------------------------------------------------------------------*/void		ShowField( const char* fName, void* field, const short type, char* fieldType, void* obj ){	fieldReport		fReport;		fReport.name 		= (char*) fName;	fReport.field 		= field;	fReport.type 		= type;	fReport.fieldType 	= fieldType;	fReport.theObject	= obj;		gApplication->SendMessage( kMsgDebugObjectFieldReport, &fReport );}extern ZCommander* 		gCurHandler;extern ZTimerQueue*		gTimerQ;extern ZTimerQueue*		gMillisecQ;extern ZClassRegistry*	gClasses;/*--------------------------***  _Globals_::ReportFields  ***---------------------------*//*access:			global	overrides:description: 	report globals as fields of an object. This is a trick to get globals				to show up in the inspector without requiring a special case there.ins: 			noneouts: 			nonenotes:			for debug/inspector use only----------------------------------------------------------------------------------------*/void		_Globals_::ReportFields(){	XSHOWFIELD( gApplication, ft_objectref );	XSHOWFIELD( gWindowManager, ft_objectref );	XSHOWFIELD( gMenuBar, ft_objectref );	XSHOWFIELD( gAppSignature, ft_fourcharcode );	XSHOWFIELD( gMacInfo, ft_notype );	XSHOWFIELD( gUtilRgn, ft_Handle );	XSHOWFIELD( gPrefsFile, ft_objectref );	XSHOWFIELD( gCurHandler, ft_objectref );	XSHOWFIELD( gClipboard, ft_objectref );	XSHOWFIELD( gTimerQ, ft_objectref );	XSHOWFIELD( gMillisecQ, ft_objectref );	XSHOWFIELD( gClasses, ft_objectref );}_Globals_*	gGlobals = new _Globals_();#endif