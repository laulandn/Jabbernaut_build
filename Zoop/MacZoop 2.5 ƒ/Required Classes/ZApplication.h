/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZApplication.h			-- the application object******			© 1996, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZAPPLICATION__#define	__ZAPPLICATION__#ifndef __ZCOMMANDER__#include	"ZCommander.h"#endif#include	<processes.h>class	ZEventHandler;class	ZWindow;class	ZUndoTask;class	ZPrinter;class	ZMenuBar;class	ZChore;class	ZClassRegistry;// for easier adoption of navigation services, the fileTypes handle now incorporates a// header such that it mimics an 'open' resource.#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endiftypedef struct{	OSType	appSignature;	short	reserved;	short	osTypeCount;	OSType	osType[1];}FTypeList, *FTypeListPtr, **FTypeListHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif// app class info:DEFINECLASSID( ZApplication, 'zapp' );// app class definition:class	ZApplication : public ZCommander{	friend class ZEventHandler;	protected:	Boolean			done;				// normally FALSE, if set TRUE, will try to quit	short			phase;				// current phase	short			appResRefNum;		// refnum of application resource file	ZEventHandler*	zEH;				// event handler object	Handle			shortageFund;		// to deal with tight memory, we can release this	FTypeListHdl	itsFileTypes;		// list of filetypes we can open	ZPrinter*		itsPrinter;			// printer object for handling print commands	Boolean			memIsShort;			// flag memory problem	Boolean			userHasSeenAlert;	// TRUE if user has been warned about the memory	Boolean			splashVisible;		// TRUE if start-up splash is displayed	Boolean			separateRedo;		// TRUE if we have a separate redo command	short			msDepth;			// screen depth of main screen	short			fFrontSleep;		// front sleep value	short			fBackSleep;			// background sleep value	short			fDefaultUndos;		// number of undo levels each created window initially gets	ZObjectList*	fChoreList;			// list of "chores" to carry out at idle timepublic:		ZApplication();	virtual ~ZApplication();		// main entry point from main():		static void				DoMacZoopBirth();		// initialisation and clean-up		virtual void			InitMacZoop( const short numMasterBlocks = 8 );	virtual void			StartUp() {};	virtual void			ShutDown() {};	virtual void			ReadPrefs() {};	virtual void			ShowSplash() {};	virtual void			RunFirstTask() {};		// event processing		virtual void			Run();	virtual Boolean			Quit();	virtual void			RequestQuit();	virtual Boolean			MemoryShortage( const Size bytesShort );	virtual void			Process1Event( const short mask = everyEvent );	virtual void			Process1Event( EventRecord* anExternalEvent );	virtual void			ProcessAllEvents();	virtual void			HandleCommand( const ZoopCommand aCmd );	virtual void			HandleCommand( const short menuID, const short itemID );	virtual void			UpdateMenus();	virtual Boolean			GetCurrentEvent( EventRecord* anEvent );	virtual void			HandleAppleEvent(	AEEventClass aeClass, AEEventID aeID,												const AppleEvent* aeEvt, AppleEvent* reply );												virtual void			MouseNotInAnyWindow( const Point globalMouse );	virtual void			HandleMBarHiding( const Point globalPt );	virtual void			WaitApplicationForeground();	virtual void			ProcessHLEvent( const EventRecord& theEvent );	virtual void            ProcessFunctionKey( const UInt8 keyCode );												// status utilities		virtual	short			GetClicks();	virtual	Boolean			InBackground();	virtual void			GetName( Str255 appName );			virtual void			DoSuspend();	virtual void			DoResume();	// error processing		virtual void			HandleError( const ZoopError theErr );		// window construction		virtual ZWindow*		OpenNewWindowType( OSType aType = 0 );	virtual void			CloseAll( Boolean closeFloaters = FALSE );	virtual ZWindow*		GetFrontWindow();	virtual void			AboutBox();	virtual void			DoPreferences() {};	virtual void			ProcessMenuTearOff( const short menuID, const Point tearOffDropLoc ){};		// opening files		virtual Boolean			PickFile( FSSpec* aFile, OSType* fType );	virtual Boolean			PickFile( FSSpec* aFile, OSType* fType, FTypeListHdl fTypesList );	virtual ZWindow*		OpenFile( const FSSpec& aFile, const OSType fType, Boolean isStationery = FALSE );	virtual long			OpenMultiple( FTypeListHdl fTypesList, Boolean allowFolders = FALSE );		// extending the file types		virtual void			AddFileType( const OSType aType );	virtual Boolean			CanOpenFileType( const OSType aType );		// undo task handling		virtual void			UpdateUndo();    virtual void            DoUndo();    virtual void            DoRedo();		// printer handling		virtual void			MakePrinter();	virtual void			DoPageSetup();	virtual void			DoPrint();	inline	ZPrinter*		GetPrinter() { return itsPrinter; };		// other inline accessors		inline	short			GetPhase()						{ return phase;};	inline	FTypeListHdl	GetFileTypeList() 				{ return itsFileTypes; };	inline	Boolean			MemoryCrisis() 					{ return memIsShort; };	inline	Boolean			UserHasSeenMemoryCrisisAlert() 	{ return userHasSeenAlert; };	inline	ZEventHandler*	GetEventHandler() 				{ return zEH; };	inline	short			GetAppRefnum() 					{ return appResRefNum; };		void					SetFrontSleep( const short aSleep );	void					SetBackSleep( const short aSleep );		virtual void			GetDebugInfoString( Str255 s );	virtual void			ReportFields();			// process stuff:		virtual void			GetProcessSerialNumber( ProcessSerialNumber* PSN );	virtual void			GetProcessInfo( ProcessInfoRec* pInfo );	virtual void			GetProcessLocation( short* volume, long* parentDirID );		// chores:		virtual void			AddChore( ZChore* aChore );	virtual void			DoChores();		virtual void			SetDefaultUndoLevels( const short uLevels ){ fDefaultUndos = uLevels; }	virtual short			GetDefaultUndoLevels(){ return fDefaultUndos; }		// registering window types:		static	void			RegisterWindowType( void* windowCreationProc, const OSType aFileType, const short resID = 0 );	protected:	void					InitMacApplication( const short numMasterBlocks );	virtual void			MakeHelpers();	virtual void			MakeClipboard();	virtual Boolean			CheckCanRun();	virtual void			InitMenuBar();	virtual void			CheckLowMemory();	virtual void			RegisterClasses();	virtual long			OpenFiles( const AEDescList* fileList );	virtual long			PrintFiles( const AEDescList* fileList );	virtual void			DoStandardOpen();		virtual ZWindow*		CreateMacZoopWindow( const OSType aType );		virtual ZWindow*		MakeNewWindowType( const OSType aType = 0 );		static ZClassRegistry*	sWindowClassRegistry;	static pascal long 		GrowFunction( Size bytesShort );	static GrowZoneUPP		sGrowZone;};// possible values of "phase"enum{	kInitialising,	kRunning,	kQuitting,	msgApplicationSuspending	= 'susp',	msgApplicationResuming		= 'rsum',	msgMainScreenDepthChanged	= 'msdx'};// various constants:enum{	kDefaultWindowType 			= 0,	kUndoStrIndex				= 5,	kRedoStrIndex				= 6,	kCantUndoStrIndex			= 7,		kCantRedoStrIndex			= 19,	kCantRunAlertID				= 131,	kFatalStartupErrAlertID		= 136,	kModalDialogOnScreenErr		= 137,	kNoPrinterErr               = 138};// modifier (aka "attachments") messages:enum{	kModifierEventDispatch		= 'mevt',	kModifierOpenFile			= 'mopf',	kModifierStartup			= 'mini',	kModifierShutDown			= 'mbye',	kModifierKeyDown			= 'mkey'};// window creation proc type - may be registered with ZApplication to create windows without// subclassingtypedef ZWindow*	(*WindowCreationProc)( ZCommander* aBoss, const short resID, const OSType aFileType = 0 );#endif