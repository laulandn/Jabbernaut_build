/****************************************************************************************************		CursorUtilities.h			- cursor stuff- spinning watch, etc**		26/9/94		©1994, Graham Cox**************************************************************************************************/#pragma once#ifndef __CURSORUTILITIES__#define __CURSORUTILITIES__#include	<Quickdraw.h>#include	<Retrace.h>#include	<Timer.h>// animated cursor record#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endiftypedef struct{	unsigned short	numCursors;	unsigned short	index;	CursHandle		cursors[1];}acur, *acurPtr, **acurHdl;// modified task recordtypedef struct{	VBLTask		theTask;	long		A5;	acurHdl		theCursor;}VBLTaskWithA5, *VBLTaskWithA5Ptr;typedef struct{	TMTask		theTask;	long		A5;	acurHdl		theCursor;}TMTaskWithA5, *TMTaskWithA5Ptr;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif// prototypes#ifdef __cplusplusextern "C"{#endif		acurHdl		InitAnimatedCursor( short resID );	void		DisposeAnimatedCursor( acurHdl cursH );		void		StartCursorAnimation( short period, acurHdl theCursor );	void		StopCursorAnimation();	void		PauseCursorAnimation( short tempFixedCursorID );	void		ResumeCursorAnimation();		void		AnimateCursor( short increment, acurHdl theCursor);	void		LockCursorData( acurHdl theCursor );	void		UnlockCursorData( acurHdl theCursor );	void		SetWatchCursor();	void		SetBeachBallCursor();	void		SetBusyArrowCursor();	short		GetModifiers();	void		AppCursorInit();	void		AppCursorFree();		Boolean		CursorAnimating();	Boolean		CursorAnimationVBLRunning();		void		SetCursorShape( short resID );	void		InvalidateCursor();#ifdef __cplusplus}#endif// constantsenum{	kWatchFrameCount	= 8,	kWatchResID			= 129,	kBeachBallResID		= 128,	kBusyArrowResID		= 130};#endif