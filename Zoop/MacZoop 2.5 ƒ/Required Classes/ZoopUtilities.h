/****************************************************************************************************			MacZoop 2.0 - "the framework for the rest of us"		 ****			ZoopUtilities.h		-- general utilities******			© 1999, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZOOPUTILITIES__#define	__ZOOPUTILITIES__#include	<TextEdit.h>#include	<Controls.h>extern Rect				gZoomFXSourceRect;typedef enum{	ntMinimalAlert = 0,	ntAlertPlaySound = 1,	ntAlertDisplayMessage = 2,	ntAlertDefault = 3}NTAlertFlags;// note that NotifyAlert assumes:enum{	kApplicationIconSuiteID		= 128,	kNotificationSoundID		= 128};// assertion reporting:void		AssertErr( long lineNo, char* srcName, char* reason, long val );// handy basic pascal string utilitiesvoid		CopyPString( const Str255 srcString, Str255 destString );void		ConcatPStrings( Str255 root, const Str255 append );void		CopyPStringTrunc( const Str255 srcString, Str255 destString, const unsigned char ccLim );void		ConcatPStringsTrunc( Str255 root, const Str255 append, const unsigned char ccLim );void		CopyCToPString( const char* cStringIn, Str255 pStringOut );void	    CopyPToCString( const Str255 pStringIn, char* cStringOut );void		GetIndStringFromResource( ResType aRes, const short resID, const short index, Str255 aStr );// standard function to determine if a GrafPort is colour or b/wBoolean		IsColourPort( CGrafPtr aPort );// global func to set current port to black/whitevoid		SetPortBlackWhite();// utility function to set hilite mode for invert opsvoid		SetHiliteMode();// check for drag manager including linkage check:Boolean		MacHasDM();// get pixel depth and bounds rect of main screenshort		GetMainScreenDepth();void	    GetMainScreenSize( Rect* aRect );// Alert posting function that will handle notification if app suspended, Use wherever you would// otherwise use Alert. Default flags give typical behaviour, you can pass others to modify// behaviour.// posting function- use it instead of Alert():	short		NotifyAlert( const short alertID, NTAlertFlags flags = ntAlertDefault );// simple delay function (try to avoid delays since they waste time!).// MZWait will handle events while counting off the ticks, so can be more cooperative than// MZDelay though less accurate due to event latency.void		MZDelay( short ticks );void		MZWait( unsigned short ticks );// functions for setting up the global zoom FX source rect:void		SetGlobalZoomSource( Rect* aGlobalRect );void		SetLocalZoomSource( Rect* aLocalRect );Boolean		EqualMem( void* a, void* b, const unsigned long length );Boolean		EqualHandle( Handle a, Handle b );long		ChecksumHandle( Handle h );void		Scale2Rects( Rect *theRect, const Rect *refRect );void		CentreRects( const Rect* refRect, Rect* theRect );// function to convert real numbers to stringsvoid 		RealToString( const double num, Str255 str, const short decPlaces = 3 );// draw a value in hex notationvoid		DrawLongAsHex( const register long val );// getting maczoop version string:void		MacZoopVersionStr( Str255 aStr );// functions for drawing 3D effect rectangles:void		FrameGrayRect( const Rect* aRect );void		EtchGrayRect( const Rect* aRect );// "marching ants" utils:void		ShiftPattern( Pattern* aPat );void		ShiftCPattern( PixPatHandle aPat );void		AntsRegion( RgnHandle aRgn );// balloon help util:void		BalloonHelpRefresh();Handle		GetDetachedResource( const ResType aType, const short anID );// Q+D Square Root function requres no MathLib:long		SquareRoot( const long n );// convert list of OStypes to FTypeListHandleHandle		NewFileTypesList( const short numTypes, const OSType* types );// random numbers:short 		GetRandom( const short min, const short max );// drawing small icons:void		DrawSICN( const short SICNid, const short index, const Point location );// making ports:CGrafPtr    MZNewPort();void	    MZDisposePort( CGrafPtr aPort );// safe functions for doing invalidation- works on classic and Carbon alikevoid        MZInvalWindowRect( WindowPtr window, const Rect* r );void        MZInvalWindowRgn( WindowPtr window, const RgnHandle rgn );void        MZValidWindowRect( WindowPtr window, const Rect* r );void        MZValidWindowRgn( WindowPtr window, const RgnHandle rgn );// MacZoop TEKey method that honours forward deletevoid		MZTEKey( const char theKey, TEHandle te, const short modifiers = 0 );long		MZTEHeight( TEHandle hTE );Boolean		MZWaitForMouseMove( Point initialMouse );short		MZTrackControl( const ControlHandle theControl, const Point startPt, const short modifiers, ControlActionUPP actionProc = NULL );#endif