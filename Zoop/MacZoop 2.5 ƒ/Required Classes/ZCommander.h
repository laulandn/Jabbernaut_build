/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			ZCommander.h			-- an object for handling commands******			© 1996, Graham Cox*****************************************************************************************************/#pragma once#ifndef __ZCOMMANDER__#define __ZCOMMANDER__#ifndef __ZCOMRADE__#include	"ZComrade.h"#endif#ifndef __ZOBJECTARRAY__#include	"ZObjectArray.h"#endif#include	"ZDefines.h"#include	<balloons.h>class	ZCommander;class 	ZDialog;class	ZModifier;class	ZTimer;class	ZViewDialog;// set up streaming stuff:DEFINECLASSID( ZCommander, 'zcmd' );DEFINECLASSID( ZModifier, 'zmod' );typedef ZObjectList ZCommanderList;typedef ZObjectList	ZModifierList;// used to pass info about typing to modifiers:typedef struct{    unsigned char   theKey;    short           modifiers;}KeyInfo;// class def:class	ZCommander : public ZComrade{	friend class ZWindow;	protected:	ZCommander*		itsBoss;	ZCommanderList*	itsUnderlings;	ZModifierList*	itsModifiers;	public:	ZCommander( ZCommander* aBoss );	ZCommander();	virtual ~ZCommander();	virtual void	HandleCommand( const short menuID, const short itemID);	virtual void	HandleCommand( const ZoopCommand theCommand );	virtual void	UpdateMenus();	virtual void	HandleAppleEvent(	AEEventClass aeClass, AEEventID aeID,										const AppleEvent* aeEvt, AppleEvent* reply );	virtual void	Idle();	virtual void	Type( const char theKey, const short modifiers );	virtual void	SendMessage( ZoopMessage aMessage, UntypedPtr msgData );	virtual void	DoTimer( long timerID ) {};	virtual void	HandleTimer( ZTimer* aTimer );		virtual void	DoSuspend();	virtual void	DoResume();		virtual Boolean	GetBalloonHelp( const Point mouseIn,									Rect* rectOut,									Point* tipOut,									HMMessageRecord* hmOut ) { return FALSE; };		virtual void	DoCut() { DoCopy(); DoClear(); };	virtual void	DoCopy() {};	virtual void	DoPaste() {};	virtual void	DoClear() {};	virtual void	DoSelectAll() {};	virtual Boolean CanPasteType() { return FALSE; };		virtual ZDialog*		OpenSubDialog( const short dlogID );	virtual ZViewDialog*	OpenDialog( const short dlogID );		virtual void	ContextualMenuClick( Point globalMouse ) {};		virtual ZCommander*	GetHandler() { return this; };	inline	ZCommander*	GetBoss(){ return itsBoss; };	inline	ZCommanderList*	GetUnderlings() { return itsUnderlings; };	// modifiers a.k.a. "attachments"	virtual void	AddModifier( ZModifier* aModifier );	virtual void	RemoveModifier( ZModifier* aModifier );	virtual Boolean	ExecuteModifiers( const long modifierMessage, UntypedPtr modData );// command chain utils:		virtual void	SetBoss( ZCommander* aBoss );	virtual void	BecomeHandler( Boolean IsBecoming ) {};	virtual Boolean	IsInDirectCommandChain();		virtual void	ReportFields();	protected:	virtual void	AddUnderling( ZCommander* anUnderling );	virtual void	RemoveUnderling( ZCommander* anUnderling );};// windows and the application are derived from this. It implements a single entity in the// "chain of command". You can subclass this to make any object that can handle commands,// though more usually you will subclass windows.// modifier (aka "attachment" messages:enum{	kModifierHandleCommand		= 'mcmd',	kModifierHandleCmd2			= 'mcd2',	kModifierUpdateMenus		= 'mmnu',	kModifierTyping             = 'mtyp'};// modifier class: (aka "attachments")class	ZModifier : public ZObject{protected:	Boolean		hostExec;	public:	ZModifier() : ZObject()	{ classID = CLASS_ZModifier; hostExec = TRUE; };	virtual ~ZModifier() {};		virtual void	Execute( ZCommander* caller, const long modMessage, UntypedPtr modData ) {};	void			SetHostExecution( Boolean hExec ) { hostExec = hExec; };	Boolean			GetHostExecution() { return hostExec; };};// modifiers are small objects that can be attached to commanders. They are called at well-// defined times to deal with data in particular ways. For example, an event record may be// changed before being dispatched, etc. They are simple, yet powerful.#endif