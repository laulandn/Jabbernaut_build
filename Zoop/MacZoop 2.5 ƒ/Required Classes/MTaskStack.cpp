/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			MTaskStack.cpp			-- mix-in for handling multiple Undo******			© 2000, Graham Cox*****************************************************************************************************/#include	"MTaskStack.h"#include	"MacZoop.h"/*-------------------------------***  CONSTRUCTOR  ***----------------------------------*/MTaskStack::MTaskStack(){	undoStack = redoStack = NULL;	maxTasks = gApplication->GetDefaultUndoLevels();}/*--------------------------------***  DESTRUCTOR  ***----------------------------------*/MTaskStack::~MTaskStack(){	if ( undoStack )	{		undoStack->DisposeAll();		FORGETOBJECT( undoStack );	}		if ( redoStack )	{		redoStack->DisposeAll();		FORGETOBJECT( redoStack );	}}/*-----------------------------------***  DoUndo  ***-----------------------------------*//*access:			public	overrides:description: 	perform the most recent Undo operation storedins: 			noneouts: 			nonenotes:----------------------------------------------------------------------------------------*/void	MTaskStack::DoUndo(){    ZUndoTask*	ut;        if ( undoStack && undoStack->CountItems() > 0 )    {    	ut = (ZUndoTask*) undoStack->GetObject( 1 );    	undoStack->DeleteItem( 1 );    	    	if ( undoStack->CountItems() < 1 )    		FORGETOBJECT( undoStack );    	    	ut->Undo();				if ( redoStack == NULL )			FailNIL( redoStack = new ZObjectList());        redoStack->InsertItem( ut, 1 );    }}/*-----------------------------------***  DoRedo  ***-----------------------------------*//*access:			public	overrides:description: 	perform the most recent Redo operation storedins: 			noneouts: 			nonenotes:----------------------------------------------------------------------------------------*/void	MTaskStack::DoRedo(){    ZUndoTask*	ut;        if ( redoStack && redoStack->CountItems() > 0 )    {    	ut = (ZUndoTask*) redoStack->GetObject( 1 );    	redoStack->DeleteItem( 1 );    	    	if ( redoStack->CountItems() < 1 )    		FORGETOBJECT( redoStack );    	    	ut->Redo();				if ( undoStack == NULL )			FailNIL( undoStack = new ZObjectList());        undoStack->InsertItem( ut, 1 );    }}/*--------------------------------***  AddTaskToUndo  ***-------------------------------*//*access:			public	overrides:description: 	push a new undo task onto the undo stackins: 			<aTask> the task to storeouts: 			nonenotes:----------------------------------------------------------------------------------------*/void	MTaskStack::AddTaskToUndo( ZUndoTask* aTask ){	ZUndoTask*		ut;	long			m;		if ( aTask )	{		if ( undoStack == NULL )			FailNIL( undoStack = new ZObjectList());				undoStack->InsertItem( aTask, 1 );				m = undoStack->CountItems();				if ( m > maxTasks )		{			ut = (ZUndoTask*) undoStack->GetObject( m );			FORGETOBJECT( ut );			undoStack->DeleteItem( m );		}	}	else	{		if ( undoStack )		{			undoStack->DisposeAll();			FORGETOBJECT( undoStack );		}	}		if ( redoStack )	{			redoStack->DisposeAll();		FORGETOBJECT( redoStack );	}}/*------------------------------***  UpdateUndoCommands  ***----------------------------*//*access:			public	overrides:description: 	update the undo-related menu commandsins: 			<singleCmd> TRUE if the app has a combined Undo/Redo command itemouts: 			nonenotes:			called by ZApplication to maintain the menus----------------------------------------------------------------------------------------*/void	MTaskStack::UpdateUndoCommands( Boolean singleCmd ){	// update the undo and redo menu commands according to the stack state. If <singleCmd>	// is TRUE and maxTasks is 1, we only have a single combined Undo/Redo command, other-	// wise we have both commands and set them up accordingly		ZUndoTask*	ut;	Str63		uTaskStr;	Str255		uCmdStr;		// first the Undo:		if ( undoStack && undoStack->CountItems() > 0 )	{		ut = (ZUndoTask*) undoStack->GetObject( 1 );			ut->GetTaskString( uTaskStr );		GetIndString( uCmdStr, kMiscStrListID, kUndoStrIndex );		ConcatPStrings( uCmdStr, uTaskStr );				gMenuBar->SetCommandText( kCmdUndo, uCmdStr );		gMenuBar->EnableCommand( kCmdUndo );	}	else		gMenuBar->SetCommandText( kCmdUndo, kMiscStrListID, kCantUndoStrIndex );			// now the redo:		if ( redoStack && redoStack->CountItems() > 0 )	{		ut = (ZUndoTask*) redoStack->GetObject( 1 );			ut->GetTaskString( uTaskStr );		GetIndString( uCmdStr, kMiscStrListID, kRedoStrIndex );		ConcatPStrings( uCmdStr, uTaskStr );				if ( singleCmd )		{			gMenuBar->SetCommandText( kCmdUndo, uCmdStr );			gMenuBar->EnableCommand( kCmdUndo );		}		else		{			gMenuBar->SetCommandText( kCmdRedo, uCmdStr );			gMenuBar->EnableCommand( kCmdRedo );		}	}	else	{		if ( ! singleCmd )			gMenuBar->SetCommandText( kCmdRedo, kMiscStrListID, kCantRedoStrIndex );	}}/*-------------------------------***  GetUndoOrRedoTask  ***----------------------------*//*access:			public	overrides:description: 	return the next available taskins: 			noneouts: 			task objectnotes:			returns the top Undo task if there is one, else top Redo task, else NULL----------------------------------------------------------------------------------------*/ZUndoTask*	MTaskStack::GetUndoOrRedoTask(){	// returns the undo task if there is one, otherwise the redo task, or NULL.	// The caller can figure out where the task came from from its IsUndone() method.	ZUndoTask* ut = NULL;		if ( undoStack && undoStack->CountItems() > 0 )		ut = (ZUndoTask*) undoStack->GetObject( 1 );	else	{		if ( redoStack && redoStack->CountItems() > 0 )			ut = (ZUndoTask*) redoStack->GetObject( 1 );	}		return ut;}/*---------------------------------***  ReportFields  ***-------------------------------*//*access:			public	overrides:description: 	report data member info to the inspectorins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void		MTaskStack::ReportFields(){		XSHOWFIELD( undoStack, ft_objectref );	XSHOWFIELD( redoStack, ft_objectref );	XSHOWFIELD( maxTasks, ft_signedshort );}