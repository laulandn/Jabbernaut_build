/****************************************************************************************************			ObjectMacZapp			-- a standard Mac OOP application template****			ZShowOffApplication.cpp	-- the demo application******			© 1996, Graham Cox*****************************************************************************************************/#include	"ZShowOffApplication.h"#include	"MacZoop.h"#include	"ZProgress.h"#include	"ZFolderScanner.h"#include	"ZPrefsFile.h"#include	"ZGraphWindow.h"#include	"ZObjectInspector.h"#include	"ZScrollView.h"#include	"ZArrayBrowser.h"#include	"ZControlView.h"#include	"ZEditFieldView.h"#include	"ZTextBoxView.h"#include	"ZPictureView.h"#include	"ZIconView.h"#include	"ZViewDialog.h"#include	"ZColourMenuView.h"#include	"ZPatternMenuView.h"#include	"ZFrameBoxView.h"#include	"ZProgressBarView.h"#include	"ZGWorldView.h"#include	"ZCalendarView.h"#include	"ZFileBrowser.h"#include	"ZDigitalClock.h"#include	"ZTabSelectorView.h"#include	"ZRulerView.h"#include	"ZTextView.h"#include	"ZRulerScrollView.h"#include	"ZHexEditView.h"#include	"ZJPEGFile.h"#include	"ZAutoEditFieldView.h"#include	"ZComboBoxView.h"#include	"ZSplitView.h"ZObjectInspector*	gInspector = NULL;/*--------------------------------***  CONSTRUCTOR  ***---------------------------------*/ZShowOffApplication::ZShowOffApplication()	: ZApplication(){	classID = 'SOAP';}/*----------------------------------***  StartUp  ***-----------------------------------*//*access:			publicoverrides:		description: 	app is starting up - perform custom initialisationins: 			noneouts: 			nonenotes:			note normally prefs file should be opened by ReadPrefs, but in this				case we do it here for expediency----------------------------------------------------------------------------------------*/void	ZShowOffApplication::StartUp(){	gPrefsFile = new ZPrefsFile();		if ( gPrefsFile )		gPrefsFile->OpenResFork();	gMenuBar->NominateWindowsMenu( kMyDemoWindowsMenuID );	gMenuBar->AppendStdItems( kMyDemoFontsMenuID, kAppendFontNames );		SetDefaultUndoLevels( kMyDemoNumberOfUndoLevels );	OpenNewWindowType( 'SPLT' );}/*---------------------------------***  ShutDown  ***-----------------------------------*//*access:			publicoverrides:		description: 	app is quittingins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::ShutDown(){	if ( gPrefsFile )		FORGETOBJECT( gPrefsFile );}/*-----------------------------***  RegisterClasses  ***--------------------------------*//*access:			publicoverrides:		description: 	register the classes this application needs.ins: 			noneouts: 			nonenotes:			This registers various custom views for use by the demo dialogs----------------------------------------------------------------------------------------*/void	ZShowOffApplication::RegisterClasses(){	ZApplication::RegisterClasses();		ZViewDialog::RegisterDialogItem( CreateArrayBrowserForDialog, kMagicStringListbox, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateIconArrayBrowserForDialog, kMagicStringIconList, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateArrayBrowserFromResource, kMagicStringArrayBrowser, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( DICONSTRUCTORFUNCTION( ZColourMenuView ), kMagicStringColourMenu, kInitItemWithFirstParam );	ZViewDialog::RegisterDialogItem( CreateNewDigitalView, kMagicStringCounterDisplay, kInitItemWithFirstParam );	ZViewDialog::RegisterDialogItem( CreateNewDigitalClock, kMagicStringClockDisplay, kInitItemWithFirstParam );	ZViewDialog::RegisterDialogItem( CreateNewTabSelectorView, kMagicStringTabSelector, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateNewCalendarView, kMagicStringCalendarView, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateNewRulerView, kMagicStringRulerView, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateNewComboBoxView, kMagicStringComboBoxView, kInitItemWithMagicParams );	ZViewDialog::RegisterDialogItem( CreateNewSplitView, kMagicStringSplitView, kInitItemWithMagicParams );}/*----------------------------***  MakeNewWindowType  ***-------------------------------*//*access:			publicoverrides:		description: 	create various kinds of windowins: 			<aType> filetype of window to makeouts: 			the windownotes:			----------------------------------------------------------------------------------------*/ZWindow*	ZShowOffApplication::MakeNewWindowType( OSType aType ){	ZWindow*	zw = NULL;		switch( aType )	{		default:		case CLASS_ZWindow:			FailNIL( zw = new ZWindow( this, kUntitledWindowID ));			break;			case CLASS_ZGraphWindow:			FailNIL( zw = new ZGraphWindow( this, kUntitledWindowID ));			break;	}		if ( zw )	{		ZScrollView*		sv;		ZArrayBrowser*		alv;		ZControlView*		cv;		Rect 				efr;			ZEditFieldView*		efv;		try		{			zw->InitZWindow();						// postprocessing for specific types:						switch ( aType )			{				case 'SPLT':#if 1	zw->SetBackColour( &gVeryLightGray );		FailNIL( sv = new ZScrollView( zw ));		sv->FitToParent();	sv->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));	sv->ChangeSize( 18, 0, 0, 0 );	sv->SetBounds( 832, 624 );		SetRect( &efr, 20, 20, 320, 180 );	ZSplitView* spv = new ZSplitView( sv, &efr, FALSE );//	spv->AttachBorder( new ZViewBorder());	SetRect( &efr, 10, 10, 140, 30 );	ZTextView* textv = new ZTextView( spv->GetTopLeftView(), &efr );//	textv->SetValue("\pViews Rock!");	textv->FitToParent();	textv->ChangeSize( 3, 3, -3, -3 );	textv->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));//	efv = new ZEditFieldView( spv->GetBottomRightView(), &efr );//	efv->SetValue("\pSplit views, too!");//	efv->SetAutoSizing( AUTOSIZE( FIXEDTOP, NONE, FIXEDTOP, FIXEDRIGHT ));{	FailNIL( alv = new ZFileBrowser( spv->GetBottomRightView(), NULL ));	alv->FitToParent();	alv->ChangeSize( 18, 0, 0, 0 );	alv->ChangeSize( 3, 3, -3, -3 );	alv->SetAutoSizing( AUTOSIZE( FIXEDTOP, FIXEDLEFT, FIXEDBOTTOM, FIXEDRIGHT ));	FSSpec	fs;		gApplication->GetProcessLocation( &fs.vRefNum, &fs.parID );	fs.name[0] = 0;		((ZFileBrowser*) alv)->SetBrowseFolder( &fs );		alv->SetDrawColumnBorder( TRUE );	alv->SelectColumn( 1 );		SetRect( &efr, 0, -1, 0, 18 );	ZFileBrowserHeader*	bh = new ZFileBrowserHeader( spv->GetBottomRightView(), &efr, alv );	bh->FitToParentPlusOne( TRUE, FALSE );	bh->SetAutoSizing( AUTOSIZE( NONE, NONE, NONE, FIXEDRIGHT ));	bh->SetTitle( 1, "\pName" );	bh->SetTitle( 2, "\pDate Modified" );	bh->SetTitle( 3, "\pSize" );	bh->SetTitle( 4, "\pKind" );}#endif					break;								case 'LIST':					FailNIL( sv = new ZScrollView( zw ));										sv->FitToParent();					sv->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));					sv->ChangeSize( 18, 0, 0, 0 );					FailNIL( alv = new ZFileBrowser( sv, NULL ));					FSSpec	fs;										gApplication->GetProcessLocation( &fs.vRefNum, &fs.parID );					fs.name[0] = 0;										((ZFileBrowser*) alv)->SetBrowseFolder( &fs );										alv->SetDrawColumnBorder( TRUE );					alv->SelectColumn( 1 );										SetRect( &efr, 0, -1, 0, 18 );					ZFileBrowserHeader*	bh = new ZFileBrowserHeader( zw, &efr, alv );					bh->FitToParentPlusOne( TRUE, FALSE );					bh->SetAutoSizing( AUTOSIZE( NONE, NONE, NONE, FIXEDRIGHT ));					bh->SetTitle( 1, "\pName" );					bh->SetTitle( 2, "\pDate Modified" );					bh->SetTitle( 3, "\pSize" );					bh->SetTitle( 4, "\pKind" );										zw->SelectHandlingView( alv );					zw->SetPrintable( TRUE );					zw->SetPrintView( alv );					break;								case 'SCRL':										zw->SetBackColour( &gVeryLightGray );										FailNIL( sv = new ZScrollView( zw ));										sv->FitToParent();					sv->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));					sv->ChangeSize( 24, 0, 0, 0 );					sv->SetBounds( 832, 624 );										FailNIL( cv = new ZControlView( zw, NULL, kControlWindowHeaderProc ));										cv->FitToParentPlusOne( TRUE, FALSE );					cv->PlaceAt( -1, -1 );					cv->ChangeSize( 0, 0, 25, 0 );					cv->SetAutoSizing( AUTOSIZE( NONE, NONE, NONE, FIXEDRIGHT ));										SetRect( &efr, 50, 50, 220, 70 );//					efv = new ZEditFieldView( sv, &efr );					efv = new ZAutoEditFieldView( sv, &efr );					((ZAutoEditFieldView*)efv)->SetArrayFromSTRList( 143 );										efv->SetValue("\pViews Rock!");					#if 1					OffsetRect( &efr, 0, 40 );					ZComboBoxView* cbv = new ZComboBoxView( sv, &efr );					cbv->SetValue("\pZComboBoxView, too!");					cbv->SetArrayFromSTRList( 143 );					OffsetRect( &efr, 0, 40 );					cbv = new ZComboBoxView( sv, &efr );#else					OffsetRect( &efr, 0, 40 );					efv = new ZEditFieldView( sv, &efr );										OffsetRect( &efr, 0, 40 );					efv = new ZEditFieldView( sv, &efr );#endif					OffsetRect( &efr, 0, 40 );					efv = new ZEditFieldView( sv, &efr );										SetRect( &efr, 300, 20, 400, 170 );					ZArrayBrowser*	ab = CreateNewScrollingArrayBrowser( sv, &efr );										ab->InitStyle( kBrowserStyleSmallList );					ab->SetArrayFromSTRList( 143 );					ab->SetSelectionFlags( kStandardMultiSelect + kAllowCutAndPaste + kAutoTypeSelection + kEnableDragSend + kEnableDragReceive );					ab->TweakHeight();										OffsetRect( &efr, 120, 0 );					ab = CreateNewScrollingArrayBrowser( sv, &efr );										ab->InitStyle( kBrowserStyleSmallList );					ab->SetArrayFromSTRList( 143 );					ab->SetSelectionFlags( kStandardMultiSelect + kAllowCutAndPaste + kAutoTypeSelection + kEnableDragSend + kEnableDragReceive );					ab->TweakHeight();															OffsetRect( &efr, -120, 160 );					ZIconView*	iv = new ZIconView( sv, &efr, 132 );					OffsetRect( &efr, 0, 50 );					efr.bottom = efr.top + 22;										ZPatternMenuView*	mv = new ZPatternMenuView( sv, &efr, kFullColourPattern, 128 );										SetRect( &efr, 20, 20, 250, 220 );					ZFrameBoxView*	fb = new ZFrameBoxView( sv, &efr, 0 );					fb->SetTitle( "\pWelcome to MacZoop 2.5" );					fb->SetFontInfo( kFontIDTimes, 12, italic );					OffsetRect( &efr, 0, 15 );					efr.top = efr.bottom;					efr.bottom = efr.top + kStandardProgressBarHeight;										ZProgressBarView*	pbv = new ZProgressBarView( sv, &efr, 100 );					pbv->SetValue( 33 );										OffsetRect( &efr, 0, 50 );					efr.right += 150;					efr.bottom += 200;										ZScrollView*	tv = new ZScrollView( sv, &efr, TRUE, TRUE );										tv->SetBackColour( &gWhite );					tv->SetStandardBorder( TRUE );					tv->SetScrollbarInset( 60, 0 );					ZHexEditView*	hv = new ZHexEditView( tv, &efr );										Rect	pr;										tv->GetAuxiliaryPlacardRect( &pr );					cv = new ZControlView( sv, &pr, kControlPlacardProc );										// add "chasing arrows" control to prove idling handling:				#if APPEARANCE_MGR_AWARE						OffsetRect( &efr, efr.right - efr.left + 20, 0 );					efr.bottom = efr.top + 16;					efr.right = efr.left + 16;										cv = new ZControlView( sv, &efr, kControlChasingArrowsProc );					cv->SetAutoIdle( TRUE );					cv->SetAcceptsMouseClicks( FALSE );				#endif										SetRect( &efr, 450, 284, 750, 500 );					tv = new ZRulerScrollView( sv, &efr, TRUE, TRUE );					SetRect( &efr, 0, 0, 640, 480 );					ZGWorldView*	gv = new ZGWorldView( tv, &efr, 8, 8 );					tv->SetStandardBorder( TRUE );					CGrafPtr	sp;					GDHandle	sd;										ZGWorld*	dw = gv->GetWorldObject();					dw->SetPortToGW( &sp, &sd );					dw->Lock();					MoveTo( 10, 20 );					DrawString("\pPaste an image here!");					dw->Unlock();					SetGWorld( sp, sd );					break;									case 'TEXT':										break;									case 'JPEG':				case 'JFIF':					CreateJPEGWindow( zw );					break;									default:					break;			}		}		catch( ZoopError err )		{			FORGETOBJECT( zw );			throw err;		}	}	return zw;}/*-------------------------------***  NewFloater  ***----------------------------------*//*access:			publicoverrides:		description: 	create demo floating windowins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::NewFloater(){	ZWindow* fw;		FailNIL( fw = new ZWindow( this, kMyDemoFloaterID ));		try	{		fw->InitZWindow();	    fw->SetSnap( snapFLOATERS + snapTOFLOATERS );	    ZCalendarView*	clk = new ZCalendarView( fw, NULL, FALSE );	    clk->FitToParentPlusOne();	    clk->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));	}	catch( ZoopError err )	{		FORGETOBJECT( fw );				throw err;	}		fw->Select();}/*-------------------------------***  UpdateMenus  ***----------------------------------*//*access:			publicoverrides:		description: 	enable menus for the appins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::UpdateMenus(){	// enable the menus		gMenuBar->EnableCommand( kCmdOpenMoveableModal );	gMenuBar->EnableCommand( kCmdOpenModal );		if ( GetFrontWindow())		gMenuBar->EnableCommand( kCmdOpenModeless );	gMenuBar->EnableCommand( kCmdTestProgress );	gMenuBar->EnableCommand( kCmdTestTabbedDialog );	gMenuBar->EnableCommand( kCmdScanFolder );	gMenuBar->EnableCommand( kCmdNewFloater );		if ( dynamic_cast<ZViewDialog*>( GetFrontWindow()))	{		// just check it's not the text demo dialog - we shouldn't append to that				ZViewDialog*	d = dynamic_cast<ZViewDialog*>( GetFrontWindow());				if ( d->GetDLOGID() != kMyDemoTextWindowDialogID )		{			gMenuBar->EnableCommand( kCmdTestMultiDialog );			gMenuBar->EnableCommand( kCmdRemoveAppendedItems );		}	}		gMenuBar->EnableCommand( kCmdOpenTextWindow );	gMenuBar->EnableCommand( kCmdOpenPlainWindow );	gMenuBar->EnableCommand( kCmdOpenScrollerWindow );	gMenuBar->EnableCommand( kCmdOpenListWindow );	gMenuBar->EnableCommand( kCmdTestNotification );#if __OBJECT_DEBUG	gMenuBar->EnableCommand( kCmdShowInspector );#endif	gMenuBar->EnableCommand( kCmdOpenGraphWindow );	gMenuBar->EnableCommand( kCmdCopyAFile );	ZApplication::UpdateMenus();}/*------------------------------***  HandleCommand  ***---------------------------------*//*access:			publicoverrides:		description: 	handle demo app commandsins: 			<aCmd> command to handleouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::HandleCommand( const ZoopCommand aCmd ){	switch ( aCmd )	{		case kCmdTestProgress:			TestProgress();			break;				case kCmdScanFolder:			TestScan();			break;				case kCmdNewFloater:			NewFloater();			break;					case kCmdOpenPlainWindow:			OpenNewWindowType( CLASS_ZWindow );			break;					case kCmdOpenScrollerWindow:			OpenNewWindowType( 'SCRL' );			break;					case kCmdOpenListWindow:			OpenNewWindowType( 'LIST' );			break;					case kCmdTestNotification:			TestNotification();			break;					case kCmdShowInspector:			OpenInspector();			break;				    case kCmdCopyAFile:	        TestCopyFile();	        break;	        	    case kCmdOpenGraphWindow:	    	OpenNewWindowType( CLASS_ZGraphWindow );	    	break;	    		    case kCmdOpenMoveableModal://	    	OpenDialog( 1300 );	    	OpenDialog( 1500 );	    	break;	    		    case kCmdOpenModeless:	    	if ( GetFrontWindow())	    		GetFrontWindow()->OpenDialog( kMyDemoModelessDialogID );	    	break;	    		    case kCmdOpenModal:	    	OpenDialog( kMyDemoModalDialogID );	    	break;	    		    case kCmdOpenTextWindow:	    	OpenDialog( kMyDemoTextWindowDialogID );	    	break;	    		    case kCmdTestMultiDialog:			// append test items to current dialog			ZViewDialog*	vd;						vd = dynamic_cast<ZViewDialog*>( gWindowManager->GetTopWindow());						if ( vd )				vd->AppendMoreItems( kMyDemoAppendedItemsDITLID, appendDITLBottom );				    	break;	    		    case kCmdTestTabbedDialog:	    	OpenDialog( kMyDemoTabbedDialog );	    	break;	    		    case kCmdRemoveAppendedItems:			vd = dynamic_cast<ZViewDialog*>( gWindowManager->GetTopWindow());						if ( vd )				vd->RemoveAppendedItems( TRUE );	    	break;				}				// ask base class to handle any other menu commnds		ZApplication::HandleCommand( aCmd );}/*-----------------------------***  ReceiveMessage  ***---------------------------------*//*access:			publicoverrides:		description: 	respond to messagesins: 			<aSender> sender of the message				<aMsg> the message				<msgData> auxiliary infoouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::ReceiveMessage( ZComrade* aSender, ZoopMessage aMsg, UntypedPtr msgData ){	if ( aMsg == kMsgWindowClosing && aSender == gInspector )		gInspector = NULL;			// do some dialog item manipulation in modal dialog	// (this code is just an empty shell to show you the typical structure)		if ( aMsg == kMsgDialogItemClicked )	{		short dlogID, itemID;				dlogID = HiWord( *(long*) msgData );		itemID = LoWord( *(long*) msgData );				switch( dlogID )		{			case kMyDemoMoveableModalDialogID:				break;							case kMyDemoModalDialogID:				break;							case kMyDemoModelessDialogID:				break;				default:				break;		}	}}/*-------------------------------***  TestProgress  ***---------------------------------*//*access:			publicoverrides:		description: 	demonstrate progress dialog by performing a lengthy taskins: 			<aCmd> command to handleouts: 			nonenotes:			----------------------------------------------------------------------------------------*/enum{	kLoops	= 10000};void	ZShowOffApplication::TestProgress(){	ZProgress	aPD( this, kStdProgressResID, kLoops, kProportionalProgress, kCancelType);		long		loop;		// wait two seconds before showing the dialog		aPD.SetDelay( kTwoSeconds );	aPD.SetMessage("\pLooping 10,000 times...");		// loop <kLoops> times, updating the progress and	// aborting if the user cancelled		for (loop = 0; loop < kLoops; loop++)		aPD.InformProgress( loop );}/*-------------------------------***  OpenInspector  ***---------------------------------*//*access:			publicoverrides:		description: 	open the inspector windowins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::OpenInspector(){	ZObjectInspector*	zi;		Boolean		option = ( GetModifiers() & optionKey ) == optionKey;		if ( gInspector == NULL )	{#if __OBJECT_DEBUG		if ( option )			sDisableObjectLink = TRUE;#endif				FailNIL( zi = new ZObjectInspector( this, kInspectorWindowID ));				try		{			zi->InitZWindow();			gInspector = zi;		}		catch( ZoopError err )		{		#if __OBJECT_DEBUG			sDisableObjectLink = FALSE;		#endif			FORGETOBJECT( zi );			throw err;		}	}#if __OBJECT_DEBUG	sDisableObjectLink = FALSE;#endif	gInspector->Select();}/*---------------------------------***  TestScan  ***-----------------------------------*//*access:			publicoverrides:		description: 	demonstrate the use of ZFolderScannerins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::TestScan(){	ZFolderScanner	aScanner;						// make object on the stack		if ( aScanner.PickFolder())	{		aScanner.SetSearchDepth( kScanEveryFolderInHierarchy );		aScanner.ScanFolder();						// do the scan	}}/*-----------------------------***  TestNotification  ***------------------------------*//*access:			publicoverrides:		description: 	demonstrate the use of the notification manager to report errorsins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void	ZShowOffApplication::TestNotification(){	// wait 5 seconds, then post an alert. If in the background, this should use the	// notification manager.		(void) Alert( kMyDemoTestNotificationAlertID, NULL );		long	timer = TickCount();		SetWatchCursor();		while( TickCount() < ( timer + 300 ))		gApplication->Process1Event();			FailOSErr( 123 );}/*--------------------------------***  TestCopyFile  ***--------------------------------*//*access:			publicoverrides:		description: 	demonstrate the "copy a file" feature of ZFileins: 			noneouts: 			nonenotes:			----------------------------------------------------------------------------------------*/void     ZShowOffApplication::TestCopyFile(){    FSSpec  fileToCopy;    OSType  fType;        if ( PickFile( &fileToCopy, &fType ))    {        ZFile      src( fileToCopy );        ZFile      dest;		        dest.Copy( &src );    }}/*------------------------------***  CreateJPEGWindow  ***------------------------------*//*access:			publicoverrides:		description: 	construct a window to show JPEG imagesins: 			<aWindow> basic window on which to build itouts: 			nonenotes:			this demonstrates that you can use views + file helpers to create complex				functionality without subclassing the window.----------------------------------------------------------------------------------------*/void	ZShowOffApplication::CreateJPEGWindow( ZWindow* aWindow ){	FailNILParam( aWindow );		ZJPEGHelper*	jHelper;		FailNIL( jHelper = new ZJPEGHelper());	aWindow->AttachFileHelper( jHelper );		// create GWorldView in window to display the image		ZView*		gw;	long		p[6];		// image will be resized to the JPEG file dimension when the file is opened,	// so we can just create a simple minimal GWorld here		p[0] = 3;	// both scrollbars	p[1] = 0;	// no picture	p[2] = 1;	// 1 x 1 image	p[3] = 1;	p[4] = 1;	// 1 bit deep	p[5] = 0;	// use system clut		FailNIL( gw = CreateNewScrollingGWorldView( aWindow, NULL, 6, p ));		gw->SetUserID( 'imag' );		aWindow->SetPrintView( gw );	aWindow->SetPrintable( TRUE );		gw = gw->GetParent();		gw->SetAutoSizing( AUTOSIZE( NONE, NONE, FIXEDBOTTOM, FIXEDRIGHT ));	gw->FitToParent();}#pragma mark -/*-----------------------------***  OpenFileForWindow  ***------------------------------*//*access:			publicoverrides:		description: 	read a JPEG file into the JPEG window we constructed aboveins: 			<aWindow> the window that owns this				<aFile> the file to open				<aFileType> the file typeouts: 			nonenotes:			this demonstrates that you can use views + file helpers to create complex				functionality without subclassing the window.----------------------------------------------------------------------------------------*/void		ZJPEGHelper::OpenFileForWindow( ZWindow* aWindow, const FSSpec* aFile, const OSType aFileType ){	ZJPEGFile		jf( *aFile );	ZGWorldView*	gwView;	ZGWorld*		gw;		FailNIL( gwView = (ZGWorldView*) aWindow->FindChildViewByUserID( 'imag', TRUE ));	FailNIL( gw = gwView->GetWorldObject());		jf.Open();	jf.Read( gw );		gwView->CalcBounds();	aWindow->Zoom( inZoomOut );}