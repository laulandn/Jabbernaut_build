/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			IconListTypes.h	-- types used by icon lists**			****			©2000, Graham Cox****************************************************************************************************/#pragma once#ifndef __ICONLISTTYPES__#define	__ICONLISTTYPES__// icon hiliting styletypedef enum{	iconHiliteBoldBorder = 1,		// draw bold box around icon	iconHiliteDarken = 2,			// "select" the icon	iconHiliteInvertTitle = 4,		// invert the title string	iconHiliteInvertCell = 8,		// invert the entire cell (but not icon)	iconHiliteUseHColour = 16,		// use hilite colour for inversion	iconDefaultHilite = iconHiliteDarken + iconHiliteInvertTitle}IconHilite;// n.b. modes can be combined together if desired. Default is darken + invert title// icon typestypedef enum{	IconPlain	= 128,	IconColour,	IconFamily,	IconSuite,	IconIndexed}IconType;// internal structure kept in list cells:typedef struct{	IconType	iType;				// icon's type (colour, family, etc)	Handle		theIcon;			// handle to the icon if loaded	short		iconID;				// resource ID of the icon	long		userData;			// reserved for your own use if needed	Str31		title;				// icon's title string, if any}IconInfo;// icon types in templateenum{	kBasicIcon					= 0,		// uses 'ICON' resource	kColourIcon					= 1,		// uses 'cicn' resource	kFamilyIcon					= 2,		// uses 'ICN#', 'icl8', etc. resources	kIconListTemplateResType	= 'ICLB'};// template for icon list box resource ('ICLB')#if PRAGMA_ALIGN_SUPPORTED#pragma options align=mac68k#endif// icon info in 'ICLB' resource:typedef struct{	short		resID;				// res ID of icon	short		iconType;			// type of icon (n.b. not necessarily same as IconType above)	short		nameIndex;			// index into STR# for title}IconRec;// 'ICLB' structure:typedef struct{	short		hiliteStyle;		// hiliting method to use (same as above)	short		hSpacing;			// spacing between horizontal icons	short		vSpacing;			// spacing between vertical icons	short		titleListResID;		// res id of STR#Êwith titles	Boolean		addTitles : 1;		// show titles with icons	Boolean		useResName : 1;		// use icon's res name for title	Boolean		useSmallIcons : 1;	// use small icons instead of large	Boolean		unused : 5;			// reserved	short		numIcons;			// number of icons in following array	IconRec		icons[1];			// variable length array of icon defs}IconListBox, *IconListBoxPtr, **IconListBoxHdl;#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif