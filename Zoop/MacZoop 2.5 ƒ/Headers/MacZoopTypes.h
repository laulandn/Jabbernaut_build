/****************************************************************************************************			MacZoop - "the framework for the rest of us"		 ****			MacZoopTypes.h			special data types used in MacZoop***			© 2000, Graham Cox*****************************************************************************************************/#pragma once#ifndef __MACZOOPTYPES__#define	__MACZOOPTYPES__#include <MacTypes.h>// these types are defines as longs for now, for compatibility, but may// change in the future- use these types now and you should be proof against such changestypedef long		ZoopCommand;typedef const long	ZoopMessage;typedef OSStatus    ZoopError;typedef void*       UntypedPtr;// global structure provides some common gestalt resultstypedef struct{	Boolean		supportsColour;					// colour quickdraw available	Boolean		hasDragManager;					// drag manager available	Boolean		hasFPU;							// has a floating-point coprocessor	Boolean		hasAppleEvents;					// has apple events	Boolean		hasAppearanceMgr;				// has the appearance manager	Boolean		hasQuickTime;					// has QuickTime available	Boolean		hasImgCompressionMgr;			// the Image Compression Manager is available	Boolean		hasNavigationServices;			// Nav Services installed & available	Boolean		hasContextualMenus;				// Contextual menu services available	Boolean		hasModernWindowMgr;				// MacOS 8.5 Window Manager or later	Boolean		isRealMacOSX;					// true if running under Mac OS X	short		systemVersion;					// current system version number}tMacInfo;// auto-resizing stuff:enum{	NONE					= 0,	FIXEDLEFT				= 1,	FIXEDTOP				= 1,	FIXEDRIGHT				= 2,	FIXEDBOTTOM 			= 2,	PROPORTIONAL			= 3,	AUTOCENTRE				= 3,	_TOP					= 0,	_LEFT					= 2,	_BOTTOM					= 4,	_RIGHT					= 6,	kStdScrollViewSizing	= 0xA0};#define	AUTOSIZE( t, l, b, r )	(((t) << _TOP) | ((l) << _LEFT) | ((b) << _BOTTOM) | ((r) << _RIGHT))typedef unsigned char	Sizing;//extract fields from autosizing flags with these macros:#define	TOPEDGEMASK		( 3 << _TOP )#define	LEFTEDGEMASK	( 3 << _LEFT )#define	BOTTOMEDGEMASK	( 3 << _BOTTOM )#define	RIGHTEDGEMASK	( 3 << _RIGHT )#define	TOPEDGESIZING( m )		(((m) & TOPEDGEMASK )     >> _TOP )#define	LEFTEDGESIZING( m )		(((m) & LEFTEDGEMASK )    >> _LEFT )#define	BOTTOMEDGESIZING( m )	(((m) & BOTTOMEDGEMASK )  >> _BOTTOM )#define	RIGHTEDGESIZING( m ) 	(((m) & RIGHTEDGEMASK )   >> _RIGHT )// progress bar types:enum{	kProportionalProgress,	kIndeterminateProgress};typedef short ProgType;#endif