=head1 Installing and using GUSIThis section discusses how you can install C<GUSI> on your disk and use it foryour programs. Experience has shown that B<understanding these instructions> isan absolutely B<critical step> in using C<GUSI> and that most of the problems inusing it (apart from those due to inadequacies of C<GUSI> itself) are caused byinstallation and configuration problems.=head2 Installing GUSITo install C<GUSI>, simply unpack the distribution archive and put the C<GUSI> folder somewhere on your disk. If you intend to use C<GUSI> with the C<MPW> shelland/or the C<SC/SCpp> or C<MrC/MrCpp> compilers, run the GUSI_Install.MPWscript from C<MPW>.To use C<GUSI> in a Metrowerks C<CodeWarrior> project=over 4=item *Open your project in the C<CodeWarrior> IDE.=item *Open the C<XXX Settings...> dialog in the C<Edit> menu and select the C<Access Paths> panel.=item *Add the F<include> folder in the F<GUSI> folder at the B<top> of the C<System Paths> section of the panel (Click in C<System Paths> and clickthe C<Add...> button). It is very important that this folder appears B<above> the C<Metrowerks Standard Library>.=item * Turn off recursive searching in this folder by clicking on the column to the leftof the name to make the folders icon disappear. B<This step is crucial>.=item *Turn on the C<Interpret DOS and UNIX Paths> checkbox in the top right of the panel.=item *Add appropriate C<GUSI> libraries to your project, paying careful attention tothe B<link order>.=backTo use C<GUSI> with the Metrowerks compilers for C<MPW>=over 4=item *Add the F<include> folder to the commandline with 	MWCxxx ... -i- -i "{GUSI}include:"	The C<-i-> option should occur B<after> other includes but B<before> other standard include directories listed on the command line.=item *Add the appropriate C<GUSI> libraries to the link.=backTo use C<GUSI> with the standard C<MPW> compilers (C<SC/SCpp> and C<MrC/MrCpp>=over 4=item *Add the F<include> folder to the commandline with 	(SCxx|MrCxx) ... -includes unix -i "{GUSI}include:"	These options should occur B<before> other standard include directories listed on the command line. The C<-includes unix> option tells your compiler that headersin subdirectories will be named by UNIX path name rules.=item *Add the appropriate C<GUSI> libraries to the link.=back=head2 GUSI Header FilesTo use C<GUSI>, include one or more of the following header files in yourprogram:=over 4=item F<arpa/inet.h>Converting between internet addresses and their numeric string representations.=item F<dirent.h>Routines to access all entries in a directory.=item F<errno.h>The error codes returned by GUSI routines.=item F<fcntl.h>Operations on files and flag constants for them.=item F<inttypes.h>Integer types with guaranteed sizes.=item F<netdb.h>Looking up TCP/IP host names.=item F<netinet/in.h>The address format for TCP/IP sockets.=item F<pthread.h>Operations on threads.=item F<sched.h>Scheduling operations.=item F<sys/ioctl.h>Codes to pass to C<ioctl()>.=item F<sys/socket.h>Data types for socket calls.=item F<sys/stat.h>Getting information about files.=item F<sys/time.h>Operations with time and timers.=item F<sys/types.h>More data types.=item F<sys/uio.h>Data types for scatter/gather calls.=item F<sys/un.h>The address format for Unix domain sockets.=item F<unistd.h>Prototypes for most routines defined in GUSI.=item F<utime.h>Getting the modification time of a file.=back=head2 GUSI LibrariesAt link time, you will have to link with the appropriate C<GUSI> libraries. All of the libraries contain a suffix to identify the compilers for which theyare suitable:=over 4=item F<XXX.68K.Lib>Libraries suitable for the Metrowerks 68K C/C++ compilers.=item F<XXX.PPC.Lib>Libraries suitable for the Metrowerks PPC C/C++ compilers.=item F<XXX.SC.Lib>Libraries suitable for the MPW SC/SCpp compilers.=item F<XXX.MrC.Lib>Libraries suitable for the MPW MrC/MrCpp compilers.=backTypically, you should link with three component libraries, in this order:=over 4=item *A library specifying the output console, such as:=over 4=item F<GUSI_MPW.XXX.Lib>For MPW tools.=item F<GUSI_SIOUX.XXX.Lib>For programs writing to the SIOUX console.=back=item *A library specifying the high level stdio library, such as:=over 4=item F<GUSI_MSL.XXX.Lib>For programs using the Metrowerks Standard Library stdio.=item F<GUSI_Stdio.SC.Lib>For programs using the MPW stdio. This option is currently only available for C<SC/SCpp>, for C<MrC/MrCpp>, you have to use the C<sfio> library for C<stdio> support. Alternatively, you can choose to exclusively use the POSIX layerfunctions C<(read/write/close)> for sockets and the stdio functions C<(fscanf/fwrite/fclose)> for files. In this case, be careful B<never> touse C<fileno> or C<fdopen>.=item F<GUSI_Sfio.XXX.Lib>For programs using the C<sfio> library. C<sfio> is a new I/O library developed by C<AT&T> with a source compatibility option with C<stdio>. As it covers only the C<stdio> part of the ANSI library, you will also have to link with standard libraryfor your compiler. Make sure to specify C<sfio> first in your link order, though.=back=item * The C<GUSI> library itself, i.e.:=over 4=item F<GUSI_Core.XXX.Lib>=back=backThese libraries should appear B<in this order, before any other libraries>. Thismay sometimes not be practicable, especially for 68K MPW tools. For this case, itis possible to substitute F<GUSI_Forward.68K> in the place of F<GUSI_Core.68K> anduse F<GUSI_Core.68K> later in the link order (usually last).Sometimes, you want to use C<GUSI> with threads created by another library, such asC<PowerPlant>. For this purpose, you can additionally specify theF<GUSI_ForeignThreads.XXX.Lib> library before any other C<GUSI> library andbefore F<ThreadsLib>. This is sufficient for CFM applications; for non-CFM68K applications, however, you also have to recompile the third party code while including F<GUSIForeignThreads.h> (e.g., using a precompiled header).While this state of things is not entirely satisfactory, I don't see a better technique at the moment.In addition, you will need to link with a considerable list of standard compiler libraries. Since C<GUSI> is written in C++, you will also need C++ support libraries. As an example, the Open Transport MPW test tools are linked withthe following libraries:=over 4=item Metrowerks 68K	"{MW68KLibraries}MSL MPWRuntime.68K.Lib"	"{MW68KLibraries}MSL Runtime68K.Lib"	"{MW68KLibraries}MacOS.Lib"	"{MW68KLibraries}MSL C.68K MPW(NL_4i_8d).Lib"	"{MW68KLibraries}MSL C++.68K (4i_8d).Lib"	"{MW68KLibraries}MathLib68K (4i_8d).Lib"	"{MW68KLibraries}ToolLibs.o"	"{MW68KLibraries}PLStringFuncs.glue.lib"	"{MW68KLibraries}OpenTransportApp.o"	"{MW68KLibraries}OpenTransport.o"		"{MW68KLibraries}OpenTptInet.o"=item Metrowerks PPC				"{MWPPCLibraries}MSL MPWCRuntime.Lib"	"{MWPPCLibraries}MSL RuntimePPC.Lib"	"{SharedLibraries}InterfaceLib"	"{MWPPCLibraries}MSL C.PPC MPW(NL).Lib"	"{MWPPCLibraries}MSL C++.PPC (NL).Lib"	"{SharedLibraries}MathLib"	"{SharedLibraries}ThreadsLib"	"{MWPPCLibraries}PPCToolLibs.o"	"{MWPPCLibraries}PLStringFuncsPPC.lib"	"{SharedLibraries}OpenTransportLib"	"{SharedLibraries}OpenTptInternetLib"	"{MWPPCLibraries}OpenTransportAppPPC.o"	"{MWPPCLibraries}OpenTptInetPPC.o"=item SC	"{CLibraries}CPlusLib.o"	"{CLibraries}StdCLib.o"	"{Libraries}MacRuntime.o"	"{Libraries}Interface.o"	"{Libraries}IntEnv.o"	"{Libraries}MathLib.o"	"{Libraries}ToolLibs.o"	"{CLibraries}IOStreams.far.o"	"{Libraries}OpenTransport.o"	"{Libraries}OpenTransportApp.o"	"{Libraries}OpenTptInet.o"=item MrC	"$(SFIO)lib:Sfio.MrC.Lib"	"{PPCLibraries}MrCPlusLib.o"	"{PPCLibraries}PPCStdCLib.o"	"{PPCLibraries}StdCRuntime.o"	"{PPCLibraries}PPCCRuntime.o"	"{PPCLibraries}PowerMathLib"	"{PPCLibraries}PPCToolLibs.o"	"{SharedLibraries}InterfaceLib"	"{SharedLibraries}ThreadsLib"	"{PPCLibraries}MrCIOStreams.o"	"{SharedLibraries}StdCLib"	"{SharedLibraries}OpenTransportLib"	"{SharedLibraries}OpenTptInternetLib"	"{PPCLibraries}OpenTransportAppPPC.o"	"{PPCLibraries}OpenTptInetPPC.o"=back=head2 ConfigurationYou will need to specify what C<GUSI> facilities you want to use in your application. This is done with three functions calling configuration hooks.=over4=item C<void GUSISetupFactories()>Sets up communications facilities accessible via sockets.=item C<void GUSISetupDevices()>Sets up facilities accessible via special file names.=item C<void GUSISetupConfig()>Sets up various configuration flags. Use this if you don't want to use aconfiguration resource (See L<GUSI_Advanced/Resources>).=backThese hooks can conveniently be created and edited via the F<GUSIConfig> application. F<GUSIConfig> saves a C++ file which you should then compile and link to your application. If you want to write a configuration filemanually, work from the templates in F<:test:GUSIConfig_MTInet.cp> andF<:test:GUSIConfig_OTInet.cp>. Because the configuration file has to include internal GUSI headers, it should B<not> be compiled when a precompiled header including any internalGUSI headers or F<pthread.h> is in effect. If necessary, compile yourconfiguration file in a separate target.=head2 Initializing the Macintosh ToolboxGUSI expects the Macintosh Toolbox to be initialized. You should initialize theToolbox in the following way:      InitGraf((Ptr) &qd.thePort);      InitFonts();      InitWindows();      InitMenus();      TEInit();      InitDialogs(nil);      InitCursor();However, C<GUSI> will initialize QuickDraw automatically, which obviatesthe need to initialize the Toolbox if all you want to do is a basic MPW tool.=head2 ResourcesUnder some (rare) circumstances, you might also want to rez your program with C<GUSI.r>. The section L<GUSI_Advanced/Resources> discusses when and how toadd your own configuration resource to customize C<GUSI> defaults. =head2 Warning messagesYou will get lots of warning messages about duplicate definitions, but that's ok (Which means I can't do anything about it).