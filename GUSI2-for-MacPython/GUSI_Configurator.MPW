Perl -Sx "{0}" {"Parameters"}; Exit {Status}#!perl## GUSI Configurator - Write GUSI configuration files#require "StandardFile.pl";sub question;sub read_config_section;sub write_config_section;sub configure_factories;sub configure_devices;sub proper_exit;%OldConfig = (   GUSIwithInetSockets => 1,   GUSIwithNullSockets => 1);@Factories = qw(	GUSIwithInetSockets	GUSIwithMTInetSockets GUSIwithMTTcpSockets GUSIwithMTUdpSockets	GUSIwithOTInetSockets GUSIwithOTTcpSockets GUSIwithOTUdpSockets	GUSIwithPPCSockets);%Factories = (	GUSIwithInetSockets	 	=> "TCP/UDP, using OpenTransport when available, else MacTCP",	GUSIwithMTInetSockets 	=> "TCP/UDP, using MacTCP",	GUSIwithMTTcpSockets  	=> "TCP, using MacTCP",	GUSIwithMTUdpSockets	 	=> "UDP, using MacTCP",	GUSIwithOTInetSockets	=> "TCP/UDP, using OpenTransport",	GUSIwithOTTcpSockets		=> "TCP, using OpenTransport",	GUSIwithOTUdpSockets		=> "UDP, using OpenTransport",	GUSIwithPPCSockets		=> "Program-Program Communications Toolbox");@Devices = qw(	GUSIwithNullSockets	GUSIwithDConSockets);%Devices = (	GUSIwithNullSockets		=> "Dev:Null",	GUSIwithDConSockets		=> "Dev:DCon <http://www.cache-computing.com/products/dcon/>");print <<END; GGGG   UU  UU   SSSSS  IIII   Grand Unified Socket InterfaceGG      UU  UU  SS       II        Copyright (C) 1992-1998 GG GGG  UU  UU   SSSS    II           Matthias Neeracher GG  GG  UU  UU      SS   II         <neeri\@iis.ee.ethz.ch> GGGG    UUUU   SSSSS   IIIIWelcome to the GUSI Configurator!END$MPW = ($MacPerl::Version =~ /MPW/);if (!@ARGV) {   print STDERR ($MPW ? <<END_MPW : <<END_APP);You didn't specify a configuration file on the command line.END_MPWYou didn't drop a configuration file onto this program.END_APP   exit if question(         "Do you want to start a new configuration file?",         ["y", "n"], "y")       eq "n";   $newfile = StandardFile::PutFile("Configuration File:", "GUSIConfig.c");   exit unless defined ($newfile);} else {   $oldfile = shift @ARGV;   open(OLDFILE, $oldfile) or die "Could not read configuration file: $!";   $newfile = $oldfile . ".new";}open(NEWFILE, ">$newfile") or die "Could not write configuration file: $!";if ($oldfile) {   while (<OLDFILE>) {      if (/BEGIN GUSI CONFIGURATION/) {         read_config_section;         goto OK;      }      print NEWFILE;   }   proper_exit if question(<<END, ["y", "n"], "n") eq "n";This file does not contain a GUSI configuration section. Do you want to add one?END	$firsttime = 1;} OK:configure_factories;configure_devices;write_config_section;if ($oldfile) {   while (<OLDFILE>) {		print NEWFILE;	}	close OLDFILE;	rename $oldfile, "$oldfile.bak";	rename $newfile, $oldfile;}exit;sub question {   my($q, $a, $d) = @_;   my(%a);   @a{@$a} = @$a;   $q =~ s/\n$//;   print STDERR "$q ";   for (;;) {      print STDERR "(", join("/", @$a), ") [$d] ";      $_ = <STDIN>;      s/.*\]//;            # Trim leading question      s/^\s*(.*?)\s*$/$1/; # Trim blanks      return $d if (/^$/); # Test for default      return $_ if $a{$_}; # Test for answer   }}sub read_config_section {	undef %OldConfig;	while (<OLDFILE>) {		last if /END GUSI CONFIGURATION/;		if (/^\s*(GUSIwith\w+)/) {			$OldConfig{$1} = 1;		}	}}sub write_config_section {	$t = localtime;		print NEWFILE<<END;/**************** BEGIN GUSI CONFIGURATION **************************** * * GUSI Configuration section generated by GUSI Configurator * last modified: $t * * This section will be overwritten by the next run of Configurator. *//* Declarations of Socket Factories */#ifdef __cplusplusextern "C" {#endifEND	print NEWFILE join "\n", map { $_ = "void $_();" } sort(@X = keys %Factories);		print NEWFILE<<END;void GUSISetupFactories();#ifdef __cplusplus}#endif/* Configure Socket Factories */void GUSISetupFactories(){#ifdef GUSISetupFactories_BeginHook	GUSISetupFactories_BeginHook#endifEND	for (@Factories) {		print NEWFILE "\n\t/**********\n\t * $Factories{$_}\n\t */\n"; 		if ($Configuration{$_}) {			print NEWFILE "\t$_();\n";		} else {			print NEWFILE "\t/* DISABLED: $_();\n";		}		print NEWFILE "\t/**/\n";	}		print NEWFILE<<END;#ifdef GUSISetupFactories_EndHook	GUSISetupFactories_EndHook#endif}/* Declarations of File Devices */#ifdef __cplusplusextern "C" {#endifEND	print NEWFILE join "\n", map { $_ = "void $_();" } sort(@X = keys %Devices);		print NEWFILE<<END;void GUSISetupDevices();#ifdef __cplusplus}#endif/* Configure File Devices */void GUSISetupDevices(){#ifdef GUSISetupDevices_BeginHook	GUSISetupDevices_BeginHook#endifEND	for (@Devices) {		print NEWFILE "\n\t/**********\n\t * $Devices{$_}\n\t */\n"; 		if ($Configuration{$_}) {			print NEWFILE "\t$_();\n";		} else {			print NEWFILE "\t/* DISABLED: $_();\n";		}		print NEWFILE "\t/**/\n";	}	print NEWFILE<<END;#ifdef GUSISetupDevices_EndHook	GUSISetupDevices_EndHook#endif}/**************** END GUSI CONFIGURATION *************************/END	print NEWFILE<<END if ($firsttime);/****************************************************************** * Uncomment and modify if you want to use hardcoded configurations. * This part will NOT be overwritten by future runs of Configurator. *//****#ifndef __cplusplus#error GUSISetupConfig() needs to be written in C++#endifextern "C" void GUSISetupConfig(){	GUSIConfiguration * config = 		GUSIConfiguration::CreateInstance(GUSIConfiguration::kNoResource);		/* Change fields of config */}****/END};BEGIN {	%Imp2Name = (		both => "",		mt   => "MT",		ot   => "OT"	);		%Fam2Name = (		both => "Inet",		tcp  => "Tcp",		udp  => "Udp"	);}sub configure_factories {	my($defaults) = join " ", keys %OldConfig;	my($imp,$fam);		if ($defaults =~ /GUSIwithInetSockets/) {		$imp = "both";	} elsif ($defaults =~ /GUSIwithMT/) {		$imp = "mt";	} elsif ($defaults =~ /GUSIwithOT/) {		$imp = "ot";	} else {		$imp = "neither";	}		$imp = question(<<END, ["both", "mt", "ot", "neither"], $imp);Do you want to support TCP/IP sockets? - MacTCP (mt) currently runs on all machines - Open Transport (ot) runs on most current Macintoshes - Both (both) provides the best support for both systems. - Neither (neither) does not provide TCP/IP support.Your choice?END	if ($imp ne "neither") {		if ($defaults =~ /Inet/ || ($defaults =~ /Tcp/ && $defaults =~ /Udp/)) {			$fam = "both";		} elsif ($defaults =~ /Udp/) {			$fam = "udp";		} elsif ($defaults =~ /Tcp/) {			$fam = "tcp";		} else {			$fam = "both";		}		$fam = question(<<END, ["both", "tcp", "udp"], $fam);Do you want TCP sockets, UDP sockets, or both?END		$Configuration{"GUSIwith$Imp2Name{$imp}$Fam2Name{$fam}Sockets"} = 1;	}	$def = $OldConfig{GUSIwithPPCSockets} ? "y" : "n";	if (question(<<END, ["y", "n"], $def) eq "y") {Do you want to support Program-Program Communications Toolbox sockets?END		$Configuration{GUSIwithPPCSockets} = 1;	}}sub configure_devices {	my($def) = $OldConfig{GUSIwithNullSockets} ? "y" : "n";	if (question(<<END, ["y", "n"], $def) eq "y") {Do you want to support Dev:Null?END		$Configuration{GUSIwithNullSockets} = 1;	}	$def = $OldConfig{GUSIwithDConSockets} ? "y" : "n";	if (question(<<END, ["y", "n"], $def) eq "y") {Do you want to support Dev:DCon and Dev:DCon:xxx (debugging console)?DCon is available from http://www.cache-computing.com/products/dcon/END		$Configuration{GUSIwithDConSockets} = 1;	}}sub proper_exit {   unlink($newfile);   exit 1;}